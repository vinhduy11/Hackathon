// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef PROTOBUF_hello_2eproto__INCLUDED
#define PROTOBUF_hello_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mservice {
namespace momo {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hello_2eproto();
void protobuf_AssignDesc_hello_2eproto();
void protobuf_ShutdownFile_hello_2eproto();

class Request;
class Response;

enum Response_ResultCode {
  Response_ResultCode_ALL_OK = 0,
  Response_ResultCode_MSG_FORMAT_NOT_CORRECT = 1,
  Response_ResultCode_PHONE_NUMBER_NOT_REGISTERED = 2,
  Response_ResultCode_PHONE_NUMBER_NOT_CORRECT = 3
};
bool Response_ResultCode_IsValid(int value);
const Response_ResultCode Response_ResultCode_ResultCode_MIN = Response_ResultCode_ALL_OK;
const Response_ResultCode Response_ResultCode_ResultCode_MAX = Response_ResultCode_PHONE_NUMBER_NOT_CORRECT;
const int Response_ResultCode_ResultCode_ARRAYSIZE = Response_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ResultCode_descriptor();
inline const ::std::string& Response_ResultCode_Name(Response_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ResultCode_descriptor(), value);
}
inline bool Response_ResultCode_Parse(
    const ::std::string& name, Response_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ResultCode>(
    Response_ResultCode_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string phone = 1;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 1;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional string imei = 3;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 3;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional string magic_key = 4;
  inline bool has_magic_key() const;
  inline void clear_magic_key();
  static const int kMagicKeyFieldNumber = 4;
  inline const ::std::string& magic_key() const;
  inline void set_magic_key(const ::std::string& value);
  inline void set_magic_key(const char* value);
  inline void set_magic_key(const char* value, size_t size);
  inline ::std::string* mutable_magic_key();
  inline ::std::string* release_magic_key();
  inline void set_allocated_magic_key(::std::string* magic_key);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Request)
 private:
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_magic_key();
  inline void clear_has_magic_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  ::std::string* imei_;
  ::std::string* magic_key_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_hello_2eproto();
  friend void protobuf_AssignDesc_hello_2eproto();
  friend void protobuf_ShutdownFile_hello_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_ResultCode ResultCode;
  static const ResultCode ALL_OK = Response_ResultCode_ALL_OK;
  static const ResultCode MSG_FORMAT_NOT_CORRECT = Response_ResultCode_MSG_FORMAT_NOT_CORRECT;
  static const ResultCode PHONE_NUMBER_NOT_REGISTERED = Response_ResultCode_PHONE_NUMBER_NOT_REGISTERED;
  static const ResultCode PHONE_NUMBER_NOT_CORRECT = Response_ResultCode_PHONE_NUMBER_NOT_CORRECT;
  static inline bool ResultCode_IsValid(int value) {
    return Response_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    Response_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    Response_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    Response_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return Response_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return Response_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return Response_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string phone = 1;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 1;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string magic_key = 5;
  inline bool has_magic_key() const;
  inline void clear_magic_key();
  static const int kMagicKeyFieldNumber = 5;
  inline const ::std::string& magic_key() const;
  inline void set_magic_key(const ::std::string& value);
  inline void set_magic_key(const char* value);
  inline void set_magic_key(const char* value, size_t size);
  inline ::std::string* mutable_magic_key();
  inline ::std::string* release_magic_key();
  inline void set_allocated_magic_key(::std::string* magic_key);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Response)
 private:
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_magic_key();
  inline void clear_has_magic_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  ::google::protobuf::uint32 index_;
  bool result_;
  ::std::string* magic_key_;
  ::google::protobuf::uint32 result_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_hello_2eproto();
  friend void protobuf_AssignDesc_hello_2eproto();
  friend void protobuf_ShutdownFile_hello_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required string phone = 1;
inline bool Request::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& Request::phone() const {
  return *phone_;
}
inline void Request::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void Request::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void Request::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* Request::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 index = 2;
inline bool Request::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Request::index() const {
  return index_;
}
inline void Request::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional string imei = 3;
inline bool Request::has_imei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_imei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_imei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& Request::imei() const {
  return *imei_;
}
inline void Request::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void Request::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void Request::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* Request::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string magic_key = 4;
inline bool Request::has_magic_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_magic_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_magic_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_magic_key() {
  if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
    magic_key_->clear();
  }
  clear_has_magic_key();
}
inline const ::std::string& Request::magic_key() const {
  return *magic_key_;
}
inline void Request::set_magic_key(const ::std::string& value) {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  magic_key_->assign(value);
}
inline void Request::set_magic_key(const char* value) {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  magic_key_->assign(value);
}
inline void Request::set_magic_key(const char* value, size_t size) {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  magic_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_magic_key() {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  return magic_key_;
}
inline ::std::string* Request::release_magic_key() {
  clear_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = magic_key_;
    magic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_magic_key(::std::string* magic_key) {
  if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
    delete magic_key_;
  }
  if (magic_key) {
    set_has_magic_key();
    magic_key_ = magic_key;
  } else {
    clear_has_magic_key();
    magic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response

// required string phone = 1;
inline bool Response::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& Response::phone() const {
  return *phone_;
}
inline void Response::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void Response::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void Response::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* Response::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 index = 2;
inline bool Response::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Response::index() const {
  return index_;
}
inline void Response::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required bool result = 3;
inline bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool Response::result() const {
  return result_;
}
inline void Response::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 result_code = 4;
inline bool Response::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 Response::result_code() const {
  return result_code_;
}
inline void Response::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
}

// optional string magic_key = 5;
inline bool Response::has_magic_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_magic_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_magic_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_magic_key() {
  if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
    magic_key_->clear();
  }
  clear_has_magic_key();
}
inline const ::std::string& Response::magic_key() const {
  return *magic_key_;
}
inline void Response::set_magic_key(const ::std::string& value) {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  magic_key_->assign(value);
}
inline void Response::set_magic_key(const char* value) {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  magic_key_->assign(value);
}
inline void Response::set_magic_key(const char* value, size_t size) {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  magic_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_magic_key() {
  set_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    magic_key_ = new ::std::string;
  }
  return magic_key_;
}
inline ::std::string* Response::release_magic_key() {
  clear_has_magic_key();
  if (magic_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = magic_key_;
    magic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_magic_key(::std::string* magic_key) {
  if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
    delete magic_key_;
  }
  if (magic_key) {
    set_has_magic_key();
    magic_key_ = magic_key;
  } else {
    clear_has_magic_key();
    magic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace momo
}  // namespace mservice
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::Response_ResultCode>() {
  return ::com::mservice::momo::msg::Response_ResultCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hello_2eproto__INCLUDED
