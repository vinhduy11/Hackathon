// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SoapProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SoapProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mservice {
namespace momo {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* ZaloGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZaloGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* keyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  keyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* commonAdjust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  commonAdjust_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankNetConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankNetConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterInactiveAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterInactiveAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyGameCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyGameCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMobilityCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMobilityCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentInfoModify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentInfoModify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepositCashOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepositCashOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillPayTelephone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillPayTelephone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillPayTicketAirline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillPayTicketAirline_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillPayTicketTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillPayTicketTrain_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillPayInsurance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillPayInsurance_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillPayInternet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillPayInternet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillPayOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillPayOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* Err_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Err_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Err_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SendSms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSms_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSmsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSmsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetAgentInfoReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopUpString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopUpString_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopUpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopUpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* M2CTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M2CTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOneBillOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOneBillOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* M2MTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M2MTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferMoney2Place_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferMoney2Place_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePin_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryNewPin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryNewPin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOneBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOneBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayMultiBills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayMultiBills_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewPaymentHistoryByBillId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewPaymentHistoryByBillId_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopUpGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopUpGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPhoneDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPhoneDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreAround_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreAround_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickDeposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickDeposit_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickPayment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickPayment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankNetToMomo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankNetToMomo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankNetVerifyOtp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankNetVerifyOtp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Broadcast_MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SoapProto_2eproto() {
  protobuf_AddDesc_SoapProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SoapProto.proto");
  GOOGLE_CHECK(file != NULL);
  ZaloGroup_descriptor_ = file->message_type(0);
  static const int ZaloGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZaloGroup, zalo_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZaloGroup, zalo_capset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZaloGroup, zalo_upper_limit_),
  };
  ZaloGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZaloGroup_descriptor_,
      ZaloGroup::default_instance_,
      ZaloGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZaloGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZaloGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZaloGroup));
  keyValuePair_descriptor_ = file->message_type(1);
  static const int keyValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyValuePair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyValuePair, value_),
  };
  keyValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      keyValuePair_descriptor_,
      keyValuePair::default_instance_,
      keyValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(keyValuePair));
  commonAdjust_descriptor_ = file->message_type(2);
  static const int commonAdjust_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, wallettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, extra_map_),
  };
  commonAdjust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      commonAdjust_descriptor_,
      commonAdjust::default_instance_,
      commonAdjust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonAdjust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(commonAdjust));
  BankNetConfirm_descriptor_ = file->message_type(3);
  static const int BankNetConfirm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetConfirm, merchant_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetConfirm, trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetConfirm, adjustresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetConfirm, extra_map_),
  };
  BankNetConfirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankNetConfirm_descriptor_,
      BankNetConfirm::default_instance_,
      BankNetConfirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetConfirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetConfirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankNetConfirm));
  RegisterInactiveAgent_descriptor_ = file->message_type(4);
  static const int RegisterInactiveAgent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, persionalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, arr_capset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, upper_limit_),
  };
  RegisterInactiveAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterInactiveAgent_descriptor_,
      RegisterInactiveAgent::default_instance_,
      RegisterInactiveAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInactiveAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterInactiveAgent));
  BuyOther_descriptor_ = file->message_type(5);
  static const int BuyOther_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOther, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOther, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOther, pin_),
  };
  BuyOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyOther_descriptor_,
      BuyOther::default_instance_,
      BuyOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyOther));
  BuyGameCard_descriptor_ = file->message_type(6);
  static const int BuyGameCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGameCard, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGameCard, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGameCard, pin_),
  };
  BuyGameCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyGameCard_descriptor_,
      BuyGameCard::default_instance_,
      BuyGameCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGameCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGameCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyGameCard));
  BuyMobilityCard_descriptor_ = file->message_type(7);
  static const int BuyMobilityCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMobilityCard, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMobilityCard, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMobilityCard, pin_),
  };
  BuyMobilityCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMobilityCard_descriptor_,
      BuyMobilityCard::default_instance_,
      BuyMobilityCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMobilityCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMobilityCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMobilityCard));
  AgentInfoModify_descriptor_ = file->message_type(8);
  static const int AgentInfoModify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, dob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, kvps_),
  };
  AgentInfoModify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentInfoModify_descriptor_,
      AgentInfoModify::default_instance_,
      AgentInfoModify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfoModify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentInfoModify));
  DepositCashOther_descriptor_ = file->message_type(9);
  static const int DepositCashOther_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, customeracc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, channel_),
  };
  DepositCashOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepositCashOther_descriptor_,
      DepositCashOther::default_instance_,
      DepositCashOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCashOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepositCashOther));
  BillPayTelephone_descriptor_ = file->message_type(10);
  static const int BillPayTelephone_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, channel_),
  };
  BillPayTelephone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillPayTelephone_descriptor_,
      BillPayTelephone::default_instance_,
      BillPayTelephone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTelephone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillPayTelephone));
  BillPayTicketAirline_descriptor_ = file->message_type(11);
  static const int BillPayTicketAirline_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, ticketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, channel_),
  };
  BillPayTicketAirline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillPayTicketAirline_descriptor_,
      BillPayTicketAirline::default_instance_,
      BillPayTicketAirline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketAirline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillPayTicketAirline));
  BillPayTicketTrain_descriptor_ = file->message_type(12);
  static const int BillPayTicketTrain_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, placeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, ticketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, channel_),
  };
  BillPayTicketTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillPayTicketTrain_descriptor_,
      BillPayTicketTrain::default_instance_,
      BillPayTicketTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayTicketTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillPayTicketTrain));
  BillPayInsurance_descriptor_ = file->message_type(13);
  static const int BillPayInsurance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, insuranceacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, channel_),
  };
  BillPayInsurance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillPayInsurance_descriptor_,
      BillPayInsurance::default_instance_,
      BillPayInsurance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInsurance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillPayInsurance));
  BillPayInternet_descriptor_ = file->message_type(14);
  static const int BillPayInternet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, customeracc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, channel_),
  };
  BillPayInternet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillPayInternet_descriptor_,
      BillPayInternet::default_instance_,
      BillPayInternet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayInternet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillPayInternet));
  BillPayOther_descriptor_ = file->message_type(15);
  static const int BillPayOther_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, billerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, channel_),
  };
  BillPayOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillPayOther_descriptor_,
      BillPayOther::default_instance_,
      BillPayOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillPayOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillPayOther));
  Err_descriptor_ = file->message_type(16);
  static const int Err_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, rdesc_),
  };
  Err_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Err_descriptor_,
      Err::default_instance_,
      Err_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Err));
  Err_ResultCode_descriptor_ = Err_descriptor_->enum_type(0);
  SendSms_descriptor_ = file->message_type(17);
  static const int SendSms_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, sms_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, to_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, content_),
  };
  SendSms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSms_descriptor_,
      SendSms::default_instance_,
      SendSms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSms));
  SendSmsReply_descriptor_ = file->message_type(18);
  static const int SendSmsReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, sms_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, rdesc_),
  };
  SendSmsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSmsReply_descriptor_,
      SendSmsReply::default_instance_,
      SendSmsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSmsReply));
  RegStatus_descriptor_ = file->message_type(19);
  static const int RegStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_setup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_reged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_named_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_frozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_suppend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, is_stopped_),
  };
  RegStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegStatus_descriptor_,
      RegStatus::default_instance_,
      RegStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegStatus));
  GetAgentInfoReply_descriptor_ = file->message_type(20);
  static const int GetAgentInfoReply_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, momo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, mload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, regstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, dateofbirth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, bank_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, bank_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, bank_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, createddate_),
  };
  GetAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAgentInfoReply_descriptor_,
      GetAgentInfoReply::default_instance_,
      GetAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAgentInfoReply));
  GetAgentInfoReply_ResultCode_descriptor_ = GetAgentInfoReply_descriptor_->enum_type(0);
  Register_descriptor_ = file->message_type(21);
  static const int Register_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, arr_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, arr_capset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, upper_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, dateofbirth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, kvps_),
  };
  Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register));
  LogIn_descriptor_ = file->message_type(22);
  static const int LogIn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogIn, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogIn, mpin_),
  };
  LogIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogIn_descriptor_,
      LogIn::default_instance_,
      LogIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogIn));
  GetBillInfo_descriptor_ = file->message_type(23);
  static const int GetBillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, provider_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, bill_id_),
  };
  GetBillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBillInfo_descriptor_,
      GetBillInfo::default_instance_,
      GetBillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBillInfo));
  AgentInfo_descriptor_ = file->message_type(24);
  static const int AgentInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, number_),
  };
  AgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentInfo_descriptor_,
      AgentInfo::default_instance_,
      AgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentInfo));
  BankOut_descriptor_ = file->message_type(25);
  static const int BankOut_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, bank_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, kvps_),
  };
  BankOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankOut_descriptor_,
      BankOut::default_instance_,
      BankOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankOut));
  TopUp_descriptor_ = file->message_type(26);
  static const int TopUp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, from_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, to_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, keyvaluepairs_),
  };
  TopUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopUp_descriptor_,
      TopUp::default_instance_,
      TopUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopUp));
  TopUpString_descriptor_ = file->message_type(27);
  static const int TopUpString_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, from_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, to_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, keyvaluepairs_),
  };
  TopUpString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopUpString_descriptor_,
      TopUpString::default_instance_,
      TopUpString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopUpString));
  TopUpReply_descriptor_ = file->message_type(28);
  static const int TopUpReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpReply, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpReply, trans_id_),
  };
  TopUpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopUpReply_descriptor_,
      TopUpReply::default_instance_,
      TopUpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopUpReply));
  BankIn_descriptor_ = file->message_type(29);
  static const int BankIn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, bank_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, kvps_),
  };
  BankIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankIn_descriptor_,
      BankIn::default_instance_,
      BankIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankIn));
  M2CTransfer_descriptor_ = file->message_type(30);
  static const int M2CTransfer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, kvps_),
  };
  M2CTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M2CTransfer_descriptor_,
      M2CTransfer::default_instance_,
      M2CTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2CTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M2CTransfer));
  PayOneBillOther_descriptor_ = file->message_type(31);
  static const int PayOneBillOther_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, kvps_),
  };
  PayOneBillOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOneBillOther_descriptor_,
      PayOneBillOther::default_instance_,
      PayOneBillOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBillOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOneBillOther));
  M2MTransfer_descriptor_ = file->message_type(32);
  static const int M2MTransfer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, kvps_),
  };
  M2MTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M2MTransfer_descriptor_,
      M2MTransfer::default_instance_,
      M2MTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M2MTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M2MTransfer));
  TransferMoney2Place_descriptor_ = file->message_type(33);
  static const int TransferMoney2Place_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, kvps_),
  };
  TransferMoney2Place_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferMoney2Place_descriptor_,
      TransferMoney2Place::default_instance_,
      TransferMoney2Place_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMoney2Place, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferMoney2Place));
  ChangePin_descriptor_ = file->message_type(34);
  static const int ChangePin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, old_pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, new_pin_),
  };
  ChangePin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePin_descriptor_,
      ChangePin::default_instance_,
      ChangePin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePin));
  RecoveryNewPin_descriptor_ = file->message_type(35);
  static const int RecoveryNewPin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryNewPin, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryNewPin, old_pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryNewPin, new_pin_),
  };
  RecoveryNewPin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryNewPin_descriptor_,
      RecoveryNewPin::default_instance_,
      RecoveryNewPin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryNewPin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryNewPin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryNewPin));
  PayOneBill_descriptor_ = file->message_type(36);
  static const int PayOneBill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, keyvaluepairs_),
  };
  PayOneBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOneBill_descriptor_,
      PayOneBill::default_instance_,
      PayOneBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOneBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOneBill));
  PayMultiBills_descriptor_ = file->message_type(37);
  static const int PayMultiBills_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayMultiBills, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayMultiBills, providerids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayMultiBills, billids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayMultiBills, amounts_),
  };
  PayMultiBills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayMultiBills_descriptor_,
      PayMultiBills::default_instance_,
      PayMultiBills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayMultiBills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayMultiBills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayMultiBills));
  ViewPaymentHistoryByBillId_descriptor_ = file->message_type(38);
  static const int ViewPaymentHistoryByBillId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewPaymentHistoryByBillId, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewPaymentHistoryByBillId, billid_),
  };
  ViewPaymentHistoryByBillId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewPaymentHistoryByBillId_descriptor_,
      ViewPaymentHistoryByBillId::default_instance_,
      ViewPaymentHistoryByBillId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewPaymentHistoryByBillId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewPaymentHistoryByBillId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewPaymentHistoryByBillId));
  TopUpGame_descriptor_ = file->message_type(39);
  static const int TopUpGame_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, mpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, keyvaluepairs_),
  };
  TopUpGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopUpGame_descriptor_,
      TopUpGame::default_instance_,
      TopUpGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopUpGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopUpGame));
  CheckPhoneDetail_descriptor_ = file->message_type(40);
  static const int CheckPhoneDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneDetail, number_),
  };
  CheckPhoneDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPhoneDetail_descriptor_,
      CheckPhoneDetail::default_instance_,
      CheckPhoneDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPhoneDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPhoneDetail));
  GetStoreAround_descriptor_ = file->message_type(41);
  static const int GetStoreAround_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, ward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, limit_),
  };
  GetStoreAround_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreAround_descriptor_,
      GetStoreAround::default_instance_,
      GetStoreAround_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreAround));
  QuickDeposit_descriptor_ = file->message_type(42);
  static const int QuickDeposit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, tellerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, channel_),
  };
  QuickDeposit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickDeposit_descriptor_,
      QuickDeposit::default_instance_,
      QuickDeposit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickDeposit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickDeposit));
  QuickPayment_descriptor_ = file->message_type(43);
  static const int QuickPayment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, tellerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, channel_),
  };
  QuickPayment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickPayment_descriptor_,
      QuickPayment::default_instance_,
      QuickPayment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickPayment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickPayment));
  BankNetToMomo_descriptor_ = file->message_type(44);
  static const int BankNetToMomo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, bankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, card_holder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, card_holder_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, card_holder_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, card_holder_year_),
  };
  BankNetToMomo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankNetToMomo_descriptor_,
      BankNetToMomo::default_instance_,
      BankNetToMomo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetToMomo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankNetToMomo));
  BankNetVerifyOtp_descriptor_ = file->message_type(45);
  static const int BankNetVerifyOtp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, merchant_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, kvps_),
  };
  BankNetVerifyOtp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankNetVerifyOtp_descriptor_,
      BankNetVerifyOtp::default_instance_,
      BankNetVerifyOtp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankNetVerifyOtp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankNetVerifyOtp));
  Broadcast_descriptor_ = file->message_type(46);
  static const int Broadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, content_),
  };
  Broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_descriptor_,
      Broadcast::default_instance_,
      Broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast));
  Broadcast_MsgType_descriptor_ = Broadcast_descriptor_->enum_type(0);
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SoapProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZaloGroup_descriptor_, &ZaloGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    keyValuePair_descriptor_, &keyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    commonAdjust_descriptor_, &commonAdjust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankNetConfirm_descriptor_, &BankNetConfirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterInactiveAgent_descriptor_, &RegisterInactiveAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyOther_descriptor_, &BuyOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyGameCard_descriptor_, &BuyGameCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMobilityCard_descriptor_, &BuyMobilityCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentInfoModify_descriptor_, &AgentInfoModify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepositCashOther_descriptor_, &DepositCashOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillPayTelephone_descriptor_, &BillPayTelephone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillPayTicketAirline_descriptor_, &BillPayTicketAirline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillPayTicketTrain_descriptor_, &BillPayTicketTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillPayInsurance_descriptor_, &BillPayInsurance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillPayInternet_descriptor_, &BillPayInternet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillPayOther_descriptor_, &BillPayOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Err_descriptor_, &Err::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSms_descriptor_, &SendSms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSmsReply_descriptor_, &SendSmsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegStatus_descriptor_, &RegStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAgentInfoReply_descriptor_, &GetAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogIn_descriptor_, &LogIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBillInfo_descriptor_, &GetBillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentInfo_descriptor_, &AgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankOut_descriptor_, &BankOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopUp_descriptor_, &TopUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopUpString_descriptor_, &TopUpString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopUpReply_descriptor_, &TopUpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankIn_descriptor_, &BankIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M2CTransfer_descriptor_, &M2CTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOneBillOther_descriptor_, &PayOneBillOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M2MTransfer_descriptor_, &M2MTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferMoney2Place_descriptor_, &TransferMoney2Place::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePin_descriptor_, &ChangePin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryNewPin_descriptor_, &RecoveryNewPin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOneBill_descriptor_, &PayOneBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayMultiBills_descriptor_, &PayMultiBills::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewPaymentHistoryByBillId_descriptor_, &ViewPaymentHistoryByBillId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopUpGame_descriptor_, &TopUpGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPhoneDetail_descriptor_, &CheckPhoneDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreAround_descriptor_, &GetStoreAround::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickDeposit_descriptor_, &QuickDeposit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickPayment_descriptor_, &QuickPayment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankNetToMomo_descriptor_, &BankNetToMomo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankNetVerifyOtp_descriptor_, &BankNetVerifyOtp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_descriptor_, &Broadcast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SoapProto_2eproto() {
  delete ZaloGroup::default_instance_;
  delete ZaloGroup_reflection_;
  delete keyValuePair::default_instance_;
  delete keyValuePair_reflection_;
  delete commonAdjust::default_instance_;
  delete commonAdjust_reflection_;
  delete BankNetConfirm::default_instance_;
  delete BankNetConfirm_reflection_;
  delete RegisterInactiveAgent::default_instance_;
  delete RegisterInactiveAgent_reflection_;
  delete BuyOther::default_instance_;
  delete BuyOther_reflection_;
  delete BuyGameCard::default_instance_;
  delete BuyGameCard_reflection_;
  delete BuyMobilityCard::default_instance_;
  delete BuyMobilityCard_reflection_;
  delete AgentInfoModify::default_instance_;
  delete AgentInfoModify_reflection_;
  delete DepositCashOther::default_instance_;
  delete DepositCashOther_reflection_;
  delete BillPayTelephone::default_instance_;
  delete BillPayTelephone_reflection_;
  delete BillPayTicketAirline::default_instance_;
  delete BillPayTicketAirline_reflection_;
  delete BillPayTicketTrain::default_instance_;
  delete BillPayTicketTrain_reflection_;
  delete BillPayInsurance::default_instance_;
  delete BillPayInsurance_reflection_;
  delete BillPayInternet::default_instance_;
  delete BillPayInternet_reflection_;
  delete BillPayOther::default_instance_;
  delete BillPayOther_reflection_;
  delete Err::default_instance_;
  delete Err_reflection_;
  delete SendSms::default_instance_;
  delete SendSms_reflection_;
  delete SendSmsReply::default_instance_;
  delete SendSmsReply_reflection_;
  delete RegStatus::default_instance_;
  delete RegStatus_reflection_;
  delete GetAgentInfoReply::default_instance_;
  delete GetAgentInfoReply_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete LogIn::default_instance_;
  delete LogIn_reflection_;
  delete GetBillInfo::default_instance_;
  delete GetBillInfo_reflection_;
  delete AgentInfo::default_instance_;
  delete AgentInfo_reflection_;
  delete BankOut::default_instance_;
  delete BankOut_reflection_;
  delete TopUp::default_instance_;
  delete TopUp_reflection_;
  delete TopUpString::default_instance_;
  delete TopUpString_reflection_;
  delete TopUpReply::default_instance_;
  delete TopUpReply_reflection_;
  delete BankIn::default_instance_;
  delete BankIn_reflection_;
  delete M2CTransfer::default_instance_;
  delete M2CTransfer_reflection_;
  delete PayOneBillOther::default_instance_;
  delete PayOneBillOther_reflection_;
  delete M2MTransfer::default_instance_;
  delete M2MTransfer_reflection_;
  delete TransferMoney2Place::default_instance_;
  delete TransferMoney2Place_reflection_;
  delete ChangePin::default_instance_;
  delete ChangePin_reflection_;
  delete RecoveryNewPin::default_instance_;
  delete RecoveryNewPin_reflection_;
  delete PayOneBill::default_instance_;
  delete PayOneBill_reflection_;
  delete PayMultiBills::default_instance_;
  delete PayMultiBills_reflection_;
  delete ViewPaymentHistoryByBillId::default_instance_;
  delete ViewPaymentHistoryByBillId_reflection_;
  delete TopUpGame::default_instance_;
  delete TopUpGame_reflection_;
  delete CheckPhoneDetail::default_instance_;
  delete CheckPhoneDetail_reflection_;
  delete GetStoreAround::default_instance_;
  delete GetStoreAround_reflection_;
  delete QuickDeposit::default_instance_;
  delete QuickDeposit_reflection_;
  delete QuickPayment::default_instance_;
  delete QuickPayment_reflection_;
  delete BankNetToMomo::default_instance_;
  delete BankNetToMomo_reflection_;
  delete BankNetVerifyOtp::default_instance_;
  delete BankNetVerifyOtp_reflection_;
  delete Broadcast::default_instance_;
  delete Broadcast_reflection_;
}

void protobuf_AddDesc_SoapProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SoapProto.proto\022\025com.mservice.momo.msg"
    "\"Q\n\tZaloGroup\022\022\n\nzalo_group\030\001 \001(\t\022\026\n\016zal"
    "o_capset_id\030\002 \001(\t\022\030\n\020zalo_upper_limit\030\003 "
    "\001(\t\"*\n\014keyValuePair\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t\"\302\001\n\014commonAdjust\022\016\n\006source\030\001 \001(\t"
    "\022\016\n\006target\030\002 \001(\t\022\016\n\006amount\030\003 \001(\004\022\022\n\nwall"
    "etType\030\004 \001(\r\022\023\n\013description\030\005 \001(\t\022\014\n\004tim"
    "e\030\006 \001(\004\022\023\n\013phoneNumber\030\007 \001(\t\0226\n\textra_ma"
    "p\030\010 \003(\0132#.com.mservice.momo.msg.keyValue"
    "Pair\"\213\001\n\016BankNetConfirm\022\031\n\021merchant_tran"
    "s_id\030\001 \001(\t\022\020\n\010trans_id\030\002 \001(\t\022\024\n\014adjustRe"
    "sult\030\003 \001(\r\0226\n\textra_map\030\004 \003(\0132#.com.mser"
    "vice.momo.msg.keyValuePair\"\306\001\n\025RegisterI"
    "nactiveAgent\022\r\n\005phone\030\001 \001(\t\022\014\n\004name\030\002 \001("
    "\t\022\020\n\010birthday\030\003 \001(\t\022\017\n\007address\030\004 \001(\t\022\023\n\013"
    "persionalId\030\005 \001(\t\022\017\n\007contact\030\006 \001(\t\022\r\n\005em"
    "ail\030\007 \001(\t\022\017\n\007channel\030\010 \001(\t\022\022\n\narr_capset"
    "\030\t \001(\t\022\023\n\013upper_limit\030\n \001(\t\";\n\010BuyOther\022"
    "\022\n\nproviderId\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\022\013\n\003p"
    "in\030\003 \001(\t\">\n\013BuyGameCard\022\022\n\nproviderId\030\001 "
    "\001(\t\022\016\n\006amount\030\002 \001(\t\022\013\n\003pin\030\003 \001(\t\"B\n\017BuyM"
    "obilityCard\022\022\n\nproviderId\030\001 \001(\t\022\016\n\006amoun"
    "t\030\002 \001(\t\022\013\n\003pin\030\003 \001(\t\"\220\001\n\017AgentInfoModify"
    "\022\014\n\004name\030\001 \001(\t\022\017\n\007card_id\030\002 \001(\t\022\017\n\007addre"
    "ss\030\003 \001(\t\022\r\n\005email\030\004 \001(\t\022\013\n\003dob\030\005 \001(\t\0221\n\004"
    "kvps\030\006 \003(\0132#.com.mservice.momo.msg.keyVa"
    "luePair\"i\n\020DepositCashOther\022\022\n\nproviderI"
    "d\030\001 \001(\t\022\023\n\013customerAcc\030\002 \001(\t\022\013\n\003pin\030\003 \001("
    "\t\022\016\n\006amount\030\004 \001(\004\022\017\n\007channel\030\005 \001(\t\"s\n\020Bi"
    "llPayTelephone\022\022\n\nproviderId\030\001 \001(\t\022\r\n\005ph"
    "one\030\002 \001(\t\022\016\n\006areaId\030\003 \001(\t\022\013\n\003pin\030\004 \001(\t\022\016"
    "\n\006amount\030\005 \001(\004\022\017\n\007channel\030\006 \001(\t\"j\n\024BillP"
    "ayTicketAirline\022\022\n\nproviderId\030\001 \001(\t\022\020\n\010t"
    "icketId\030\002 \001(\t\022\013\n\003pin\030\003 \001(\t\022\016\n\006amount\030\004 \001"
    "(\004\022\017\n\007channel\030\005 \001(\t\"y\n\022BillPayTicketTrai"
    "n\022\017\n\007placeId\030\001 \001(\t\022\020\n\010ticketId\030\002 \001(\t\022\013\n\003"
    "pin\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\022\n\nproviderId\030"
    "\005 \001(\t\022\017\n\007channel\030\006 \001(\t\"j\n\020BillPayInsuran"
    "ce\022\022\n\nproviderId\030\001 \001(\t\022\024\n\014insuranceAcc\030\002"
    " \001(\t\022\013\n\003pin\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\017\n\007cha"
    "nnel\030\005 \001(\t\"x\n\017BillPayInternet\022\022\n\nprovide"
    "rId\030\001 \001(\t\022\023\n\013customerAcc\030\002 \001(\t\022\016\n\006areaId"
    "\030\003 \001(\t\022\013\n\003pin\030\004 \001(\t\022\016\n\006amount\030\005 \001(\004\022\017\n\007c"
    "hannel\030\006 \001(\t\"r\n\014BillPayOther\022\022\n\nprovider"
    "Id\030\001 \001(\t\022\020\n\010billerId\030\002 \001(\t\022\016\n\006areaId\030\003 \001"
    "(\t\022\013\n\003pin\030\004 \001(\t\022\016\n\006amount\030\005 \001(\004\022\017\n\007chann"
    "el\030\006 \001(\t\"c\n\003Err\022\r\n\005rcode\030\001 \001(\r\022\r\n\005rdesc\030"
    "\002 \001(\t\">\n\nResultCode\022\032\n\026MSG_FORMAT_NOT_CO"
    "RRECT\020\001\022\024\n\020NUMBER_NOT_VALID\020\002\"=\n\007SendSms"
    "\022\016\n\006sms_id\030\001 \001(\r\022\021\n\tto_number\030\002 \001(\r\022\017\n\007c"
    "ontent\030\003 \001(\t\"<\n\014SendSmsReply\022\016\n\006sms_id\030\001"
    " \001(\r\022\r\n\005rcode\030\002 \001(\r\022\r\n\005rdesc\030\003 \001(\t\"\217\001\n\tR"
    "egStatus\022\020\n\010is_setup\030\001 \001(\010\022\020\n\010is_reged\030\002"
    " \001(\010\022\021\n\tis_active\030\003 \001(\010\022\020\n\010is_named\030\004 \001("
    "\010\022\021\n\tis_frozen\030\005 \001(\010\022\022\n\nis_suppend\030\006 \001(\010"
    "\022\022\n\nis_stopped\030\007 \001(\010\"\256\003\n\021GetAgentInfoRep"
    "ly\022\016\n\006result\030\001 \001(\010\022\014\n\004name\030\002 \001(\t\022\017\n\007card"
    "_id\030\003 \001(\t\022\014\n\004momo\030\004 \001(\001\022\r\n\005mload\030\005 \001(\001\022\r"
    "\n\005email\030\006 \001(\t\0223\n\tregStatus\030\007 \001(\0132 .com.m"
    "service.momo.msg.RegStatus\022\r\n\005point\030\010 \001("
    "\004\022\023\n\013dateOfBirth\030\t \001(\t\022\017\n\007address\030\n \001(\t\022"
    "\r\n\005rcode\030\013 \001(\r\022\021\n\tbank_name\030\014 \001(\t\022\020\n\010ban"
    "k_acc\030\r \001(\t\022\021\n\tbank_code\030\016 \001(\t\022\020\n\010agent_"
    "id\030\017 \001(\004\022\023\n\013createdDate\030\020 \001(\004\"f\n\nResultC"
    "ode\022\031\n\014SYSTEM_ERROR\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006ALL_OK"
    "\020\000\022\034\n\030PHONE_NUMBER_NOT_CORRECT\020\002\022\023\n\017AGEN"
    "T_NOT_FOUND\020\013\"\215\002\n\010Register\022\014\n\004name\030\001 \001(\t"
    "\022\017\n\007id_card\030\002 \001(\t\022\013\n\003pin\030\003 \001(\t\022\021\n\tarr_gr"
    "oup\030\004 \001(\t\022\022\n\narr_capset\030\005 \001(\t\022\023\n\013upper_l"
    "imit\030\006 \001(\t\022\r\n\005email\030\007 \001(\t\022\020\n\010question\030\010 "
    "\001(\t\022\016\n\006answer\030\t \001(\t\022\017\n\007channel\030\n \001(\t\022\023\n\013"
    "dateOfBirth\030\013 \001(\t\022\017\n\007address\030\014 \001(\t\0221\n\004kv"
    "ps\030\r \003(\0132#.com.mservice.momo.msg.keyValu"
    "ePair\"%\n\005LogIn\022\016\n\006number\030\001 \001(\r\022\014\n\004mpin\030\002"
    " \001(\t\"A\n\013GetBillInfo\022\014\n\004mpin\030\001 \001(\t\022\023\n\013pro"
    "vider_id\030\002 \001(\t\022\017\n\007bill_id\030\003 \001(\t\"\033\n\tAgent"
    "Info\022\016\n\006number\030\001 \001(\t\"~\n\007BankOut\022\014\n\004mpin\030"
    "\001 \001(\t\022\016\n\006amount\030\002 \001(\004\022\021\n\tbank_code\030\003 \001(\t"
    "\022\017\n\007channel\030\004 \001(\t\0221\n\004kvps\030\005 \003(\0132#.com.ms"
    "ervice.momo.msg.keyValuePair\"\232\001\n\005TopUp\022\023"
    "\n\013from_number\030\001 \001(\r\022\014\n\004mpin\030\002 \001(\t\022\021\n\tto_"
    "number\030\003 \001(\r\022\016\n\006amount\030\004 \001(\004\022\017\n\007channel\030"
    "\005 \001(\t\022:\n\rkeyValuePairs\030\006 \003(\0132#.com.mserv"
    "ice.momo.msg.keyValuePair\"\240\001\n\013TopUpStrin"
    "g\022\023\n\013from_number\030\001 \001(\t\022\014\n\004mpin\030\002 \001(\t\022\021\n\t"
    "to_number\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\017\n\007chann"
    "el\030\005 \001(\t\022:\n\rkeyValuePairs\030\006 \003(\0132#.com.ms"
    "ervice.momo.msg.keyValuePair\"=\n\nTopUpRep"
    "ly\022\016\n\006result\030\001 \001(\010\022\r\n\005rcode\030\002 \001(\r\022\020\n\010tra"
    "ns_id\030\003 \001(\t\"}\n\006BankIn\022\014\n\004mpin\030\001 \001(\t\022\016\n\006a"
    "mount\030\002 \001(\004\022\021\n\tbank_code\030\003 \001(\t\022\017\n\007channe"
    "l\030\004 \001(\t\0221\n\004kvps\030\005 \003(\0132#.com.mservice.mom"
    "o.msg.keyValuePair\"\274\001\n\013M2CTransfer\022\r\n\005ag"
    "ent\030\001 \001(\t\022\014\n\004mpin\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\014"
    "\n\004name\030\004 \001(\t\022\017\n\007card_id\030\005 \001(\t\022\016\n\006amount\030"
    "\006 \001(\004\022\016\n\006notice\030\007 \001(\t\022\017\n\007channel\030\010 \001(\t\0221"
    "\n\004kvps\030\t \003(\0132#.com.mservice.momo.msg.key"
    "ValuePair\"\300\001\n\017PayOneBillOther\022\r\n\005agent\030\001"
    " \001(\t\022\014\n\004mpin\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\014\n\004nam"
    "e\030\004 \001(\t\022\017\n\007card_id\030\005 \001(\t\022\016\n\006amount\030\006 \001(\004"
    "\022\016\n\006notice\030\007 \001(\t\022\017\n\007channel\030\010 \001(\t\0221\n\004kvp"
    "s\030\t \003(\0132#.com.mservice.momo.msg.keyValue"
    "Pair\"\235\001\n\013M2MTransfer\022\r\n\005agent\030\001 \001(\t\022\014\n\004m"
    "pin\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004"
    "\022\016\n\006notice\030\005 \001(\t\022\017\n\007channel\030\006 \001(\t\0221\n\004kvp"
    "s\030\007 \003(\0132#.com.mservice.momo.msg.keyValue"
    "Pair\"\245\001\n\023TransferMoney2Place\022\r\n\005agent\030\001 "
    "\001(\t\022\014\n\004mpin\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\016\n\006amou"
    "nt\030\004 \001(\004\022\016\n\006notice\030\005 \001(\t\022\017\n\007channel\030\006 \001("
    "\t\0221\n\004kvps\030\007 \003(\0132#.com.mservice.momo.msg."
    "keyValuePair\"=\n\tChangePin\022\016\n\006number\030\001 \001("
    "\t\022\017\n\007old_pin\030\002 \001(\t\022\017\n\007new_pin\030\003 \001(\t\"B\n\016R"
    "ecoveryNewPin\022\016\n\006number\030\001 \001(\t\022\017\n\007old_pin"
    "\030\002 \001(\t\022\017\n\007new_pin\030\003 \001(\t\"\232\001\n\nPayOneBill\022\013"
    "\n\003pin\030\001 \001(\t\022\022\n\nproviderId\030\002 \001(\t\022\016\n\006billI"
    "d\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\017\n\007channel\030\005 \001(\t"
    "\022:\n\rkeyValuePairs\030\006 \003(\0132#.com.mservice.m"
    "omo.msg.keyValuePair\"S\n\rPayMultiBills\022\013\n"
    "\003pin\030\001 \001(\t\022\023\n\013providerIds\030\002 \001(\t\022\017\n\007billI"
    "ds\030\003 \001(\t\022\017\n\007amounts\030\004 \001(\t\"9\n\032ViewPayment"
    "HistoryByBillId\022\013\n\003pin\030\001 \001(\t\022\016\n\006billId\030\002"
    " \001(\t\"\240\001\n\tTopUpGame\022\014\n\004mpin\030\001 \001(\t\022\022\n\nprov"
    "iderId\030\002 \001(\t\022\016\n\006amount\030\003 \001(\004\022\024\n\014game_acc"
    "ount\030\004 \001(\t\022\017\n\007channel\030\005 \001(\t\022:\n\rkeyValueP"
    "airs\030\006 \003(\0132#.com.mservice.momo.msg.keyVa"
    "luePair\"\"\n\020CheckPhoneDetail\022\016\n\006number\030\001 "
    "\001(\t\"\205\001\n\016GetStoreAround\022\013\n\003lng\030\001 \001(\001\022\013\n\003l"
    "at\030\002 \001(\001\022\016\n\006street\030\003 \001(\t\022\014\n\004ward\030\004 \001(\t\022\020"
    "\n\010district\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022\014\n\004area\030\007"
    " \001(\t\022\r\n\005limit\030\010 \001(\r\"r\n\014QuickDeposit\022\022\n\np"
    "roviderId\030\001 \001(\t\022\020\n\010tellerId\030\002 \001(\t\022\016\n\006bil"
    "lId\030\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\013\n\003pin\030\005 \001(\t\022\017"
    "\n\007channel\030\006 \001(\t\"r\n\014QuickPayment\022\022\n\nprovi"
    "derId\030\001 \001(\t\022\020\n\010tellerId\030\002 \001(\t\022\016\n\006billId\030"
    "\003 \001(\t\022\016\n\006amount\030\004 \001(\004\022\013\n\003pin\030\005 \001(\t\022\017\n\007ch"
    "annel\030\006 \001(\t\"\232\001\n\rBankNetToMomo\022\016\n\006amount\030"
    "\001 \001(\004\022\016\n\006bankId\030\002 \001(\t\022\030\n\020card_holder_nam"
    "e\030\003 \001(\t\022\032\n\022card_holder_number\030\004 \001(\t\022\031\n\021c"
    "ard_holder_month\030\005 \001(\t\022\030\n\020card_holder_ye"
    "ar\030\006 \001(\t\"\217\001\n\020BankNetVerifyOtp\022\031\n\021merchan"
    "t_trans_id\030\001 \001(\t\022\020\n\010trans_id\030\002 \001(\t\022\016\n\006am"
    "ount\030\003 \001(\004\022\013\n\003otp\030\004 \001(\t\0221\n\004kvps\030\005 \003(\0132#."
    "com.mservice.momo.msg.keyValuePair\"\270\002\n\tB"
    "roadcast\0226\n\004type\030\001 \001(\0162(.com.mservice.mo"
    "mo.msg.Broadcast.MsgType\022\016\n\006sender\030\002 \001(\t"
    "\022\017\n\007content\030\003 \001(\t\"\321\001\n\007MsgType\022\n\n\006NOTICE\020"
    "\001\022\r\n\tADVERTISE\020\002\022\014\n\010NEW_USER\020\003\022\r\n\tMONEY_"
    "REQ\020\004\022\r\n\tKILL_PREV\020\005\022\016\n\nMONEY_RECV\020\006\022\020\n\014"
    "TRANS_OUSIDE\020\007\022\020\n\014NOTIFICATION\020\010\022\016\n\nCHEC"
    "K_PREV\020\t\022\017\n\013PREV_RETURN\020\n\022\033\n\027FORCE_UPDAT"
    "E_AGENT_INFO\020\013\022\r\n\tGET_TOKEN\020\014*\304\t\n\007MsgTyp"
    "e\022\010\n\003ERR\020\210\'\022\031\n\024GET_AGENT_INFO_REPLY\020\212\'\022\r"
    "\n\010SEND_SMS\020\213\'\022\023\n\016SEND_SMS_REPLY\020\214\'\022\r\n\010RE"
    "GISTER\020\215\'\022\023\n\016REGISTER_REPLY\020\216\'\022\013\n\006LOG_IN"
    "\020\217\'\022\021\n\014LOG_IN_REPLY\020\220\'\022\022\n\rGET_BILL_INFO\020"
    "\221\'\022\r\n\010BANK_OUT\020\223\'\022\014\n\007BANK_IN\020\224\'\022\021\n\014M2C_T"
    "RANSFER\020\225\'\022\021\n\014M2M_TRANSFER\020\226\'\022\013\n\006TOP_UP\020"
    "\227\'\022\021\n\014TOP_UP_REPLY\020\230\'\022\017\n\nCHANGE_PIN\020\231\'\022\t"
    "\n\004TEST\020\232\'\022\025\n\020RECOVERY_NEW_PIN\020\233\'\022\021\n\014PAY_"
    "ONE_BILL\020\234\'\022\024\n\017PAY_MULTI_BILLS\020\235\'\022$\n\037VIE"
    "W_PAYMENT_HISTORY_BY_BILL_ID\020\236\'\022\017\n\nTOPUP"
    "_GAME\020\237\'\022\022\n\rQUICK_DEPOSIT\020\240\'\022\022\n\rQUICK_PA"
    "YMENT\020\241\'\022\025\n\020BANK_NET_TO_MOMO\020\242\'\022\030\n\023BANK_"
    "NET_VERIFY_OTP\020\243\'\022\030\n\023BANK_NET_ADJUSTMENT"
    "\020\244\'\022\027\n\022PAY_ONE_BILL_OTHER\020\245\'\022\034\n\027TRANSFER"
    "_MONEY_TO_PLACE\020\246\'\022\027\n\022BILL_PAY_TELEPHONE"
    "\020\247\'\022\034\n\027BILL_PAY_TICKET_AIRLINE\020\250\'\022\032\n\025BIL"
    "L_PAY_TICKET_TRAIN\020\251\'\022\027\n\022BILL_PAY_INSURA"
    "NCE\020\252\'\022\026\n\021BILL_PAY_INTERNET\020\253\'\022\023\n\016BILL_P"
    "AY_OTHER\020\254\'\022\027\n\022DEPOSIT_CASH_OTHER\020\255\'\022\026\n\021"
    "BUY_MOBILITY_CARD\020\256\'\022\022\n\rBUY_GAME_CARD\020\257\'"
    "\022\016\n\tBUY_OTHER\020\260\'\022\026\n\021AGENT_INFO_MODIFY\020\261\'"
    "\022\027\n\022MUA_123_ADJUSTMENT\020\262\'\022\034\n\027REGISTER_IN"
    "ACTIVE_AGENT\020\263\'\022\026\n\021CHECK_USER_STATUS\020\264\'\022"
    "\025\n\020BANK_NET_CONFIRM\020\265\'\022\034\n\027MAP_AGENT_TO_Z"
    "ALO_GROUP\020\266\'\022\024\n\017TRA_THUONG_ZALO\020\267\'\022\023\n\016GE"
    "T_AGENT_INFO\020\270\'\022\035\n\030GET_BILL_INFO_BY_SERV"
    "ICE\020\271\'\022\017\n\nADJUSTMENT\020\272\'\022\017\n\nTOP_UP_STR\020\273\'"
    "\022\027\n\022MODIFY_AGENT_EXTRA\020\274\'\022\034\n\027MAP_AGENT_T"
    "O_VISA_GROUP\020\275\'\022\033\n\026MAP_AGENT_TO_DGD_GROU"
    "P\020\276\'\022\030\n\023M2MERCHANT_TRANSFER\020\277\'\022\024\n\017SET_AG"
    "ENT_NAMED\020\300\'", 7252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SoapProto.proto", &protobuf_RegisterTypes);
  ZaloGroup::default_instance_ = new ZaloGroup();
  keyValuePair::default_instance_ = new keyValuePair();
  commonAdjust::default_instance_ = new commonAdjust();
  BankNetConfirm::default_instance_ = new BankNetConfirm();
  RegisterInactiveAgent::default_instance_ = new RegisterInactiveAgent();
  BuyOther::default_instance_ = new BuyOther();
  BuyGameCard::default_instance_ = new BuyGameCard();
  BuyMobilityCard::default_instance_ = new BuyMobilityCard();
  AgentInfoModify::default_instance_ = new AgentInfoModify();
  DepositCashOther::default_instance_ = new DepositCashOther();
  BillPayTelephone::default_instance_ = new BillPayTelephone();
  BillPayTicketAirline::default_instance_ = new BillPayTicketAirline();
  BillPayTicketTrain::default_instance_ = new BillPayTicketTrain();
  BillPayInsurance::default_instance_ = new BillPayInsurance();
  BillPayInternet::default_instance_ = new BillPayInternet();
  BillPayOther::default_instance_ = new BillPayOther();
  Err::default_instance_ = new Err();
  SendSms::default_instance_ = new SendSms();
  SendSmsReply::default_instance_ = new SendSmsReply();
  RegStatus::default_instance_ = new RegStatus();
  GetAgentInfoReply::default_instance_ = new GetAgentInfoReply();
  Register::default_instance_ = new Register();
  LogIn::default_instance_ = new LogIn();
  GetBillInfo::default_instance_ = new GetBillInfo();
  AgentInfo::default_instance_ = new AgentInfo();
  BankOut::default_instance_ = new BankOut();
  TopUp::default_instance_ = new TopUp();
  TopUpString::default_instance_ = new TopUpString();
  TopUpReply::default_instance_ = new TopUpReply();
  BankIn::default_instance_ = new BankIn();
  M2CTransfer::default_instance_ = new M2CTransfer();
  PayOneBillOther::default_instance_ = new PayOneBillOther();
  M2MTransfer::default_instance_ = new M2MTransfer();
  TransferMoney2Place::default_instance_ = new TransferMoney2Place();
  ChangePin::default_instance_ = new ChangePin();
  RecoveryNewPin::default_instance_ = new RecoveryNewPin();
  PayOneBill::default_instance_ = new PayOneBill();
  PayMultiBills::default_instance_ = new PayMultiBills();
  ViewPaymentHistoryByBillId::default_instance_ = new ViewPaymentHistoryByBillId();
  TopUpGame::default_instance_ = new TopUpGame();
  CheckPhoneDetail::default_instance_ = new CheckPhoneDetail();
  GetStoreAround::default_instance_ = new GetStoreAround();
  QuickDeposit::default_instance_ = new QuickDeposit();
  QuickPayment::default_instance_ = new QuickPayment();
  BankNetToMomo::default_instance_ = new BankNetToMomo();
  BankNetVerifyOtp::default_instance_ = new BankNetVerifyOtp();
  Broadcast::default_instance_ = new Broadcast();
  ZaloGroup::default_instance_->InitAsDefaultInstance();
  keyValuePair::default_instance_->InitAsDefaultInstance();
  commonAdjust::default_instance_->InitAsDefaultInstance();
  BankNetConfirm::default_instance_->InitAsDefaultInstance();
  RegisterInactiveAgent::default_instance_->InitAsDefaultInstance();
  BuyOther::default_instance_->InitAsDefaultInstance();
  BuyGameCard::default_instance_->InitAsDefaultInstance();
  BuyMobilityCard::default_instance_->InitAsDefaultInstance();
  AgentInfoModify::default_instance_->InitAsDefaultInstance();
  DepositCashOther::default_instance_->InitAsDefaultInstance();
  BillPayTelephone::default_instance_->InitAsDefaultInstance();
  BillPayTicketAirline::default_instance_->InitAsDefaultInstance();
  BillPayTicketTrain::default_instance_->InitAsDefaultInstance();
  BillPayInsurance::default_instance_->InitAsDefaultInstance();
  BillPayInternet::default_instance_->InitAsDefaultInstance();
  BillPayOther::default_instance_->InitAsDefaultInstance();
  Err::default_instance_->InitAsDefaultInstance();
  SendSms::default_instance_->InitAsDefaultInstance();
  SendSmsReply::default_instance_->InitAsDefaultInstance();
  RegStatus::default_instance_->InitAsDefaultInstance();
  GetAgentInfoReply::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  LogIn::default_instance_->InitAsDefaultInstance();
  GetBillInfo::default_instance_->InitAsDefaultInstance();
  AgentInfo::default_instance_->InitAsDefaultInstance();
  BankOut::default_instance_->InitAsDefaultInstance();
  TopUp::default_instance_->InitAsDefaultInstance();
  TopUpString::default_instance_->InitAsDefaultInstance();
  TopUpReply::default_instance_->InitAsDefaultInstance();
  BankIn::default_instance_->InitAsDefaultInstance();
  M2CTransfer::default_instance_->InitAsDefaultInstance();
  PayOneBillOther::default_instance_->InitAsDefaultInstance();
  M2MTransfer::default_instance_->InitAsDefaultInstance();
  TransferMoney2Place::default_instance_->InitAsDefaultInstance();
  ChangePin::default_instance_->InitAsDefaultInstance();
  RecoveryNewPin::default_instance_->InitAsDefaultInstance();
  PayOneBill::default_instance_->InitAsDefaultInstance();
  PayMultiBills::default_instance_->InitAsDefaultInstance();
  ViewPaymentHistoryByBillId::default_instance_->InitAsDefaultInstance();
  TopUpGame::default_instance_->InitAsDefaultInstance();
  CheckPhoneDetail::default_instance_->InitAsDefaultInstance();
  GetStoreAround::default_instance_->InitAsDefaultInstance();
  QuickDeposit::default_instance_->InitAsDefaultInstance();
  QuickPayment::default_instance_->InitAsDefaultInstance();
  BankNetToMomo::default_instance_->InitAsDefaultInstance();
  BankNetVerifyOtp::default_instance_->InitAsDefaultInstance();
  Broadcast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SoapProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SoapProto_2eproto {
  StaticDescriptorInitializer_SoapProto_2eproto() {
    protobuf_AddDesc_SoapProto_2eproto();
  }
} static_descriptor_initializer_SoapProto_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 5000:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5011:
    case 5012:
    case 5013:
    case 5014:
    case 5015:
    case 5016:
    case 5017:
    case 5018:
    case 5019:
    case 5020:
    case 5021:
    case 5022:
    case 5023:
    case 5024:
    case 5025:
    case 5026:
    case 5027:
    case 5028:
    case 5029:
    case 5030:
    case 5031:
    case 5032:
    case 5033:
    case 5034:
    case 5035:
    case 5036:
    case 5037:
    case 5038:
    case 5039:
    case 5040:
    case 5041:
    case 5042:
    case 5043:
    case 5044:
    case 5045:
    case 5046:
    case 5047:
    case 5048:
    case 5049:
    case 5050:
    case 5051:
    case 5052:
    case 5053:
    case 5054:
    case 5055:
    case 5056:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ZaloGroup::kZaloGroupFieldNumber;
const int ZaloGroup::kZaloCapsetIdFieldNumber;
const int ZaloGroup::kZaloUpperLimitFieldNumber;
#endif  // !_MSC_VER

ZaloGroup::ZaloGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZaloGroup::InitAsDefaultInstance() {
}

ZaloGroup::ZaloGroup(const ZaloGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZaloGroup::SharedCtor() {
  _cached_size_ = 0;
  zalo_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zalo_capset_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zalo_upper_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZaloGroup::~ZaloGroup() {
  SharedDtor();
}

void ZaloGroup::SharedDtor() {
  if (zalo_group_ != &::google::protobuf::internal::kEmptyString) {
    delete zalo_group_;
  }
  if (zalo_capset_id_ != &::google::protobuf::internal::kEmptyString) {
    delete zalo_capset_id_;
  }
  if (zalo_upper_limit_ != &::google::protobuf::internal::kEmptyString) {
    delete zalo_upper_limit_;
  }
  if (this != default_instance_) {
  }
}

void ZaloGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZaloGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZaloGroup_descriptor_;
}

const ZaloGroup& ZaloGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

ZaloGroup* ZaloGroup::default_instance_ = NULL;

ZaloGroup* ZaloGroup::New() const {
  return new ZaloGroup;
}

void ZaloGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_zalo_group()) {
      if (zalo_group_ != &::google::protobuf::internal::kEmptyString) {
        zalo_group_->clear();
      }
    }
    if (has_zalo_capset_id()) {
      if (zalo_capset_id_ != &::google::protobuf::internal::kEmptyString) {
        zalo_capset_id_->clear();
      }
    }
    if (has_zalo_upper_limit()) {
      if (zalo_upper_limit_ != &::google::protobuf::internal::kEmptyString) {
        zalo_upper_limit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZaloGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string zalo_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zalo_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zalo_group().data(), this->zalo_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zalo_capset_id;
        break;
      }

      // optional string zalo_capset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zalo_capset_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zalo_capset_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zalo_capset_id().data(), this->zalo_capset_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zalo_upper_limit;
        break;
      }

      // optional string zalo_upper_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zalo_upper_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zalo_upper_limit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zalo_upper_limit().data(), this->zalo_upper_limit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZaloGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string zalo_group = 1;
  if (has_zalo_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zalo_group().data(), this->zalo_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->zalo_group(), output);
  }

  // optional string zalo_capset_id = 2;
  if (has_zalo_capset_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zalo_capset_id().data(), this->zalo_capset_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->zalo_capset_id(), output);
  }

  // optional string zalo_upper_limit = 3;
  if (has_zalo_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zalo_upper_limit().data(), this->zalo_upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->zalo_upper_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZaloGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string zalo_group = 1;
  if (has_zalo_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zalo_group().data(), this->zalo_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->zalo_group(), target);
  }

  // optional string zalo_capset_id = 2;
  if (has_zalo_capset_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zalo_capset_id().data(), this->zalo_capset_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zalo_capset_id(), target);
  }

  // optional string zalo_upper_limit = 3;
  if (has_zalo_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zalo_upper_limit().data(), this->zalo_upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zalo_upper_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZaloGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string zalo_group = 1;
    if (has_zalo_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zalo_group());
    }

    // optional string zalo_capset_id = 2;
    if (has_zalo_capset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zalo_capset_id());
    }

    // optional string zalo_upper_limit = 3;
    if (has_zalo_upper_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zalo_upper_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZaloGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZaloGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZaloGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZaloGroup::MergeFrom(const ZaloGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zalo_group()) {
      set_zalo_group(from.zalo_group());
    }
    if (from.has_zalo_capset_id()) {
      set_zalo_capset_id(from.zalo_capset_id());
    }
    if (from.has_zalo_upper_limit()) {
      set_zalo_upper_limit(from.zalo_upper_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZaloGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZaloGroup::CopyFrom(const ZaloGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZaloGroup::IsInitialized() const {

  return true;
}

void ZaloGroup::Swap(ZaloGroup* other) {
  if (other != this) {
    std::swap(zalo_group_, other->zalo_group_);
    std::swap(zalo_capset_id_, other->zalo_capset_id_);
    std::swap(zalo_upper_limit_, other->zalo_upper_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZaloGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZaloGroup_descriptor_;
  metadata.reflection = ZaloGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int keyValuePair::kKeyFieldNumber;
const int keyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

keyValuePair::keyValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void keyValuePair::InitAsDefaultInstance() {
}

keyValuePair::keyValuePair(const keyValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void keyValuePair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

keyValuePair::~keyValuePair() {
  SharedDtor();
}

void keyValuePair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void keyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* keyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return keyValuePair_descriptor_;
}

const keyValuePair& keyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

keyValuePair* keyValuePair::default_instance_ = NULL;

keyValuePair* keyValuePair::New() const {
  return new keyValuePair;
}

void keyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool keyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void keyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* keyValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int keyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void keyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const keyValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const keyValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void keyValuePair::MergeFrom(const keyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void keyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keyValuePair::CopyFrom(const keyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keyValuePair::IsInitialized() const {

  return true;
}

void keyValuePair::Swap(keyValuePair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata keyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = keyValuePair_descriptor_;
  metadata.reflection = keyValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int commonAdjust::kSourceFieldNumber;
const int commonAdjust::kTargetFieldNumber;
const int commonAdjust::kAmountFieldNumber;
const int commonAdjust::kWalletTypeFieldNumber;
const int commonAdjust::kDescriptionFieldNumber;
const int commonAdjust::kTimeFieldNumber;
const int commonAdjust::kPhoneNumberFieldNumber;
const int commonAdjust::kExtraMapFieldNumber;
#endif  // !_MSC_VER

commonAdjust::commonAdjust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void commonAdjust::InitAsDefaultInstance() {
}

commonAdjust::commonAdjust(const commonAdjust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void commonAdjust::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  wallettype_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

commonAdjust::~commonAdjust() {
  SharedDtor();
}

void commonAdjust::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (this != default_instance_) {
  }
}

void commonAdjust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* commonAdjust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return commonAdjust_descriptor_;
}

const commonAdjust& commonAdjust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

commonAdjust* commonAdjust::default_instance_ = NULL;

commonAdjust* commonAdjust::New() const {
  return new commonAdjust;
}

void commonAdjust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    wallettype_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
        phonenumber_->clear();
      }
    }
  }
  extra_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool commonAdjust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional string target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_walletType;
        break;
      }

      // optional uint32 walletType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_walletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wallettype_)));
          set_has_wallettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint64 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_phoneNumber;
        break;
      }

      // optional string phoneNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_map;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair extra_map = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void commonAdjust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target(), output);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional uint32 walletType = 4;
  if (has_wallettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wallettype(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }

  // optional uint64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  // optional string phoneNumber = 7;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->phonenumber(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair extra_map = 8;
  for (int i = 0; i < this->extra_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extra_map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* commonAdjust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional uint32 walletType = 4;
  if (has_wallettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wallettype(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional uint64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  // optional string phoneNumber = 7;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->phonenumber(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair extra_map = 8;
  for (int i = 0; i < this->extra_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extra_map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int commonAdjust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 walletType = 4;
    if (has_wallettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wallettype());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string phoneNumber = 7;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair extra_map = 8;
  total_size += 1 * this->extra_map_size();
  for (int i = 0; i < this->extra_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void commonAdjust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const commonAdjust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const commonAdjust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void commonAdjust::MergeFrom(const commonAdjust& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_map_.MergeFrom(from.extra_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_wallettype()) {
      set_wallettype(from.wallettype());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void commonAdjust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void commonAdjust::CopyFrom(const commonAdjust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool commonAdjust::IsInitialized() const {

  return true;
}

void commonAdjust::Swap(commonAdjust* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(target_, other->target_);
    std::swap(amount_, other->amount_);
    std::swap(wallettype_, other->wallettype_);
    std::swap(description_, other->description_);
    std::swap(time_, other->time_);
    std::swap(phonenumber_, other->phonenumber_);
    extra_map_.Swap(&other->extra_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata commonAdjust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = commonAdjust_descriptor_;
  metadata.reflection = commonAdjust_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankNetConfirm::kMerchantTransIdFieldNumber;
const int BankNetConfirm::kTransIdFieldNumber;
const int BankNetConfirm::kAdjustResultFieldNumber;
const int BankNetConfirm::kExtraMapFieldNumber;
#endif  // !_MSC_VER

BankNetConfirm::BankNetConfirm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankNetConfirm::InitAsDefaultInstance() {
}

BankNetConfirm::BankNetConfirm(const BankNetConfirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankNetConfirm::SharedCtor() {
  _cached_size_ = 0;
  merchant_trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adjustresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankNetConfirm::~BankNetConfirm() {
  SharedDtor();
}

void BankNetConfirm::SharedDtor() {
  if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete merchant_trans_id_;
  }
  if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_id_;
  }
  if (this != default_instance_) {
  }
}

void BankNetConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankNetConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankNetConfirm_descriptor_;
}

const BankNetConfirm& BankNetConfirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BankNetConfirm* BankNetConfirm::default_instance_ = NULL;

BankNetConfirm* BankNetConfirm::New() const {
  return new BankNetConfirm;
}

void BankNetConfirm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_merchant_trans_id()) {
      if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
        merchant_trans_id_->clear();
      }
    }
    if (has_trans_id()) {
      if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
        trans_id_->clear();
      }
    }
    adjustresult_ = 0u;
  }
  extra_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankNetConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string merchant_trans_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchant_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->merchant_trans_id().data(), this->merchant_trans_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trans_id;
        break;
      }

      // optional string trans_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trans_id().data(), this->trans_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adjustResult;
        break;
      }

      // optional uint32 adjustResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adjustResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjustresult_)));
          set_has_adjustresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extra_map;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair extra_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extra_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankNetConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string merchant_trans_id = 1;
  if (has_merchant_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchant_trans_id().data(), this->merchant_trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->merchant_trans_id(), output);
  }

  // optional string trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_id().data(), this->trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trans_id(), output);
  }

  // optional uint32 adjustResult = 3;
  if (has_adjustresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adjustresult(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair extra_map = 4;
  for (int i = 0; i < this->extra_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extra_map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankNetConfirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string merchant_trans_id = 1;
  if (has_merchant_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchant_trans_id().data(), this->merchant_trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->merchant_trans_id(), target);
  }

  // optional string trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_id().data(), this->trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_id(), target);
  }

  // optional uint32 adjustResult = 3;
  if (has_adjustresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adjustresult(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair extra_map = 4;
  for (int i = 0; i < this->extra_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extra_map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankNetConfirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string merchant_trans_id = 1;
    if (has_merchant_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchant_trans_id());
    }

    // optional string trans_id = 2;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_id());
    }

    // optional uint32 adjustResult = 3;
    if (has_adjustresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjustresult());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair extra_map = 4;
  total_size += 1 * this->extra_map_size();
  for (int i = 0; i < this->extra_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankNetConfirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankNetConfirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankNetConfirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankNetConfirm::MergeFrom(const BankNetConfirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_map_.MergeFrom(from.extra_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_merchant_trans_id()) {
      set_merchant_trans_id(from.merchant_trans_id());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
    if (from.has_adjustresult()) {
      set_adjustresult(from.adjustresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankNetConfirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankNetConfirm::CopyFrom(const BankNetConfirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankNetConfirm::IsInitialized() const {

  return true;
}

void BankNetConfirm::Swap(BankNetConfirm* other) {
  if (other != this) {
    std::swap(merchant_trans_id_, other->merchant_trans_id_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(adjustresult_, other->adjustresult_);
    extra_map_.Swap(&other->extra_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankNetConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankNetConfirm_descriptor_;
  metadata.reflection = BankNetConfirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterInactiveAgent::kPhoneFieldNumber;
const int RegisterInactiveAgent::kNameFieldNumber;
const int RegisterInactiveAgent::kBirthdayFieldNumber;
const int RegisterInactiveAgent::kAddressFieldNumber;
const int RegisterInactiveAgent::kPersionalIdFieldNumber;
const int RegisterInactiveAgent::kContactFieldNumber;
const int RegisterInactiveAgent::kEmailFieldNumber;
const int RegisterInactiveAgent::kChannelFieldNumber;
const int RegisterInactiveAgent::kArrCapsetFieldNumber;
const int RegisterInactiveAgent::kUpperLimitFieldNumber;
#endif  // !_MSC_VER

RegisterInactiveAgent::RegisterInactiveAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterInactiveAgent::InitAsDefaultInstance() {
}

RegisterInactiveAgent::RegisterInactiveAgent(const RegisterInactiveAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterInactiveAgent::SharedCtor() {
  _cached_size_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  persionalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arr_capset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upper_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterInactiveAgent::~RegisterInactiveAgent() {
  SharedDtor();
}

void RegisterInactiveAgent::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (persionalid_ != &::google::protobuf::internal::kEmptyString) {
    delete persionalid_;
  }
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (arr_capset_ != &::google::protobuf::internal::kEmptyString) {
    delete arr_capset_;
  }
  if (upper_limit_ != &::google::protobuf::internal::kEmptyString) {
    delete upper_limit_;
  }
  if (this != default_instance_) {
  }
}

void RegisterInactiveAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterInactiveAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterInactiveAgent_descriptor_;
}

const RegisterInactiveAgent& RegisterInactiveAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

RegisterInactiveAgent* RegisterInactiveAgent::default_instance_ = NULL;

RegisterInactiveAgent* RegisterInactiveAgent::New() const {
  return new RegisterInactiveAgent;
}

void RegisterInactiveAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_persionalid()) {
      if (persionalid_ != &::google::protobuf::internal::kEmptyString) {
        persionalid_->clear();
      }
    }
    if (has_contact()) {
      if (contact_ != &::google::protobuf::internal::kEmptyString) {
        contact_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_arr_capset()) {
      if (arr_capset_ != &::google::protobuf::internal::kEmptyString) {
        arr_capset_->clear();
      }
    }
    if (has_upper_limit()) {
      if (upper_limit_ != &::google::protobuf::internal::kEmptyString) {
        upper_limit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterInactiveAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_birthday;
        break;
      }

      // optional string birthday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_persionalId;
        break;
      }

      // optional string persionalId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persionalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persionalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persionalid().data(), this->persionalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_contact;
        break;
      }

      // optional string contact = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact().data(), this->contact().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // optional string email = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel;
        break;
      }

      // optional string channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_arr_capset;
        break;
      }

      // optional string arr_capset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arr_capset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arr_capset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arr_capset().data(), this->arr_capset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_upper_limit;
        break;
      }

      // optional string upper_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upper_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upper_limit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->upper_limit().data(), this->upper_limit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterInactiveAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string birthday = 3;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->birthday(), output);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address(), output);
  }

  // optional string persionalId = 5;
  if (has_persionalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persionalid().data(), this->persionalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->persionalid(), output);
  }

  // optional string contact = 6;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->contact(), output);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->email(), output);
  }

  // optional string channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->channel(), output);
  }

  // optional string arr_capset = 9;
  if (has_arr_capset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arr_capset().data(), this->arr_capset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->arr_capset(), output);
  }

  // optional string upper_limit = 10;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upper_limit().data(), this->upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->upper_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterInactiveAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string birthday = 3;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->birthday(), target);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // optional string persionalId = 5;
  if (has_persionalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persionalid().data(), this->persionalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->persionalid(), target);
  }

  // optional string contact = 6;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contact(), target);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // optional string channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->channel(), target);
  }

  // optional string arr_capset = 9;
  if (has_arr_capset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arr_capset().data(), this->arr_capset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->arr_capset(), target);
  }

  // optional string upper_limit = 10;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upper_limit().data(), this->upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->upper_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterInactiveAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string phone = 1;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string birthday = 3;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string persionalId = 5;
    if (has_persionalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persionalid());
    }

    // optional string contact = 6;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact());
    }

    // optional string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string channel = 8;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string arr_capset = 9;
    if (has_arr_capset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arr_capset());
    }

    // optional string upper_limit = 10;
    if (has_upper_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upper_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterInactiveAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterInactiveAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterInactiveAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterInactiveAgent::MergeFrom(const RegisterInactiveAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_persionalid()) {
      set_persionalid(from.persionalid());
    }
    if (from.has_contact()) {
      set_contact(from.contact());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arr_capset()) {
      set_arr_capset(from.arr_capset());
    }
    if (from.has_upper_limit()) {
      set_upper_limit(from.upper_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterInactiveAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterInactiveAgent::CopyFrom(const RegisterInactiveAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInactiveAgent::IsInitialized() const {

  return true;
}

void RegisterInactiveAgent::Swap(RegisterInactiveAgent* other) {
  if (other != this) {
    std::swap(phone_, other->phone_);
    std::swap(name_, other->name_);
    std::swap(birthday_, other->birthday_);
    std::swap(address_, other->address_);
    std::swap(persionalid_, other->persionalid_);
    std::swap(contact_, other->contact_);
    std::swap(email_, other->email_);
    std::swap(channel_, other->channel_);
    std::swap(arr_capset_, other->arr_capset_);
    std::swap(upper_limit_, other->upper_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterInactiveAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterInactiveAgent_descriptor_;
  metadata.reflection = RegisterInactiveAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyOther::kProviderIdFieldNumber;
const int BuyOther::kAmountFieldNumber;
const int BuyOther::kPinFieldNumber;
#endif  // !_MSC_VER

BuyOther::BuyOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyOther::InitAsDefaultInstance() {
}

BuyOther::BuyOther(const BuyOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyOther::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyOther::~BuyOther() {
  SharedDtor();
}

void BuyOther::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void BuyOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyOther_descriptor_;
}

const BuyOther& BuyOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BuyOther* BuyOther::default_instance_ = NULL;

BuyOther* BuyOther::New() const {
  return new BuyOther;
}

void BuyOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->amount(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyOther::MergeFrom(const BuyOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyOther::CopyFrom(const BuyOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyOther::IsInitialized() const {

  return true;
}

void BuyOther::Swap(BuyOther* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(amount_, other->amount_);
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyOther_descriptor_;
  metadata.reflection = BuyOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyGameCard::kProviderIdFieldNumber;
const int BuyGameCard::kAmountFieldNumber;
const int BuyGameCard::kPinFieldNumber;
#endif  // !_MSC_VER

BuyGameCard::BuyGameCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyGameCard::InitAsDefaultInstance() {
}

BuyGameCard::BuyGameCard(const BuyGameCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyGameCard::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyGameCard::~BuyGameCard() {
  SharedDtor();
}

void BuyGameCard::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void BuyGameCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyGameCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyGameCard_descriptor_;
}

const BuyGameCard& BuyGameCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BuyGameCard* BuyGameCard::default_instance_ = NULL;

BuyGameCard* BuyGameCard::New() const {
  return new BuyGameCard;
}

void BuyGameCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyGameCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyGameCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->amount(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyGameCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyGameCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyGameCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyGameCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyGameCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyGameCard::MergeFrom(const BuyGameCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyGameCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyGameCard::CopyFrom(const BuyGameCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyGameCard::IsInitialized() const {

  return true;
}

void BuyGameCard::Swap(BuyGameCard* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(amount_, other->amount_);
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyGameCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyGameCard_descriptor_;
  metadata.reflection = BuyGameCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMobilityCard::kProviderIdFieldNumber;
const int BuyMobilityCard::kAmountFieldNumber;
const int BuyMobilityCard::kPinFieldNumber;
#endif  // !_MSC_VER

BuyMobilityCard::BuyMobilityCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyMobilityCard::InitAsDefaultInstance() {
}

BuyMobilityCard::BuyMobilityCard(const BuyMobilityCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyMobilityCard::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMobilityCard::~BuyMobilityCard() {
  SharedDtor();
}

void BuyMobilityCard::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void BuyMobilityCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMobilityCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMobilityCard_descriptor_;
}

const BuyMobilityCard& BuyMobilityCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BuyMobilityCard* BuyMobilityCard::default_instance_ = NULL;

BuyMobilityCard* BuyMobilityCard::New() const {
  return new BuyMobilityCard;
}

void BuyMobilityCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMobilityCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyMobilityCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->amount(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyMobilityCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyMobilityCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMobilityCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMobilityCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMobilityCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMobilityCard::MergeFrom(const BuyMobilityCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMobilityCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMobilityCard::CopyFrom(const BuyMobilityCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMobilityCard::IsInitialized() const {

  return true;
}

void BuyMobilityCard::Swap(BuyMobilityCard* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(amount_, other->amount_);
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMobilityCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMobilityCard_descriptor_;
  metadata.reflection = BuyMobilityCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentInfoModify::kNameFieldNumber;
const int AgentInfoModify::kCardIdFieldNumber;
const int AgentInfoModify::kAddressFieldNumber;
const int AgentInfoModify::kEmailFieldNumber;
const int AgentInfoModify::kDobFieldNumber;
const int AgentInfoModify::kKvpsFieldNumber;
#endif  // !_MSC_VER

AgentInfoModify::AgentInfoModify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentInfoModify::InitAsDefaultInstance() {
}

AgentInfoModify::AgentInfoModify(const AgentInfoModify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentInfoModify::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInfoModify::~AgentInfoModify() {
  SharedDtor();
}

void AgentInfoModify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    delete card_id_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (dob_ != &::google::protobuf::internal::kEmptyString) {
    delete dob_;
  }
  if (this != default_instance_) {
  }
}

void AgentInfoModify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentInfoModify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentInfoModify_descriptor_;
}

const AgentInfoModify& AgentInfoModify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

AgentInfoModify* AgentInfoModify::default_instance_ = NULL;

AgentInfoModify* AgentInfoModify::New() const {
  return new AgentInfoModify;
}

void AgentInfoModify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_card_id()) {
      if (card_id_ != &::google::protobuf::internal::kEmptyString) {
        card_id_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_dob()) {
      if (dob_ != &::google::protobuf::internal::kEmptyString) {
        dob_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentInfoModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_id;
        break;
      }

      // optional string card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dob;
        break;
      }

      // optional string dob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dob().data(), this->dob().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentInfoModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string card_id = 2;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_id(), output);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional string dob = 5;
  if (has_dob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dob().data(), this->dob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dob(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 6;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentInfoModify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string card_id = 2;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_id(), target);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // optional string dob = 5;
  if (has_dob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dob().data(), this->dob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dob(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 6;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentInfoModify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string card_id = 2;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string dob = 5;
    if (has_dob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dob());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 6;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInfoModify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentInfoModify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentInfoModify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentInfoModify::MergeFrom(const AgentInfoModify& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_dob()) {
      set_dob(from.dob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentInfoModify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfoModify::CopyFrom(const AgentInfoModify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfoModify::IsInitialized() const {

  return true;
}

void AgentInfoModify::Swap(AgentInfoModify* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(card_id_, other->card_id_);
    std::swap(address_, other->address_);
    std::swap(email_, other->email_);
    std::swap(dob_, other->dob_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentInfoModify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentInfoModify_descriptor_;
  metadata.reflection = AgentInfoModify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepositCashOther::kProviderIdFieldNumber;
const int DepositCashOther::kCustomerAccFieldNumber;
const int DepositCashOther::kPinFieldNumber;
const int DepositCashOther::kAmountFieldNumber;
const int DepositCashOther::kChannelFieldNumber;
#endif  // !_MSC_VER

DepositCashOther::DepositCashOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepositCashOther::InitAsDefaultInstance() {
}

DepositCashOther::DepositCashOther(const DepositCashOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepositCashOther::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customeracc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepositCashOther::~DepositCashOther() {
  SharedDtor();
}

void DepositCashOther::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (customeracc_ != &::google::protobuf::internal::kEmptyString) {
    delete customeracc_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void DepositCashOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepositCashOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositCashOther_descriptor_;
}

const DepositCashOther& DepositCashOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

DepositCashOther* DepositCashOther::default_instance_ = NULL;

DepositCashOther* DepositCashOther::New() const {
  return new DepositCashOther;
}

void DepositCashOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_customeracc()) {
      if (customeracc_ != &::google::protobuf::internal::kEmptyString) {
        customeracc_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepositCashOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_customerAcc;
        break;
      }

      // optional string customerAcc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customerAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customeracc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customeracc().data(), this->customeracc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepositCashOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string customerAcc = 2;
  if (has_customeracc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customeracc().data(), this->customeracc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->customeracc(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepositCashOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string customerAcc = 2;
  if (has_customeracc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customeracc().data(), this->customeracc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->customeracc(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepositCashOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string customerAcc = 2;
    if (has_customeracc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customeracc());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepositCashOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepositCashOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepositCashOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepositCashOther::MergeFrom(const DepositCashOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_customeracc()) {
      set_customeracc(from.customeracc());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepositCashOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositCashOther::CopyFrom(const DepositCashOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositCashOther::IsInitialized() const {

  return true;
}

void DepositCashOther::Swap(DepositCashOther* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(customeracc_, other->customeracc_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepositCashOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepositCashOther_descriptor_;
  metadata.reflection = DepositCashOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillPayTelephone::kProviderIdFieldNumber;
const int BillPayTelephone::kPhoneFieldNumber;
const int BillPayTelephone::kAreaIdFieldNumber;
const int BillPayTelephone::kPinFieldNumber;
const int BillPayTelephone::kAmountFieldNumber;
const int BillPayTelephone::kChannelFieldNumber;
#endif  // !_MSC_VER

BillPayTelephone::BillPayTelephone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillPayTelephone::InitAsDefaultInstance() {
}

BillPayTelephone::BillPayTelephone(const BillPayTelephone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillPayTelephone::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillPayTelephone::~BillPayTelephone() {
  SharedDtor();
}

void BillPayTelephone::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (areaid_ != &::google::protobuf::internal::kEmptyString) {
    delete areaid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BillPayTelephone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillPayTelephone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillPayTelephone_descriptor_;
}

const BillPayTelephone& BillPayTelephone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BillPayTelephone* BillPayTelephone::default_instance_ = NULL;

BillPayTelephone* BillPayTelephone::New() const {
  return new BillPayTelephone;
}

void BillPayTelephone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_areaid()) {
      if (areaid_ != &::google::protobuf::internal::kEmptyString) {
        areaid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillPayTelephone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areaId;
        break;
      }

      // optional string areaId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areaid().data(), this->areaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pin;
        break;
      }

      // optional string pin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillPayTelephone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional string areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaid().data(), this->areaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->areaid(), output);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pin(), output);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillPayTelephone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // optional string areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaid().data(), this->areaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->areaid(), target);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pin(), target);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillPayTelephone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string areaId = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areaid());
    }

    // optional string pin = 4;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillPayTelephone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillPayTelephone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillPayTelephone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillPayTelephone::MergeFrom(const BillPayTelephone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillPayTelephone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillPayTelephone::CopyFrom(const BillPayTelephone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillPayTelephone::IsInitialized() const {

  return true;
}

void BillPayTelephone::Swap(BillPayTelephone* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(phone_, other->phone_);
    std::swap(areaid_, other->areaid_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillPayTelephone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillPayTelephone_descriptor_;
  metadata.reflection = BillPayTelephone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillPayTicketAirline::kProviderIdFieldNumber;
const int BillPayTicketAirline::kTicketIdFieldNumber;
const int BillPayTicketAirline::kPinFieldNumber;
const int BillPayTicketAirline::kAmountFieldNumber;
const int BillPayTicketAirline::kChannelFieldNumber;
#endif  // !_MSC_VER

BillPayTicketAirline::BillPayTicketAirline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillPayTicketAirline::InitAsDefaultInstance() {
}

BillPayTicketAirline::BillPayTicketAirline(const BillPayTicketAirline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillPayTicketAirline::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticketid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillPayTicketAirline::~BillPayTicketAirline() {
  SharedDtor();
}

void BillPayTicketAirline::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (ticketid_ != &::google::protobuf::internal::kEmptyString) {
    delete ticketid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BillPayTicketAirline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillPayTicketAirline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillPayTicketAirline_descriptor_;
}

const BillPayTicketAirline& BillPayTicketAirline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BillPayTicketAirline* BillPayTicketAirline::default_instance_ = NULL;

BillPayTicketAirline* BillPayTicketAirline::New() const {
  return new BillPayTicketAirline;
}

void BillPayTicketAirline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_ticketid()) {
      if (ticketid_ != &::google::protobuf::internal::kEmptyString) {
        ticketid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillPayTicketAirline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ticketId;
        break;
      }

      // optional string ticketId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticketId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ticketid().data(), this->ticketid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillPayTicketAirline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string ticketId = 2;
  if (has_ticketid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ticketid(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillPayTicketAirline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string ticketId = 2;
  if (has_ticketid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticketid(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillPayTicketAirline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string ticketId = 2;
    if (has_ticketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticketid());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillPayTicketAirline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillPayTicketAirline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillPayTicketAirline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillPayTicketAirline::MergeFrom(const BillPayTicketAirline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_ticketid()) {
      set_ticketid(from.ticketid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillPayTicketAirline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillPayTicketAirline::CopyFrom(const BillPayTicketAirline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillPayTicketAirline::IsInitialized() const {

  return true;
}

void BillPayTicketAirline::Swap(BillPayTicketAirline* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(ticketid_, other->ticketid_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillPayTicketAirline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillPayTicketAirline_descriptor_;
  metadata.reflection = BillPayTicketAirline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillPayTicketTrain::kPlaceIdFieldNumber;
const int BillPayTicketTrain::kTicketIdFieldNumber;
const int BillPayTicketTrain::kPinFieldNumber;
const int BillPayTicketTrain::kAmountFieldNumber;
const int BillPayTicketTrain::kProviderIdFieldNumber;
const int BillPayTicketTrain::kChannelFieldNumber;
#endif  // !_MSC_VER

BillPayTicketTrain::BillPayTicketTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillPayTicketTrain::InitAsDefaultInstance() {
}

BillPayTicketTrain::BillPayTicketTrain(const BillPayTicketTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillPayTicketTrain::SharedCtor() {
  _cached_size_ = 0;
  placeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticketid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillPayTicketTrain::~BillPayTicketTrain() {
  SharedDtor();
}

void BillPayTicketTrain::SharedDtor() {
  if (placeid_ != &::google::protobuf::internal::kEmptyString) {
    delete placeid_;
  }
  if (ticketid_ != &::google::protobuf::internal::kEmptyString) {
    delete ticketid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BillPayTicketTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillPayTicketTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillPayTicketTrain_descriptor_;
}

const BillPayTicketTrain& BillPayTicketTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BillPayTicketTrain* BillPayTicketTrain::default_instance_ = NULL;

BillPayTicketTrain* BillPayTicketTrain::New() const {
  return new BillPayTicketTrain;
}

void BillPayTicketTrain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_placeid()) {
      if (placeid_ != &::google::protobuf::internal::kEmptyString) {
        placeid_->clear();
      }
    }
    if (has_ticketid()) {
      if (ticketid_ != &::google::protobuf::internal::kEmptyString) {
        ticketid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillPayTicketTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string placeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placeid().data(), this->placeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ticketId;
        break;
      }

      // optional string ticketId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticketId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ticketid().data(), this->ticketid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_providerId;
        break;
      }

      // optional string providerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillPayTicketTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string placeId = 1;
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeid().data(), this->placeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->placeid(), output);
  }

  // optional string ticketId = 2;
  if (has_ticketid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ticketid(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string providerId = 5;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->providerid(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillPayTicketTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string placeId = 1;
  if (has_placeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeid().data(), this->placeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->placeid(), target);
  }

  // optional string ticketId = 2;
  if (has_ticketid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticketid(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string providerId = 5;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->providerid(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillPayTicketTrain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string placeId = 1;
    if (has_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placeid());
    }

    // optional string ticketId = 2;
    if (has_ticketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticketid());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string providerId = 5;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillPayTicketTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillPayTicketTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillPayTicketTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillPayTicketTrain::MergeFrom(const BillPayTicketTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placeid()) {
      set_placeid(from.placeid());
    }
    if (from.has_ticketid()) {
      set_ticketid(from.ticketid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillPayTicketTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillPayTicketTrain::CopyFrom(const BillPayTicketTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillPayTicketTrain::IsInitialized() const {

  return true;
}

void BillPayTicketTrain::Swap(BillPayTicketTrain* other) {
  if (other != this) {
    std::swap(placeid_, other->placeid_);
    std::swap(ticketid_, other->ticketid_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(providerid_, other->providerid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillPayTicketTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillPayTicketTrain_descriptor_;
  metadata.reflection = BillPayTicketTrain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillPayInsurance::kProviderIdFieldNumber;
const int BillPayInsurance::kInsuranceAccFieldNumber;
const int BillPayInsurance::kPinFieldNumber;
const int BillPayInsurance::kAmountFieldNumber;
const int BillPayInsurance::kChannelFieldNumber;
#endif  // !_MSC_VER

BillPayInsurance::BillPayInsurance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillPayInsurance::InitAsDefaultInstance() {
}

BillPayInsurance::BillPayInsurance(const BillPayInsurance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillPayInsurance::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  insuranceacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillPayInsurance::~BillPayInsurance() {
  SharedDtor();
}

void BillPayInsurance::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (insuranceacc_ != &::google::protobuf::internal::kEmptyString) {
    delete insuranceacc_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BillPayInsurance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillPayInsurance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillPayInsurance_descriptor_;
}

const BillPayInsurance& BillPayInsurance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BillPayInsurance* BillPayInsurance::default_instance_ = NULL;

BillPayInsurance* BillPayInsurance::New() const {
  return new BillPayInsurance;
}

void BillPayInsurance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_insuranceacc()) {
      if (insuranceacc_ != &::google::protobuf::internal::kEmptyString) {
        insuranceacc_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillPayInsurance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_insuranceAcc;
        break;
      }

      // optional string insuranceAcc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_insuranceAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insuranceacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->insuranceacc().data(), this->insuranceacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillPayInsurance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string insuranceAcc = 2;
  if (has_insuranceacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insuranceacc().data(), this->insuranceacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->insuranceacc(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillPayInsurance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string insuranceAcc = 2;
  if (has_insuranceacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insuranceacc().data(), this->insuranceacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->insuranceacc(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillPayInsurance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string insuranceAcc = 2;
    if (has_insuranceacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insuranceacc());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillPayInsurance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillPayInsurance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillPayInsurance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillPayInsurance::MergeFrom(const BillPayInsurance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_insuranceacc()) {
      set_insuranceacc(from.insuranceacc());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillPayInsurance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillPayInsurance::CopyFrom(const BillPayInsurance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillPayInsurance::IsInitialized() const {

  return true;
}

void BillPayInsurance::Swap(BillPayInsurance* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(insuranceacc_, other->insuranceacc_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillPayInsurance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillPayInsurance_descriptor_;
  metadata.reflection = BillPayInsurance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillPayInternet::kProviderIdFieldNumber;
const int BillPayInternet::kCustomerAccFieldNumber;
const int BillPayInternet::kAreaIdFieldNumber;
const int BillPayInternet::kPinFieldNumber;
const int BillPayInternet::kAmountFieldNumber;
const int BillPayInternet::kChannelFieldNumber;
#endif  // !_MSC_VER

BillPayInternet::BillPayInternet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillPayInternet::InitAsDefaultInstance() {
}

BillPayInternet::BillPayInternet(const BillPayInternet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillPayInternet::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customeracc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillPayInternet::~BillPayInternet() {
  SharedDtor();
}

void BillPayInternet::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (customeracc_ != &::google::protobuf::internal::kEmptyString) {
    delete customeracc_;
  }
  if (areaid_ != &::google::protobuf::internal::kEmptyString) {
    delete areaid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BillPayInternet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillPayInternet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillPayInternet_descriptor_;
}

const BillPayInternet& BillPayInternet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BillPayInternet* BillPayInternet::default_instance_ = NULL;

BillPayInternet* BillPayInternet::New() const {
  return new BillPayInternet;
}

void BillPayInternet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_customeracc()) {
      if (customeracc_ != &::google::protobuf::internal::kEmptyString) {
        customeracc_->clear();
      }
    }
    if (has_areaid()) {
      if (areaid_ != &::google::protobuf::internal::kEmptyString) {
        areaid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillPayInternet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_customerAcc;
        break;
      }

      // optional string customerAcc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customerAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customeracc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customeracc().data(), this->customeracc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areaId;
        break;
      }

      // optional string areaId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areaid().data(), this->areaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pin;
        break;
      }

      // optional string pin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillPayInternet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string customerAcc = 2;
  if (has_customeracc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customeracc().data(), this->customeracc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->customeracc(), output);
  }

  // optional string areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaid().data(), this->areaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->areaid(), output);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pin(), output);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillPayInternet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string customerAcc = 2;
  if (has_customeracc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customeracc().data(), this->customeracc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->customeracc(), target);
  }

  // optional string areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaid().data(), this->areaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->areaid(), target);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pin(), target);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillPayInternet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string customerAcc = 2;
    if (has_customeracc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customeracc());
    }

    // optional string areaId = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areaid());
    }

    // optional string pin = 4;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillPayInternet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillPayInternet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillPayInternet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillPayInternet::MergeFrom(const BillPayInternet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_customeracc()) {
      set_customeracc(from.customeracc());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillPayInternet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillPayInternet::CopyFrom(const BillPayInternet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillPayInternet::IsInitialized() const {

  return true;
}

void BillPayInternet::Swap(BillPayInternet* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(customeracc_, other->customeracc_);
    std::swap(areaid_, other->areaid_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillPayInternet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillPayInternet_descriptor_;
  metadata.reflection = BillPayInternet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillPayOther::kProviderIdFieldNumber;
const int BillPayOther::kBillerIdFieldNumber;
const int BillPayOther::kAreaIdFieldNumber;
const int BillPayOther::kPinFieldNumber;
const int BillPayOther::kAmountFieldNumber;
const int BillPayOther::kChannelFieldNumber;
#endif  // !_MSC_VER

BillPayOther::BillPayOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillPayOther::InitAsDefaultInstance() {
}

BillPayOther::BillPayOther(const BillPayOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillPayOther::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillPayOther::~BillPayOther() {
  SharedDtor();
}

void BillPayOther::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billerid_ != &::google::protobuf::internal::kEmptyString) {
    delete billerid_;
  }
  if (areaid_ != &::google::protobuf::internal::kEmptyString) {
    delete areaid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BillPayOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillPayOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillPayOther_descriptor_;
}

const BillPayOther& BillPayOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BillPayOther* BillPayOther::default_instance_ = NULL;

BillPayOther* BillPayOther::New() const {
  return new BillPayOther;
}

void BillPayOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billerid()) {
      if (billerid_ != &::google::protobuf::internal::kEmptyString) {
        billerid_->clear();
      }
    }
    if (has_areaid()) {
      if (areaid_ != &::google::protobuf::internal::kEmptyString) {
        areaid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillPayOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_billerId;
        break;
      }

      // optional string billerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billerid().data(), this->billerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areaId;
        break;
      }

      // optional string areaId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areaid().data(), this->areaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pin;
        break;
      }

      // optional string pin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillPayOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string billerId = 2;
  if (has_billerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billerid().data(), this->billerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->billerid(), output);
  }

  // optional string areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaid().data(), this->areaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->areaid(), output);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pin(), output);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillPayOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string billerId = 2;
  if (has_billerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billerid().data(), this->billerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->billerid(), target);
  }

  // optional string areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaid().data(), this->areaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->areaid(), target);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pin(), target);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillPayOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string billerId = 2;
    if (has_billerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billerid());
    }

    // optional string areaId = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areaid());
    }

    // optional string pin = 4;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillPayOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillPayOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillPayOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillPayOther::MergeFrom(const BillPayOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billerid()) {
      set_billerid(from.billerid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillPayOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillPayOther::CopyFrom(const BillPayOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillPayOther::IsInitialized() const {

  return true;
}

void BillPayOther::Swap(BillPayOther* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(billerid_, other->billerid_);
    std::swap(areaid_, other->areaid_);
    std::swap(pin_, other->pin_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillPayOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillPayOther_descriptor_;
  metadata.reflection = BillPayOther_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Err_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Err_ResultCode_descriptor_;
}
bool Err_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Err_ResultCode Err::MSG_FORMAT_NOT_CORRECT;
const Err_ResultCode Err::NUMBER_NOT_VALID;
const Err_ResultCode Err::ResultCode_MIN;
const Err_ResultCode Err::ResultCode_MAX;
const int Err::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Err::kRcodeFieldNumber;
const int Err::kRdescFieldNumber;
#endif  // !_MSC_VER

Err::Err()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Err::InitAsDefaultInstance() {
}

Err::Err(const Err& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Err::SharedCtor() {
  _cached_size_ = 0;
  rcode_ = 0u;
  rdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Err::~Err() {
  SharedDtor();
}

void Err::SharedDtor() {
  if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete rdesc_;
  }
  if (this != default_instance_) {
  }
}

void Err::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Err::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Err_descriptor_;
}

const Err& Err::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

Err* Err::default_instance_ = NULL;

Err* Err::New() const {
  return new Err;
}

void Err::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rcode_ = 0u;
    if (has_rdesc()) {
      if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
        rdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Err::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rdesc;
        break;
      }

      // optional string rdesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rdesc().data(), this->rdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Err::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rcode = 1;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rcode(), output);
  }

  // optional string rdesc = 2;
  if (has_rdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rdesc().data(), this->rdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Err::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rcode = 1;
  if (has_rcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rcode(), target);
  }

  // optional string rdesc = 2;
  if (has_rdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rdesc().data(), this->rdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Err::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rcode = 1;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string rdesc = 2;
    if (has_rdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Err::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Err* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Err*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Err::MergeFrom(const Err& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_rdesc()) {
      set_rdesc(from.rdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Err::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Err::CopyFrom(const Err& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Err::IsInitialized() const {

  return true;
}

void Err::Swap(Err* other) {
  if (other != this) {
    std::swap(rcode_, other->rcode_);
    std::swap(rdesc_, other->rdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Err::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Err_descriptor_;
  metadata.reflection = Err_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSms::kSmsIdFieldNumber;
const int SendSms::kToNumberFieldNumber;
const int SendSms::kContentFieldNumber;
#endif  // !_MSC_VER

SendSms::SendSms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSms::InitAsDefaultInstance() {
}

SendSms::SendSms(const SendSms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSms::SharedCtor() {
  _cached_size_ = 0;
  sms_id_ = 0u;
  to_number_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSms::~SendSms() {
  SharedDtor();
}

void SendSms::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SendSms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSms_descriptor_;
}

const SendSms& SendSms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

SendSms* SendSms::default_instance_ = NULL;

SendSms* SendSms::New() const {
  return new SendSms;
}

void SendSms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sms_id_ = 0u;
    to_number_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sms_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sms_id_)));
          set_has_sms_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_number;
        break;
      }

      // optional uint32 to_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_number_)));
          set_has_to_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendSms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sms_id = 1;
  if (has_sms_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sms_id(), output);
  }

  // optional uint32 to_number = 2;
  if (has_to_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_number(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sms_id = 1;
  if (has_sms_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sms_id(), target);
  }

  // optional uint32 to_number = 2;
  if (has_to_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_number(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sms_id = 1;
    if (has_sms_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sms_id());
    }

    // optional uint32 to_number = 2;
    if (has_to_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_number());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSms::MergeFrom(const SendSms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sms_id()) {
      set_sms_id(from.sms_id());
    }
    if (from.has_to_number()) {
      set_to_number(from.to_number());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSms::CopyFrom(const SendSms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSms::IsInitialized() const {

  return true;
}

void SendSms::Swap(SendSms* other) {
  if (other != this) {
    std::swap(sms_id_, other->sms_id_);
    std::swap(to_number_, other->to_number_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSms_descriptor_;
  metadata.reflection = SendSms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSmsReply::kSmsIdFieldNumber;
const int SendSmsReply::kRcodeFieldNumber;
const int SendSmsReply::kRdescFieldNumber;
#endif  // !_MSC_VER

SendSmsReply::SendSmsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSmsReply::InitAsDefaultInstance() {
}

SendSmsReply::SendSmsReply(const SendSmsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSmsReply::SharedCtor() {
  _cached_size_ = 0;
  sms_id_ = 0u;
  rcode_ = 0u;
  rdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSmsReply::~SendSmsReply() {
  SharedDtor();
}

void SendSmsReply::SharedDtor() {
  if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete rdesc_;
  }
  if (this != default_instance_) {
  }
}

void SendSmsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSmsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSmsReply_descriptor_;
}

const SendSmsReply& SendSmsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

SendSmsReply* SendSmsReply::default_instance_ = NULL;

SendSmsReply* SendSmsReply::New() const {
  return new SendSmsReply;
}

void SendSmsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sms_id_ = 0u;
    rcode_ = 0u;
    if (has_rdesc()) {
      if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
        rdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSmsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sms_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sms_id_)));
          set_has_sms_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rdesc;
        break;
      }

      // optional string rdesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rdesc().data(), this->rdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendSmsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sms_id = 1;
  if (has_sms_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sms_id(), output);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rcode(), output);
  }

  // optional string rdesc = 3;
  if (has_rdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rdesc().data(), this->rdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSmsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sms_id = 1;
  if (has_sms_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sms_id(), target);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rcode(), target);
  }

  // optional string rdesc = 3;
  if (has_rdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rdesc().data(), this->rdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSmsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sms_id = 1;
    if (has_sms_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sms_id());
    }

    // optional uint32 rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string rdesc = 3;
    if (has_rdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSmsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSmsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSmsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSmsReply::MergeFrom(const SendSmsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sms_id()) {
      set_sms_id(from.sms_id());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_rdesc()) {
      set_rdesc(from.rdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSmsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSmsReply::CopyFrom(const SendSmsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSmsReply::IsInitialized() const {

  return true;
}

void SendSmsReply::Swap(SendSmsReply* other) {
  if (other != this) {
    std::swap(sms_id_, other->sms_id_);
    std::swap(rcode_, other->rcode_);
    std::swap(rdesc_, other->rdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSmsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSmsReply_descriptor_;
  metadata.reflection = SendSmsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegStatus::kIsSetupFieldNumber;
const int RegStatus::kIsRegedFieldNumber;
const int RegStatus::kIsActiveFieldNumber;
const int RegStatus::kIsNamedFieldNumber;
const int RegStatus::kIsFrozenFieldNumber;
const int RegStatus::kIsSuppendFieldNumber;
const int RegStatus::kIsStoppedFieldNumber;
#endif  // !_MSC_VER

RegStatus::RegStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegStatus::InitAsDefaultInstance() {
}

RegStatus::RegStatus(const RegStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegStatus::SharedCtor() {
  _cached_size_ = 0;
  is_setup_ = false;
  is_reged_ = false;
  is_active_ = false;
  is_named_ = false;
  is_frozen_ = false;
  is_suppend_ = false;
  is_stopped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegStatus::~RegStatus() {
  SharedDtor();
}

void RegStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegStatus_descriptor_;
}

const RegStatus& RegStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

RegStatus* RegStatus::default_instance_ = NULL;

RegStatus* RegStatus::New() const {
  return new RegStatus;
}

void RegStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_setup_ = false;
    is_reged_ = false;
    is_active_ = false;
    is_named_ = false;
    is_frozen_ = false;
    is_suppend_ = false;
    is_stopped_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_setup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_setup_)));
          set_has_is_setup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_reged;
        break;
      }

      // optional bool is_reged = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reged_)));
          set_has_is_reged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_named;
        break;
      }

      // optional bool is_named = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_named:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_named_)));
          set_has_is_named();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_frozen;
        break;
      }

      // optional bool is_frozen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_frozen_)));
          set_has_is_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_suppend;
        break;
      }

      // optional bool is_suppend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_suppend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suppend_)));
          set_has_is_suppend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_stopped;
        break;
      }

      // optional bool is_stopped = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_stopped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stopped_)));
          set_has_is_stopped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_setup = 1;
  if (has_is_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_setup(), output);
  }

  // optional bool is_reged = 2;
  if (has_is_reged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reged(), output);
  }

  // optional bool is_active = 3;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  // optional bool is_named = 4;
  if (has_is_named()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_named(), output);
  }

  // optional bool is_frozen = 5;
  if (has_is_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_frozen(), output);
  }

  // optional bool is_suppend = 6;
  if (has_is_suppend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_suppend(), output);
  }

  // optional bool is_stopped = 7;
  if (has_is_stopped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_stopped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_setup = 1;
  if (has_is_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_setup(), target);
  }

  // optional bool is_reged = 2;
  if (has_is_reged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reged(), target);
  }

  // optional bool is_active = 3;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_active(), target);
  }

  // optional bool is_named = 4;
  if (has_is_named()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_named(), target);
  }

  // optional bool is_frozen = 5;
  if (has_is_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_frozen(), target);
  }

  // optional bool is_suppend = 6;
  if (has_is_suppend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_suppend(), target);
  }

  // optional bool is_stopped = 7;
  if (has_is_stopped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_stopped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_setup = 1;
    if (has_is_setup()) {
      total_size += 1 + 1;
    }

    // optional bool is_reged = 2;
    if (has_is_reged()) {
      total_size += 1 + 1;
    }

    // optional bool is_active = 3;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_named = 4;
    if (has_is_named()) {
      total_size += 1 + 1;
    }

    // optional bool is_frozen = 5;
    if (has_is_frozen()) {
      total_size += 1 + 1;
    }

    // optional bool is_suppend = 6;
    if (has_is_suppend()) {
      total_size += 1 + 1;
    }

    // optional bool is_stopped = 7;
    if (has_is_stopped()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegStatus::MergeFrom(const RegStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_setup()) {
      set_is_setup(from.is_setup());
    }
    if (from.has_is_reged()) {
      set_is_reged(from.is_reged());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_is_named()) {
      set_is_named(from.is_named());
    }
    if (from.has_is_frozen()) {
      set_is_frozen(from.is_frozen());
    }
    if (from.has_is_suppend()) {
      set_is_suppend(from.is_suppend());
    }
    if (from.has_is_stopped()) {
      set_is_stopped(from.is_stopped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegStatus::CopyFrom(const RegStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegStatus::IsInitialized() const {

  return true;
}

void RegStatus::Swap(RegStatus* other) {
  if (other != this) {
    std::swap(is_setup_, other->is_setup_);
    std::swap(is_reged_, other->is_reged_);
    std::swap(is_active_, other->is_active_);
    std::swap(is_named_, other->is_named_);
    std::swap(is_frozen_, other->is_frozen_);
    std::swap(is_suppend_, other->is_suppend_);
    std::swap(is_stopped_, other->is_stopped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegStatus_descriptor_;
  metadata.reflection = RegStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetAgentInfoReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAgentInfoReply_ResultCode_descriptor_;
}
bool GetAgentInfoReply_ResultCode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 2:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetAgentInfoReply_ResultCode GetAgentInfoReply::SYSTEM_ERROR;
const GetAgentInfoReply_ResultCode GetAgentInfoReply::ALL_OK;
const GetAgentInfoReply_ResultCode GetAgentInfoReply::PHONE_NUMBER_NOT_CORRECT;
const GetAgentInfoReply_ResultCode GetAgentInfoReply::AGENT_NOT_FOUND;
const GetAgentInfoReply_ResultCode GetAgentInfoReply::ResultCode_MIN;
const GetAgentInfoReply_ResultCode GetAgentInfoReply::ResultCode_MAX;
const int GetAgentInfoReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetAgentInfoReply::kResultFieldNumber;
const int GetAgentInfoReply::kNameFieldNumber;
const int GetAgentInfoReply::kCardIdFieldNumber;
const int GetAgentInfoReply::kMomoFieldNumber;
const int GetAgentInfoReply::kMloadFieldNumber;
const int GetAgentInfoReply::kEmailFieldNumber;
const int GetAgentInfoReply::kRegStatusFieldNumber;
const int GetAgentInfoReply::kPointFieldNumber;
const int GetAgentInfoReply::kDateOfBirthFieldNumber;
const int GetAgentInfoReply::kAddressFieldNumber;
const int GetAgentInfoReply::kRcodeFieldNumber;
const int GetAgentInfoReply::kBankNameFieldNumber;
const int GetAgentInfoReply::kBankAccFieldNumber;
const int GetAgentInfoReply::kBankCodeFieldNumber;
const int GetAgentInfoReply::kAgentIdFieldNumber;
const int GetAgentInfoReply::kCreatedDateFieldNumber;
#endif  // !_MSC_VER

GetAgentInfoReply::GetAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAgentInfoReply::InitAsDefaultInstance() {
  regstatus_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(&::com::mservice::momo::msg::RegStatus::default_instance());
}

GetAgentInfoReply::GetAgentInfoReply(const GetAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  momo_ = 0;
  mload_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regstatus_ = NULL;
  point_ = GOOGLE_ULONGLONG(0);
  dateofbirth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcode_ = 0u;
  bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_id_ = GOOGLE_ULONGLONG(0);
  createddate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAgentInfoReply::~GetAgentInfoReply() {
  SharedDtor();
}

void GetAgentInfoReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    delete card_id_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (dateofbirth_ != &::google::protobuf::internal::kEmptyString) {
    delete dateofbirth_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (bank_acc_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_acc_;
  }
  if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_code_;
  }
  if (this != default_instance_) {
    delete regstatus_;
  }
}

void GetAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAgentInfoReply_descriptor_;
}

const GetAgentInfoReply& GetAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

GetAgentInfoReply* GetAgentInfoReply::default_instance_ = NULL;

GetAgentInfoReply* GetAgentInfoReply::New() const {
  return new GetAgentInfoReply;
}

void GetAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_card_id()) {
      if (card_id_ != &::google::protobuf::internal::kEmptyString) {
        card_id_->clear();
      }
    }
    momo_ = 0;
    mload_ = 0;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_regstatus()) {
      if (regstatus_ != NULL) regstatus_->::com::mservice::momo::msg::RegStatus::Clear();
    }
    point_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dateofbirth()) {
      if (dateofbirth_ != &::google::protobuf::internal::kEmptyString) {
        dateofbirth_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    rcode_ = 0u;
    if (has_bank_name()) {
      if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
        bank_name_->clear();
      }
    }
    if (has_bank_acc()) {
      if (bank_acc_ != &::google::protobuf::internal::kEmptyString) {
        bank_acc_->clear();
      }
    }
    if (has_bank_code()) {
      if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
        bank_code_->clear();
      }
    }
    agent_id_ = GOOGLE_ULONGLONG(0);
    createddate_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_id;
        break;
      }

      // optional string card_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_momo;
        break;
      }

      // optional double momo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_momo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &momo_)));
          set_has_momo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_mload;
        break;
      }

      // optional double mload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mload_)));
          set_has_mload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_regStatus;
        break;
      }

      // optional .com.mservice.momo.msg.RegStatus regStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_point;
        break;
      }

      // optional uint64 point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dateOfBirth;
        break;
      }

      // optional string dateOfBirth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dateOfBirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dateofbirth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dateofbirth().data(), this->dateofbirth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_address;
        break;
      }

      // optional string address = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bank_name;
        break;
      }

      // optional string bank_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_name().data(), this->bank_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bank_acc;
        break;
      }

      // optional string bank_acc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_acc().data(), this->bank_acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bank_code;
        break;
      }

      // optional string bank_code = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_code().data(), this->bank_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_createdDate;
        break;
      }

      // optional uint64 createdDate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createdDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createddate_)));
          set_has_createddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string card_id = 3;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_id(), output);
  }

  // optional double momo = 4;
  if (has_momo()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->momo(), output);
  }

  // optional double mload = 5;
  if (has_mload()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->mload(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->email(), output);
  }

  // optional .com.mservice.momo.msg.RegStatus regStatus = 7;
  if (has_regstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->regstatus(), output);
  }

  // optional uint64 point = 8;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->point(), output);
  }

  // optional string dateOfBirth = 9;
  if (has_dateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dateofbirth().data(), this->dateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dateofbirth(), output);
  }

  // optional string address = 10;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->address(), output);
  }

  // optional uint32 rcode = 11;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rcode(), output);
  }

  // optional string bank_name = 12;
  if (has_bank_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_name().data(), this->bank_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bank_name(), output);
  }

  // optional string bank_acc = 13;
  if (has_bank_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_acc().data(), this->bank_acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->bank_acc(), output);
  }

  // optional string bank_code = 14;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_code().data(), this->bank_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bank_code(), output);
  }

  // optional uint64 agent_id = 15;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->agent_id(), output);
  }

  // optional uint64 createdDate = 16;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->createddate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string card_id = 3;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_id(), target);
  }

  // optional double momo = 4;
  if (has_momo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->momo(), target);
  }

  // optional double mload = 5;
  if (has_mload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->mload(), target);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // optional .com.mservice.momo.msg.RegStatus regStatus = 7;
  if (has_regstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->regstatus(), target);
  }

  // optional uint64 point = 8;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->point(), target);
  }

  // optional string dateOfBirth = 9;
  if (has_dateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dateofbirth().data(), this->dateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dateofbirth(), target);
  }

  // optional string address = 10;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->address(), target);
  }

  // optional uint32 rcode = 11;
  if (has_rcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rcode(), target);
  }

  // optional string bank_name = 12;
  if (has_bank_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_name().data(), this->bank_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bank_name(), target);
  }

  // optional string bank_acc = 13;
  if (has_bank_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_acc().data(), this->bank_acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->bank_acc(), target);
  }

  // optional string bank_code = 14;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_code().data(), this->bank_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bank_code(), target);
  }

  // optional uint64 agent_id = 15;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->agent_id(), target);
  }

  // optional uint64 createdDate = 16;
  if (has_createddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->createddate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAgentInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string card_id = 3;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional double momo = 4;
    if (has_momo()) {
      total_size += 1 + 8;
    }

    // optional double mload = 5;
    if (has_mload()) {
      total_size += 1 + 8;
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional .com.mservice.momo.msg.RegStatus regStatus = 7;
    if (has_regstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regstatus());
    }

    // optional uint64 point = 8;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string dateOfBirth = 9;
    if (has_dateofbirth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dateofbirth());
    }

    // optional string address = 10;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 rcode = 11;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string bank_name = 12;
    if (has_bank_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_name());
    }

    // optional string bank_acc = 13;
    if (has_bank_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_acc());
    }

    // optional string bank_code = 14;
    if (has_bank_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_code());
    }

    // optional uint64 agent_id = 15;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

    // optional uint64 createdDate = 16;
    if (has_createddate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createddate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAgentInfoReply::MergeFrom(const GetAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_momo()) {
      set_momo(from.momo());
    }
    if (from.has_mload()) {
      set_mload(from.mload());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_regstatus()) {
      mutable_regstatus()->::com::mservice::momo::msg::RegStatus::MergeFrom(from.regstatus());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dateofbirth()) {
      set_dateofbirth(from.dateofbirth());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_bank_name()) {
      set_bank_name(from.bank_name());
    }
    if (from.has_bank_acc()) {
      set_bank_acc(from.bank_acc());
    }
    if (from.has_bank_code()) {
      set_bank_code(from.bank_code());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_createddate()) {
      set_createddate(from.createddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentInfoReply::CopyFrom(const GetAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentInfoReply::IsInitialized() const {

  return true;
}

void GetAgentInfoReply::Swap(GetAgentInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(card_id_, other->card_id_);
    std::swap(momo_, other->momo_);
    std::swap(mload_, other->mload_);
    std::swap(email_, other->email_);
    std::swap(regstatus_, other->regstatus_);
    std::swap(point_, other->point_);
    std::swap(dateofbirth_, other->dateofbirth_);
    std::swap(address_, other->address_);
    std::swap(rcode_, other->rcode_);
    std::swap(bank_name_, other->bank_name_);
    std::swap(bank_acc_, other->bank_acc_);
    std::swap(bank_code_, other->bank_code_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(createddate_, other->createddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAgentInfoReply_descriptor_;
  metadata.reflection = GetAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kNameFieldNumber;
const int Register::kIdCardFieldNumber;
const int Register::kPinFieldNumber;
const int Register::kArrGroupFieldNumber;
const int Register::kArrCapsetFieldNumber;
const int Register::kUpperLimitFieldNumber;
const int Register::kEmailFieldNumber;
const int Register::kQuestionFieldNumber;
const int Register::kAnswerFieldNumber;
const int Register::kChannelFieldNumber;
const int Register::kDateOfBirthFieldNumber;
const int Register::kAddressFieldNumber;
const int Register::kKvpsFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arr_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arr_capset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upper_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateofbirth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (id_card_ != &::google::protobuf::internal::kEmptyString) {
    delete id_card_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (arr_group_ != &::google::protobuf::internal::kEmptyString) {
    delete arr_group_;
  }
  if (arr_capset_ != &::google::protobuf::internal::kEmptyString) {
    delete arr_capset_;
  }
  if (upper_limit_ != &::google::protobuf::internal::kEmptyString) {
    delete upper_limit_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (dateofbirth_ != &::google::protobuf::internal::kEmptyString) {
    delete dateofbirth_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::kEmptyString) {
        id_card_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_arr_group()) {
      if (arr_group_ != &::google::protobuf::internal::kEmptyString) {
        arr_group_->clear();
      }
    }
    if (has_arr_capset()) {
      if (arr_capset_ != &::google::protobuf::internal::kEmptyString) {
        arr_capset_->clear();
      }
    }
    if (has_upper_limit()) {
      if (upper_limit_ != &::google::protobuf::internal::kEmptyString) {
        upper_limit_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::kEmptyString) {
        question_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::kEmptyString) {
        answer_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_dateofbirth()) {
      if (dateofbirth_ != &::google::protobuf::internal::kEmptyString) {
        dateofbirth_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional string id_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id_card().data(), this->id_card().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arr_group;
        break;
      }

      // optional string arr_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arr_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arr_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arr_group().data(), this->arr_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arr_capset;
        break;
      }

      // optional string arr_capset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arr_capset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arr_capset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arr_capset().data(), this->arr_capset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_upper_limit;
        break;
      }

      // optional string upper_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upper_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upper_limit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->upper_limit().data(), this->upper_limit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // optional string email = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_question;
        break;
      }

      // optional string question = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_answer;
        break;
      }

      // optional string answer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_channel;
        break;
      }

      // optional string channel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dateOfBirth;
        break;
      }

      // optional string dateOfBirth = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dateOfBirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dateofbirth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dateofbirth().data(), this->dateofbirth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_address;
        break;
      }

      // optional string address = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card().data(), this->id_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id_card(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }

  // optional string arr_group = 4;
  if (has_arr_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arr_group().data(), this->arr_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->arr_group(), output);
  }

  // optional string arr_capset = 5;
  if (has_arr_capset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arr_capset().data(), this->arr_capset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->arr_capset(), output);
  }

  // optional string upper_limit = 6;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upper_limit().data(), this->upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->upper_limit(), output);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->email(), output);
  }

  // optional string question = 8;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->question(), output);
  }

  // optional string answer = 9;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->answer(), output);
  }

  // optional string channel = 10;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->channel(), output);
  }

  // optional string dateOfBirth = 11;
  if (has_dateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dateofbirth().data(), this->dateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->dateofbirth(), output);
  }

  // optional string address = 12;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->address(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 13;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card().data(), this->id_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id_card(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  // optional string arr_group = 4;
  if (has_arr_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arr_group().data(), this->arr_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arr_group(), target);
  }

  // optional string arr_capset = 5;
  if (has_arr_capset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arr_capset().data(), this->arr_capset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->arr_capset(), target);
  }

  // optional string upper_limit = 6;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upper_limit().data(), this->upper_limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->upper_limit(), target);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // optional string question = 8;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->question(), target);
  }

  // optional string answer = 9;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->answer(), target);
  }

  // optional string channel = 10;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->channel(), target);
  }

  // optional string dateOfBirth = 11;
  if (has_dateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dateofbirth().data(), this->dateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dateofbirth(), target);
  }

  // optional string address = 12;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->address(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 13;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_card());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string arr_group = 4;
    if (has_arr_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arr_group());
    }

    // optional string arr_capset = 5;
    if (has_arr_capset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arr_capset());
    }

    // optional string upper_limit = 6;
    if (has_upper_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upper_limit());
    }

    // optional string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string question = 8;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string answer = 9;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // optional string channel = 10;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string dateOfBirth = 11;
    if (has_dateofbirth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dateofbirth());
    }

    // optional string address = 12;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 13;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_arr_group()) {
      set_arr_group(from.arr_group());
    }
    if (from.has_arr_capset()) {
      set_arr_capset(from.arr_capset());
    }
    if (from.has_upper_limit()) {
      set_upper_limit(from.upper_limit());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_dateofbirth()) {
      set_dateofbirth(from.dateofbirth());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {

  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_card_, other->id_card_);
    std::swap(pin_, other->pin_);
    std::swap(arr_group_, other->arr_group_);
    std::swap(arr_capset_, other->arr_capset_);
    std::swap(upper_limit_, other->upper_limit_);
    std::swap(email_, other->email_);
    std::swap(question_, other->question_);
    std::swap(answer_, other->answer_);
    std::swap(channel_, other->channel_);
    std::swap(dateofbirth_, other->dateofbirth_);
    std::swap(address_, other->address_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogIn::kNumberFieldNumber;
const int LogIn::kMpinFieldNumber;
#endif  // !_MSC_VER

LogIn::LogIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogIn::InitAsDefaultInstance() {
}

LogIn::LogIn(const LogIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogIn::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogIn::~LogIn() {
  SharedDtor();
}

void LogIn::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (this != default_instance_) {
  }
}

void LogIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogIn_descriptor_;
}

const LogIn& LogIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

LogIn* LogIn::default_instance_ = NULL;

LogIn* LogIn::New() const {
  return new LogIn;
}

void LogIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogIn::MergeFrom(const LogIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogIn::CopyFrom(const LogIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogIn::IsInitialized() const {

  return true;
}

void LogIn::Swap(LogIn* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(mpin_, other->mpin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogIn_descriptor_;
  metadata.reflection = LogIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBillInfo::kMpinFieldNumber;
const int GetBillInfo::kProviderIdFieldNumber;
const int GetBillInfo::kBillIdFieldNumber;
#endif  // !_MSC_VER

GetBillInfo::GetBillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBillInfo::InitAsDefaultInstance() {
}

GetBillInfo::GetBillInfo(const GetBillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBillInfo::SharedCtor() {
  _cached_size_ = 0;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  provider_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBillInfo::~GetBillInfo() {
  SharedDtor();
}

void GetBillInfo::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (provider_id_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_id_;
  }
  if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bill_id_;
  }
  if (this != default_instance_) {
  }
}

void GetBillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBillInfo_descriptor_;
}

const GetBillInfo& GetBillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

GetBillInfo* GetBillInfo::default_instance_ = NULL;

GetBillInfo* GetBillInfo::New() const {
  return new GetBillInfo;
}

void GetBillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_provider_id()) {
      if (provider_id_ != &::google::protobuf::internal::kEmptyString) {
        provider_id_->clear();
      }
    }
    if (has_bill_id()) {
      if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
        bill_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mpin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_provider_id;
        break;
      }

      // optional string provider_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->provider_id().data(), this->provider_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bill_id;
        break;
      }

      // optional string bill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bill_id().data(), this->bill_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mpin(), output);
  }

  // optional string provider_id = 2;
  if (has_provider_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provider_id().data(), this->provider_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->provider_id(), output);
  }

  // optional string bill_id = 3;
  if (has_bill_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bill_id().data(), this->bill_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mpin(), target);
  }

  // optional string provider_id = 2;
  if (has_provider_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provider_id().data(), this->provider_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->provider_id(), target);
  }

  // optional string bill_id = 3;
  if (has_bill_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bill_id().data(), this->bill_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mpin = 1;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string provider_id = 2;
    if (has_provider_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider_id());
    }

    // optional string bill_id = 3;
    if (has_bill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBillInfo::MergeFrom(const GetBillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_provider_id()) {
      set_provider_id(from.provider_id());
    }
    if (from.has_bill_id()) {
      set_bill_id(from.bill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBillInfo::CopyFrom(const GetBillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillInfo::IsInitialized() const {

  return true;
}

void GetBillInfo::Swap(GetBillInfo* other) {
  if (other != this) {
    std::swap(mpin_, other->mpin_);
    std::swap(provider_id_, other->provider_id_);
    std::swap(bill_id_, other->bill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBillInfo_descriptor_;
  metadata.reflection = GetBillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentInfo::kNumberFieldNumber;
#endif  // !_MSC_VER

AgentInfo::AgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentInfo::InitAsDefaultInstance() {
}

AgentInfo::AgentInfo(const AgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentInfo::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInfo::~AgentInfo() {
  SharedDtor();
}

void AgentInfo::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void AgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentInfo_descriptor_;
}

const AgentInfo& AgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

AgentInfo* AgentInfo::default_instance_ = NULL;

AgentInfo* AgentInfo::New() const {
  return new AgentInfo;
}

void AgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentInfo::MergeFrom(const AgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {

  return true;
}

void AgentInfo::Swap(AgentInfo* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentInfo_descriptor_;
  metadata.reflection = AgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankOut::kMpinFieldNumber;
const int BankOut::kAmountFieldNumber;
const int BankOut::kBankCodeFieldNumber;
const int BankOut::kChannelFieldNumber;
const int BankOut::kKvpsFieldNumber;
#endif  // !_MSC_VER

BankOut::BankOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankOut::InitAsDefaultInstance() {
}

BankOut::BankOut(const BankOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankOut::SharedCtor() {
  _cached_size_ = 0;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  bank_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankOut::~BankOut() {
  SharedDtor();
}

void BankOut::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_code_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BankOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankOut_descriptor_;
}

const BankOut& BankOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BankOut* BankOut::default_instance_ = NULL;

BankOut* BankOut::New() const {
  return new BankOut;
}

void BankOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_bank_code()) {
      if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
        bank_code_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mpin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bank_code;
        break;
      }

      // optional string bank_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_code().data(), this->bank_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // optional string channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mpin(), output);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional string bank_code = 3;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_code().data(), this->bank_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bank_code(), output);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mpin(), target);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional string bank_code = 3;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_code().data(), this->bank_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bank_code(), target);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mpin = 1;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string bank_code = 3;
    if (has_bank_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_code());
    }

    // optional string channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankOut::MergeFrom(const BankOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bank_code()) {
      set_bank_code(from.bank_code());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankOut::CopyFrom(const BankOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankOut::IsInitialized() const {

  return true;
}

void BankOut::Swap(BankOut* other) {
  if (other != this) {
    std::swap(mpin_, other->mpin_);
    std::swap(amount_, other->amount_);
    std::swap(bank_code_, other->bank_code_);
    std::swap(channel_, other->channel_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankOut_descriptor_;
  metadata.reflection = BankOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopUp::kFromNumberFieldNumber;
const int TopUp::kMpinFieldNumber;
const int TopUp::kToNumberFieldNumber;
const int TopUp::kAmountFieldNumber;
const int TopUp::kChannelFieldNumber;
const int TopUp::kKeyValuePairsFieldNumber;
#endif  // !_MSC_VER

TopUp::TopUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopUp::InitAsDefaultInstance() {
}

TopUp::TopUp(const TopUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopUp::SharedCtor() {
  _cached_size_ = 0;
  from_number_ = 0u;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_number_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopUp::~TopUp() {
  SharedDtor();
}

void TopUp::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void TopUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopUp_descriptor_;
}

const TopUp& TopUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

TopUp* TopUp::default_instance_ = NULL;

TopUp* TopUp::New() const {
  return new TopUp;
}

void TopUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_number_ = 0u;
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    to_number_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  keyvaluepairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 from_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_number_)));
          set_has_from_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_number;
        break;
      }

      // optional uint32 to_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_number_)));
          set_has_to_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyValuePairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 from_number = 1;
  if (has_from_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_number(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  // optional uint32 to_number = 3;
  if (has_to_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_number(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keyvaluepairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 from_number = 1;
  if (has_from_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_number(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  // optional uint32 to_number = 3;
  if (has_to_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_number(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->keyvaluepairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 from_number = 1;
    if (has_from_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_number());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional uint32 to_number = 3;
    if (has_to_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_number());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  total_size += 1 * this->keyvaluepairs_size();
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaluepairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopUp::MergeFrom(const TopUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_number()) {
      set_from_number(from.from_number());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_to_number()) {
      set_to_number(from.to_number());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopUp::CopyFrom(const TopUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopUp::IsInitialized() const {

  return true;
}

void TopUp::Swap(TopUp* other) {
  if (other != this) {
    std::swap(from_number_, other->from_number_);
    std::swap(mpin_, other->mpin_);
    std::swap(to_number_, other->to_number_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    keyvaluepairs_.Swap(&other->keyvaluepairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopUp_descriptor_;
  metadata.reflection = TopUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopUpString::kFromNumberFieldNumber;
const int TopUpString::kMpinFieldNumber;
const int TopUpString::kToNumberFieldNumber;
const int TopUpString::kAmountFieldNumber;
const int TopUpString::kChannelFieldNumber;
const int TopUpString::kKeyValuePairsFieldNumber;
#endif  // !_MSC_VER

TopUpString::TopUpString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopUpString::InitAsDefaultInstance() {
}

TopUpString::TopUpString(const TopUpString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopUpString::SharedCtor() {
  _cached_size_ = 0;
  from_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopUpString::~TopUpString() {
  SharedDtor();
}

void TopUpString::SharedDtor() {
  if (from_number_ != &::google::protobuf::internal::kEmptyString) {
    delete from_number_;
  }
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (to_number_ != &::google::protobuf::internal::kEmptyString) {
    delete to_number_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void TopUpString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopUpString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopUpString_descriptor_;
}

const TopUpString& TopUpString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

TopUpString* TopUpString::default_instance_ = NULL;

TopUpString* TopUpString::New() const {
  return new TopUpString;
}

void TopUpString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_number()) {
      if (from_number_ != &::google::protobuf::internal::kEmptyString) {
        from_number_->clear();
      }
    }
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_to_number()) {
      if (to_number_ != &::google::protobuf::internal::kEmptyString) {
        to_number_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  keyvaluepairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopUpString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_number().data(), this->from_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_number;
        break;
      }

      // optional string to_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_number().data(), this->to_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyValuePairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopUpString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string from_number = 1;
  if (has_from_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_number().data(), this->from_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_number(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  // optional string to_number = 3;
  if (has_to_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_number().data(), this->to_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to_number(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keyvaluepairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopUpString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string from_number = 1;
  if (has_from_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_number().data(), this->from_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_number(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  // optional string to_number = 3;
  if (has_to_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_number().data(), this->to_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_number(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->keyvaluepairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopUpString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from_number = 1;
    if (has_from_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_number());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string to_number = 3;
    if (has_to_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_number());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  total_size += 1 * this->keyvaluepairs_size();
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaluepairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopUpString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopUpString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopUpString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopUpString::MergeFrom(const TopUpString& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_number()) {
      set_from_number(from.from_number());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_to_number()) {
      set_to_number(from.to_number());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopUpString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopUpString::CopyFrom(const TopUpString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopUpString::IsInitialized() const {

  return true;
}

void TopUpString::Swap(TopUpString* other) {
  if (other != this) {
    std::swap(from_number_, other->from_number_);
    std::swap(mpin_, other->mpin_);
    std::swap(to_number_, other->to_number_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    keyvaluepairs_.Swap(&other->keyvaluepairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopUpString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopUpString_descriptor_;
  metadata.reflection = TopUpString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopUpReply::kResultFieldNumber;
const int TopUpReply::kRcodeFieldNumber;
const int TopUpReply::kTransIdFieldNumber;
#endif  // !_MSC_VER

TopUpReply::TopUpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopUpReply::InitAsDefaultInstance() {
}

TopUpReply::TopUpReply(const TopUpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopUpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  rcode_ = 0u;
  trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopUpReply::~TopUpReply() {
  SharedDtor();
}

void TopUpReply::SharedDtor() {
  if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_id_;
  }
  if (this != default_instance_) {
  }
}

void TopUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopUpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopUpReply_descriptor_;
}

const TopUpReply& TopUpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

TopUpReply* TopUpReply::default_instance_ = NULL;

TopUpReply* TopUpReply::New() const {
  return new TopUpReply;
}

void TopUpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    rcode_ = 0u;
    if (has_trans_id()) {
      if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
        trans_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trans_id;
        break;
      }

      // optional string trans_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trans_id().data(), this->trans_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rcode(), output);
  }

  // optional string trans_id = 3;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_id().data(), this->trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->trans_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopUpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rcode(), target);
  }

  // optional string trans_id = 3;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_id().data(), this->trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trans_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopUpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string trans_id = 3;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopUpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopUpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopUpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopUpReply::MergeFrom(const TopUpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopUpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopUpReply::CopyFrom(const TopUpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopUpReply::IsInitialized() const {

  return true;
}

void TopUpReply::Swap(TopUpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rcode_, other->rcode_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopUpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopUpReply_descriptor_;
  metadata.reflection = TopUpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankIn::kMpinFieldNumber;
const int BankIn::kAmountFieldNumber;
const int BankIn::kBankCodeFieldNumber;
const int BankIn::kChannelFieldNumber;
const int BankIn::kKvpsFieldNumber;
#endif  // !_MSC_VER

BankIn::BankIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankIn::InitAsDefaultInstance() {
}

BankIn::BankIn(const BankIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankIn::SharedCtor() {
  _cached_size_ = 0;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  bank_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankIn::~BankIn() {
  SharedDtor();
}

void BankIn::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_code_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void BankIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankIn_descriptor_;
}

const BankIn& BankIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BankIn* BankIn::default_instance_ = NULL;

BankIn* BankIn::New() const {
  return new BankIn;
}

void BankIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_bank_code()) {
      if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
        bank_code_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mpin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bank_code;
        break;
      }

      // optional string bank_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_code().data(), this->bank_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // optional string channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mpin(), output);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional string bank_code = 3;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_code().data(), this->bank_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bank_code(), output);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mpin(), target);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional string bank_code = 3;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_code().data(), this->bank_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bank_code(), target);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mpin = 1;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string bank_code = 3;
    if (has_bank_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_code());
    }

    // optional string channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankIn::MergeFrom(const BankIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bank_code()) {
      set_bank_code(from.bank_code());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankIn::CopyFrom(const BankIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankIn::IsInitialized() const {

  return true;
}

void BankIn::Swap(BankIn* other) {
  if (other != this) {
    std::swap(mpin_, other->mpin_);
    std::swap(amount_, other->amount_);
    std::swap(bank_code_, other->bank_code_);
    std::swap(channel_, other->channel_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankIn_descriptor_;
  metadata.reflection = BankIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M2CTransfer::kAgentFieldNumber;
const int M2CTransfer::kMpinFieldNumber;
const int M2CTransfer::kPhoneFieldNumber;
const int M2CTransfer::kNameFieldNumber;
const int M2CTransfer::kCardIdFieldNumber;
const int M2CTransfer::kAmountFieldNumber;
const int M2CTransfer::kNoticeFieldNumber;
const int M2CTransfer::kChannelFieldNumber;
const int M2CTransfer::kKvpsFieldNumber;
#endif  // !_MSC_VER

M2CTransfer::M2CTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M2CTransfer::InitAsDefaultInstance() {
}

M2CTransfer::M2CTransfer(const M2CTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M2CTransfer::SharedCtor() {
  _cached_size_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M2CTransfer::~M2CTransfer() {
  SharedDtor();
}

void M2CTransfer::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    delete card_id_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void M2CTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M2CTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M2CTransfer_descriptor_;
}

const M2CTransfer& M2CTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

M2CTransfer* M2CTransfer::default_instance_ = NULL;

M2CTransfer* M2CTransfer::New() const {
  return new M2CTransfer;
}

void M2CTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_card_id()) {
      if (card_id_ != &::google::protobuf::internal::kEmptyString) {
        card_id_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M2CTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card_id;
        break;
      }

      // optional string card_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notice;
        break;
      }

      // optional string notice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel;
        break;
      }

      // optional string channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M2CTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agent(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string card_id = 5;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->card_id(), output);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->amount(), output);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->notice(), output);
  }

  // optional string channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M2CTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agent(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string card_id = 5;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_id(), target);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->amount(), target);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notice(), target);
  }

  // optional string channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M2CTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string card_id = 5;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional uint64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string notice = 7;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional string channel = 8;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M2CTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M2CTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M2CTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M2CTransfer::MergeFrom(const M2CTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M2CTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M2CTransfer::CopyFrom(const M2CTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M2CTransfer::IsInitialized() const {

  return true;
}

void M2CTransfer::Swap(M2CTransfer* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(mpin_, other->mpin_);
    std::swap(phone_, other->phone_);
    std::swap(name_, other->name_);
    std::swap(card_id_, other->card_id_);
    std::swap(amount_, other->amount_);
    std::swap(notice_, other->notice_);
    std::swap(channel_, other->channel_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M2CTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M2CTransfer_descriptor_;
  metadata.reflection = M2CTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOneBillOther::kAgentFieldNumber;
const int PayOneBillOther::kMpinFieldNumber;
const int PayOneBillOther::kPhoneFieldNumber;
const int PayOneBillOther::kNameFieldNumber;
const int PayOneBillOther::kCardIdFieldNumber;
const int PayOneBillOther::kAmountFieldNumber;
const int PayOneBillOther::kNoticeFieldNumber;
const int PayOneBillOther::kChannelFieldNumber;
const int PayOneBillOther::kKvpsFieldNumber;
#endif  // !_MSC_VER

PayOneBillOther::PayOneBillOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayOneBillOther::InitAsDefaultInstance() {
}

PayOneBillOther::PayOneBillOther(const PayOneBillOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayOneBillOther::SharedCtor() {
  _cached_size_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOneBillOther::~PayOneBillOther() {
  SharedDtor();
}

void PayOneBillOther::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    delete card_id_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void PayOneBillOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOneBillOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOneBillOther_descriptor_;
}

const PayOneBillOther& PayOneBillOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

PayOneBillOther* PayOneBillOther::default_instance_ = NULL;

PayOneBillOther* PayOneBillOther::New() const {
  return new PayOneBillOther;
}

void PayOneBillOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_card_id()) {
      if (card_id_ != &::google::protobuf::internal::kEmptyString) {
        card_id_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOneBillOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card_id;
        break;
      }

      // optional string card_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notice;
        break;
      }

      // optional string notice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel;
        break;
      }

      // optional string channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayOneBillOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agent(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string card_id = 5;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->card_id(), output);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->amount(), output);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->notice(), output);
  }

  // optional string channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayOneBillOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agent(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string card_id = 5;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_id(), target);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->amount(), target);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notice(), target);
  }

  // optional string channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayOneBillOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string card_id = 5;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional uint64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string notice = 7;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional string channel = 8;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 9;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOneBillOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOneBillOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOneBillOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOneBillOther::MergeFrom(const PayOneBillOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOneBillOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOneBillOther::CopyFrom(const PayOneBillOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOneBillOther::IsInitialized() const {

  return true;
}

void PayOneBillOther::Swap(PayOneBillOther* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(mpin_, other->mpin_);
    std::swap(phone_, other->phone_);
    std::swap(name_, other->name_);
    std::swap(card_id_, other->card_id_);
    std::swap(amount_, other->amount_);
    std::swap(notice_, other->notice_);
    std::swap(channel_, other->channel_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOneBillOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOneBillOther_descriptor_;
  metadata.reflection = PayOneBillOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M2MTransfer::kAgentFieldNumber;
const int M2MTransfer::kMpinFieldNumber;
const int M2MTransfer::kPhoneFieldNumber;
const int M2MTransfer::kAmountFieldNumber;
const int M2MTransfer::kNoticeFieldNumber;
const int M2MTransfer::kChannelFieldNumber;
const int M2MTransfer::kKvpsFieldNumber;
#endif  // !_MSC_VER

M2MTransfer::M2MTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M2MTransfer::InitAsDefaultInstance() {
}

M2MTransfer::M2MTransfer(const M2MTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M2MTransfer::SharedCtor() {
  _cached_size_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M2MTransfer::~M2MTransfer() {
  SharedDtor();
}

void M2MTransfer::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void M2MTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M2MTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M2MTransfer_descriptor_;
}

const M2MTransfer& M2MTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

M2MTransfer* M2MTransfer::default_instance_ = NULL;

M2MTransfer* M2MTransfer::New() const {
  return new M2MTransfer;
}

void M2MTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M2MTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional string notice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M2MTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agent(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->notice(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M2MTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agent(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notice(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M2MTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M2MTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M2MTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M2MTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M2MTransfer::MergeFrom(const M2MTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M2MTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M2MTransfer::CopyFrom(const M2MTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M2MTransfer::IsInitialized() const {

  return true;
}

void M2MTransfer::Swap(M2MTransfer* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(mpin_, other->mpin_);
    std::swap(phone_, other->phone_);
    std::swap(amount_, other->amount_);
    std::swap(notice_, other->notice_);
    std::swap(channel_, other->channel_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M2MTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M2MTransfer_descriptor_;
  metadata.reflection = M2MTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferMoney2Place::kAgentFieldNumber;
const int TransferMoney2Place::kMpinFieldNumber;
const int TransferMoney2Place::kPhoneFieldNumber;
const int TransferMoney2Place::kAmountFieldNumber;
const int TransferMoney2Place::kNoticeFieldNumber;
const int TransferMoney2Place::kChannelFieldNumber;
const int TransferMoney2Place::kKvpsFieldNumber;
#endif  // !_MSC_VER

TransferMoney2Place::TransferMoney2Place()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferMoney2Place::InitAsDefaultInstance() {
}

TransferMoney2Place::TransferMoney2Place(const TransferMoney2Place& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferMoney2Place::SharedCtor() {
  _cached_size_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferMoney2Place::~TransferMoney2Place() {
  SharedDtor();
}

void TransferMoney2Place::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void TransferMoney2Place::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferMoney2Place::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferMoney2Place_descriptor_;
}

const TransferMoney2Place& TransferMoney2Place::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

TransferMoney2Place* TransferMoney2Place::default_instance_ = NULL;

TransferMoney2Place* TransferMoney2Place::New() const {
  return new TransferMoney2Place;
}

void TransferMoney2Place::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferMoney2Place::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mpin;
        break;
      }

      // optional string mpin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mpin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional string notice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferMoney2Place::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agent(), output);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mpin(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->notice(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferMoney2Place::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agent(), target);
  }

  // optional string mpin = 2;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpin(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notice(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferMoney2Place::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional string mpin = 2;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 7;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferMoney2Place::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferMoney2Place* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferMoney2Place*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferMoney2Place::MergeFrom(const TransferMoney2Place& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferMoney2Place::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferMoney2Place::CopyFrom(const TransferMoney2Place& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMoney2Place::IsInitialized() const {

  return true;
}

void TransferMoney2Place::Swap(TransferMoney2Place* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(mpin_, other->mpin_);
    std::swap(phone_, other->phone_);
    std::swap(amount_, other->amount_);
    std::swap(notice_, other->notice_);
    std::swap(channel_, other->channel_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferMoney2Place::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferMoney2Place_descriptor_;
  metadata.reflection = TransferMoney2Place_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePin::kNumberFieldNumber;
const int ChangePin::kOldPinFieldNumber;
const int ChangePin::kNewPinFieldNumber;
#endif  // !_MSC_VER

ChangePin::ChangePin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePin::InitAsDefaultInstance() {
}

ChangePin::ChangePin(const ChangePin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePin::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePin::~ChangePin() {
  SharedDtor();
}

void ChangePin::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (old_pin_ != &::google::protobuf::internal::kEmptyString) {
    delete old_pin_;
  }
  if (new_pin_ != &::google::protobuf::internal::kEmptyString) {
    delete new_pin_;
  }
  if (this != default_instance_) {
  }
}

void ChangePin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePin_descriptor_;
}

const ChangePin& ChangePin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

ChangePin* ChangePin::default_instance_ = NULL;

ChangePin* ChangePin::New() const {
  return new ChangePin;
}

void ChangePin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_old_pin()) {
      if (old_pin_ != &::google::protobuf::internal::kEmptyString) {
        old_pin_->clear();
      }
    }
    if (has_new_pin()) {
      if (new_pin_ != &::google::protobuf::internal::kEmptyString) {
        new_pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_pin;
        break;
      }

      // optional string old_pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_pin().data(), this->old_pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_pin;
        break;
      }

      // optional string new_pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_pin().data(), this->new_pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }

  // optional string old_pin = 2;
  if (has_old_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_pin().data(), this->old_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->old_pin(), output);
  }

  // optional string new_pin = 3;
  if (has_new_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_pin().data(), this->new_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional string old_pin = 2;
  if (has_old_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_pin().data(), this->old_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_pin(), target);
  }

  // optional string new_pin = 3;
  if (has_new_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_pin().data(), this->new_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional string old_pin = 2;
    if (has_old_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_pin());
    }

    // optional string new_pin = 3;
    if (has_new_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePin::MergeFrom(const ChangePin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_old_pin()) {
      set_old_pin(from.old_pin());
    }
    if (from.has_new_pin()) {
      set_new_pin(from.new_pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePin::CopyFrom(const ChangePin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePin::IsInitialized() const {

  return true;
}

void ChangePin::Swap(ChangePin* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(old_pin_, other->old_pin_);
    std::swap(new_pin_, other->new_pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePin_descriptor_;
  metadata.reflection = ChangePin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoveryNewPin::kNumberFieldNumber;
const int RecoveryNewPin::kOldPinFieldNumber;
const int RecoveryNewPin::kNewPinFieldNumber;
#endif  // !_MSC_VER

RecoveryNewPin::RecoveryNewPin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoveryNewPin::InitAsDefaultInstance() {
}

RecoveryNewPin::RecoveryNewPin(const RecoveryNewPin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoveryNewPin::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryNewPin::~RecoveryNewPin() {
  SharedDtor();
}

void RecoveryNewPin::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (old_pin_ != &::google::protobuf::internal::kEmptyString) {
    delete old_pin_;
  }
  if (new_pin_ != &::google::protobuf::internal::kEmptyString) {
    delete new_pin_;
  }
  if (this != default_instance_) {
  }
}

void RecoveryNewPin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryNewPin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryNewPin_descriptor_;
}

const RecoveryNewPin& RecoveryNewPin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

RecoveryNewPin* RecoveryNewPin::default_instance_ = NULL;

RecoveryNewPin* RecoveryNewPin::New() const {
  return new RecoveryNewPin;
}

void RecoveryNewPin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_old_pin()) {
      if (old_pin_ != &::google::protobuf::internal::kEmptyString) {
        old_pin_->clear();
      }
    }
    if (has_new_pin()) {
      if (new_pin_ != &::google::protobuf::internal::kEmptyString) {
        new_pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryNewPin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_pin;
        break;
      }

      // optional string old_pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_pin().data(), this->old_pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_pin;
        break;
      }

      // optional string new_pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_pin().data(), this->new_pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoveryNewPin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }

  // optional string old_pin = 2;
  if (has_old_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_pin().data(), this->old_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->old_pin(), output);
  }

  // optional string new_pin = 3;
  if (has_new_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_pin().data(), this->new_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoveryNewPin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional string old_pin = 2;
  if (has_old_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_pin().data(), this->old_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_pin(), target);
  }

  // optional string new_pin = 3;
  if (has_new_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_pin().data(), this->new_pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoveryNewPin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional string old_pin = 2;
    if (has_old_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_pin());
    }

    // optional string new_pin = 3;
    if (has_new_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryNewPin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryNewPin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryNewPin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryNewPin::MergeFrom(const RecoveryNewPin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_old_pin()) {
      set_old_pin(from.old_pin());
    }
    if (from.has_new_pin()) {
      set_new_pin(from.new_pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryNewPin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryNewPin::CopyFrom(const RecoveryNewPin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryNewPin::IsInitialized() const {

  return true;
}

void RecoveryNewPin::Swap(RecoveryNewPin* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(old_pin_, other->old_pin_);
    std::swap(new_pin_, other->new_pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryNewPin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryNewPin_descriptor_;
  metadata.reflection = RecoveryNewPin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOneBill::kPinFieldNumber;
const int PayOneBill::kProviderIdFieldNumber;
const int PayOneBill::kBillIdFieldNumber;
const int PayOneBill::kAmountFieldNumber;
const int PayOneBill::kChannelFieldNumber;
const int PayOneBill::kKeyValuePairsFieldNumber;
#endif  // !_MSC_VER

PayOneBill::PayOneBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayOneBill::InitAsDefaultInstance() {
}

PayOneBill::PayOneBill(const PayOneBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayOneBill::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOneBill::~PayOneBill() {
  SharedDtor();
}

void PayOneBill::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void PayOneBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOneBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOneBill_descriptor_;
}

const PayOneBill& PayOneBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

PayOneBill* PayOneBill::default_instance_ = NULL;

PayOneBill* PayOneBill::New() const {
  return new PayOneBill;
}

void PayOneBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  keyvaluepairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOneBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_providerId;
        break;
      }

      // optional string providerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billId;
        break;
      }

      // optional string billId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyValuePairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayOneBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }

  // optional string providerId = 2;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->providerid(), output);
  }

  // optional string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->billid(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keyvaluepairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayOneBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }

  // optional string providerId = 2;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->providerid(), target);
  }

  // optional string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->billid(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->keyvaluepairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayOneBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string providerId = 2;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string billId = 3;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  total_size += 1 * this->keyvaluepairs_size();
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaluepairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOneBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOneBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOneBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOneBill::MergeFrom(const PayOneBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOneBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOneBill::CopyFrom(const PayOneBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOneBill::IsInitialized() const {

  return true;
}

void PayOneBill::Swap(PayOneBill* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(channel_, other->channel_);
    keyvaluepairs_.Swap(&other->keyvaluepairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOneBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOneBill_descriptor_;
  metadata.reflection = PayOneBill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayMultiBills::kPinFieldNumber;
const int PayMultiBills::kProviderIdsFieldNumber;
const int PayMultiBills::kBillIdsFieldNumber;
const int PayMultiBills::kAmountsFieldNumber;
#endif  // !_MSC_VER

PayMultiBills::PayMultiBills()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayMultiBills::InitAsDefaultInstance() {
}

PayMultiBills::PayMultiBills(const PayMultiBills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayMultiBills::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayMultiBills::~PayMultiBills() {
  SharedDtor();
}

void PayMultiBills::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerids_ != &::google::protobuf::internal::kEmptyString) {
    delete providerids_;
  }
  if (billids_ != &::google::protobuf::internal::kEmptyString) {
    delete billids_;
  }
  if (amounts_ != &::google::protobuf::internal::kEmptyString) {
    delete amounts_;
  }
  if (this != default_instance_) {
  }
}

void PayMultiBills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayMultiBills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayMultiBills_descriptor_;
}

const PayMultiBills& PayMultiBills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

PayMultiBills* PayMultiBills::default_instance_ = NULL;

PayMultiBills* PayMultiBills::New() const {
  return new PayMultiBills;
}

void PayMultiBills::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerids()) {
      if (providerids_ != &::google::protobuf::internal::kEmptyString) {
        providerids_->clear();
      }
    }
    if (has_billids()) {
      if (billids_ != &::google::protobuf::internal::kEmptyString) {
        billids_->clear();
      }
    }
    if (has_amounts()) {
      if (amounts_ != &::google::protobuf::internal::kEmptyString) {
        amounts_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayMultiBills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_providerIds;
        break;
      }

      // optional string providerIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerids().data(), this->providerids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billIds;
        break;
      }

      // optional string billIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billids().data(), this->billids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_amounts;
        break;
      }

      // optional string amounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amounts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amounts().data(), this->amounts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayMultiBills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }

  // optional string providerIds = 2;
  if (has_providerids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerids().data(), this->providerids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->providerids(), output);
  }

  // optional string billIds = 3;
  if (has_billids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billids().data(), this->billids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->billids(), output);
  }

  // optional string amounts = 4;
  if (has_amounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amounts().data(), this->amounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->amounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayMultiBills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }

  // optional string providerIds = 2;
  if (has_providerids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerids().data(), this->providerids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->providerids(), target);
  }

  // optional string billIds = 3;
  if (has_billids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billids().data(), this->billids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->billids(), target);
  }

  // optional string amounts = 4;
  if (has_amounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amounts().data(), this->amounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->amounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayMultiBills::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string providerIds = 2;
    if (has_providerids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerids());
    }

    // optional string billIds = 3;
    if (has_billids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billids());
    }

    // optional string amounts = 4;
    if (has_amounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayMultiBills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayMultiBills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayMultiBills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayMultiBills::MergeFrom(const PayMultiBills& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerids()) {
      set_providerids(from.providerids());
    }
    if (from.has_billids()) {
      set_billids(from.billids());
    }
    if (from.has_amounts()) {
      set_amounts(from.amounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayMultiBills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayMultiBills::CopyFrom(const PayMultiBills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayMultiBills::IsInitialized() const {

  return true;
}

void PayMultiBills::Swap(PayMultiBills* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(providerids_, other->providerids_);
    std::swap(billids_, other->billids_);
    std::swap(amounts_, other->amounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayMultiBills::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayMultiBills_descriptor_;
  metadata.reflection = PayMultiBills_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewPaymentHistoryByBillId::kPinFieldNumber;
const int ViewPaymentHistoryByBillId::kBillIdFieldNumber;
#endif  // !_MSC_VER

ViewPaymentHistoryByBillId::ViewPaymentHistoryByBillId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewPaymentHistoryByBillId::InitAsDefaultInstance() {
}

ViewPaymentHistoryByBillId::ViewPaymentHistoryByBillId(const ViewPaymentHistoryByBillId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewPaymentHistoryByBillId::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewPaymentHistoryByBillId::~ViewPaymentHistoryByBillId() {
  SharedDtor();
}

void ViewPaymentHistoryByBillId::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void ViewPaymentHistoryByBillId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewPaymentHistoryByBillId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewPaymentHistoryByBillId_descriptor_;
}

const ViewPaymentHistoryByBillId& ViewPaymentHistoryByBillId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

ViewPaymentHistoryByBillId* ViewPaymentHistoryByBillId::default_instance_ = NULL;

ViewPaymentHistoryByBillId* ViewPaymentHistoryByBillId::New() const {
  return new ViewPaymentHistoryByBillId;
}

void ViewPaymentHistoryByBillId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewPaymentHistoryByBillId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_billId;
        break;
      }

      // optional string billId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewPaymentHistoryByBillId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }

  // optional string billId = 2;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->billid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewPaymentHistoryByBillId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }

  // optional string billId = 2;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->billid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewPaymentHistoryByBillId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string billId = 2;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewPaymentHistoryByBillId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewPaymentHistoryByBillId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewPaymentHistoryByBillId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewPaymentHistoryByBillId::MergeFrom(const ViewPaymentHistoryByBillId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewPaymentHistoryByBillId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewPaymentHistoryByBillId::CopyFrom(const ViewPaymentHistoryByBillId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewPaymentHistoryByBillId::IsInitialized() const {

  return true;
}

void ViewPaymentHistoryByBillId::Swap(ViewPaymentHistoryByBillId* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewPaymentHistoryByBillId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewPaymentHistoryByBillId_descriptor_;
  metadata.reflection = ViewPaymentHistoryByBillId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopUpGame::kMpinFieldNumber;
const int TopUpGame::kProviderIdFieldNumber;
const int TopUpGame::kAmountFieldNumber;
const int TopUpGame::kGameAccountFieldNumber;
const int TopUpGame::kChannelFieldNumber;
const int TopUpGame::kKeyValuePairsFieldNumber;
#endif  // !_MSC_VER

TopUpGame::TopUpGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopUpGame::InitAsDefaultInstance() {
}

TopUpGame::TopUpGame(const TopUpGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopUpGame::SharedCtor() {
  _cached_size_ = 0;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  game_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopUpGame::~TopUpGame() {
  SharedDtor();
}

void TopUpGame::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (game_account_ != &::google::protobuf::internal::kEmptyString) {
    delete game_account_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void TopUpGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopUpGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopUpGame_descriptor_;
}

const TopUpGame& TopUpGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

TopUpGame* TopUpGame::default_instance_ = NULL;

TopUpGame* TopUpGame::New() const {
  return new TopUpGame;
}

void TopUpGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_game_account()) {
      if (game_account_ != &::google::protobuf::internal::kEmptyString) {
        game_account_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  keyvaluepairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopUpGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mpin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mpin().data(), this->mpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_providerId;
        break;
      }

      // optional string providerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_game_account;
        break;
      }

      // optional string game_account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_account().data(), this->game_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyValuePairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaluepairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyValuePairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopUpGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mpin(), output);
  }

  // optional string providerId = 2;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->providerid(), output);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional string game_account = 4;
  if (has_game_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_account().data(), this->game_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->game_account(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->keyvaluepairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopUpGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mpin().data(), this->mpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mpin(), target);
  }

  // optional string providerId = 2;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->providerid(), target);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional string game_account = 4;
  if (has_game_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_account().data(), this->game_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_account(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->keyvaluepairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopUpGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mpin = 1;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string providerId = 2;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string game_account = 4;
    if (has_game_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_account());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair keyValuePairs = 6;
  total_size += 1 * this->keyvaluepairs_size();
  for (int i = 0; i < this->keyvaluepairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaluepairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopUpGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopUpGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopUpGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopUpGame::MergeFrom(const TopUpGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyvaluepairs_.MergeFrom(from.keyvaluepairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_game_account()) {
      set_game_account(from.game_account());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopUpGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopUpGame::CopyFrom(const TopUpGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopUpGame::IsInitialized() const {

  return true;
}

void TopUpGame::Swap(TopUpGame* other) {
  if (other != this) {
    std::swap(mpin_, other->mpin_);
    std::swap(providerid_, other->providerid_);
    std::swap(amount_, other->amount_);
    std::swap(game_account_, other->game_account_);
    std::swap(channel_, other->channel_);
    keyvaluepairs_.Swap(&other->keyvaluepairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopUpGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopUpGame_descriptor_;
  metadata.reflection = TopUpGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPhoneDetail::kNumberFieldNumber;
#endif  // !_MSC_VER

CheckPhoneDetail::CheckPhoneDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPhoneDetail::InitAsDefaultInstance() {
}

CheckPhoneDetail::CheckPhoneDetail(const CheckPhoneDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPhoneDetail::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPhoneDetail::~CheckPhoneDetail() {
  SharedDtor();
}

void CheckPhoneDetail::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void CheckPhoneDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPhoneDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPhoneDetail_descriptor_;
}

const CheckPhoneDetail& CheckPhoneDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

CheckPhoneDetail* CheckPhoneDetail::default_instance_ = NULL;

CheckPhoneDetail* CheckPhoneDetail::New() const {
  return new CheckPhoneDetail;
}

void CheckPhoneDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPhoneDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPhoneDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPhoneDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPhoneDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPhoneDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPhoneDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPhoneDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPhoneDetail::MergeFrom(const CheckPhoneDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPhoneDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPhoneDetail::CopyFrom(const CheckPhoneDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPhoneDetail::IsInitialized() const {

  return true;
}

void CheckPhoneDetail::Swap(CheckPhoneDetail* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPhoneDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPhoneDetail_descriptor_;
  metadata.reflection = CheckPhoneDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreAround::kLngFieldNumber;
const int GetStoreAround::kLatFieldNumber;
const int GetStoreAround::kStreetFieldNumber;
const int GetStoreAround::kWardFieldNumber;
const int GetStoreAround::kDistrictFieldNumber;
const int GetStoreAround::kCityFieldNumber;
const int GetStoreAround::kAreaFieldNumber;
const int GetStoreAround::kLimitFieldNumber;
#endif  // !_MSC_VER

GetStoreAround::GetStoreAround()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreAround::InitAsDefaultInstance() {
}

GetStoreAround::GetStoreAround(const GetStoreAround& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreAround::SharedCtor() {
  _cached_size_ = 0;
  lng_ = 0;
  lat_ = 0;
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  district_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreAround::~GetStoreAround() {
  SharedDtor();
}

void GetStoreAround::SharedDtor() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (ward_ != &::google::protobuf::internal::kEmptyString) {
    delete ward_;
  }
  if (district_ != &::google::protobuf::internal::kEmptyString) {
    delete district_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (this != default_instance_) {
  }
}

void GetStoreAround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreAround::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreAround_descriptor_;
}

const GetStoreAround& GetStoreAround::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

GetStoreAround* GetStoreAround::default_instance_ = NULL;

GetStoreAround* GetStoreAround::New() const {
  return new GetStoreAround;
}

void GetStoreAround::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lng_ = 0;
    lat_ = 0;
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_ward()) {
      if (ward_ != &::google::protobuf::internal::kEmptyString) {
        ward_->clear();
      }
    }
    if (has_district()) {
      if (district_ != &::google::protobuf::internal::kEmptyString) {
        district_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::kEmptyString) {
        area_->clear();
      }
    }
    limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreAround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lng = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_street;
        break;
      }

      // optional string street = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ward;
        break;
      }

      // optional string ward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ward().data(), this->ward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_district;
        break;
      }

      // optional string district = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->district().data(), this->district().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_area;
        break;
      }

      // optional string area = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area().data(), this->area().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreAround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double lng = 1;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lng(), output);
  }

  // optional double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional string street = 3;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->street(), output);
  }

  // optional string ward = 4;
  if (has_ward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ward().data(), this->ward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ward(), output);
  }

  // optional string district = 5;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->district(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }

  // optional string area = 7;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->area(), output);
  }

  // optional uint32 limit = 8;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreAround::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double lng = 1;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lng(), target);
  }

  // optional double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional string street = 3;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->street(), target);
  }

  // optional string ward = 4;
  if (has_ward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ward().data(), this->ward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ward(), target);
  }

  // optional string district = 5;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->district(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string area = 7;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->area(), target);
  }

  // optional uint32 limit = 8;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreAround::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double lng = 1;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // optional double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional string street = 3;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string ward = 4;
    if (has_ward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ward());
    }

    // optional string district = 5;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->district());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string area = 7;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area());
    }

    // optional uint32 limit = 8;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreAround::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreAround* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreAround*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreAround::MergeFrom(const GetStoreAround& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_ward()) {
      set_ward(from.ward());
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreAround::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreAround::CopyFrom(const GetStoreAround& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreAround::IsInitialized() const {

  return true;
}

void GetStoreAround::Swap(GetStoreAround* other) {
  if (other != this) {
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(street_, other->street_);
    std::swap(ward_, other->ward_);
    std::swap(district_, other->district_);
    std::swap(city_, other->city_);
    std::swap(area_, other->area_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreAround::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreAround_descriptor_;
  metadata.reflection = GetStoreAround_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickDeposit::kProviderIdFieldNumber;
const int QuickDeposit::kTellerIdFieldNumber;
const int QuickDeposit::kBillIdFieldNumber;
const int QuickDeposit::kAmountFieldNumber;
const int QuickDeposit::kPinFieldNumber;
const int QuickDeposit::kChannelFieldNumber;
#endif  // !_MSC_VER

QuickDeposit::QuickDeposit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickDeposit::InitAsDefaultInstance() {
}

QuickDeposit::QuickDeposit(const QuickDeposit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickDeposit::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tellerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickDeposit::~QuickDeposit() {
  SharedDtor();
}

void QuickDeposit::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (tellerid_ != &::google::protobuf::internal::kEmptyString) {
    delete tellerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void QuickDeposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickDeposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickDeposit_descriptor_;
}

const QuickDeposit& QuickDeposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

QuickDeposit* QuickDeposit::default_instance_ = NULL;

QuickDeposit* QuickDeposit::New() const {
  return new QuickDeposit;
}

void QuickDeposit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_tellerid()) {
      if (tellerid_ != &::google::protobuf::internal::kEmptyString) {
        tellerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickDeposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tellerId;
        break;
      }

      // optional string tellerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tellerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tellerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tellerid().data(), this->tellerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billId;
        break;
      }

      // optional string billId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pin;
        break;
      }

      // optional string pin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickDeposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string tellerId = 2;
  if (has_tellerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tellerid().data(), this->tellerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tellerid(), output);
  }

  // optional string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->billid(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string pin = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pin(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickDeposit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string tellerId = 2;
  if (has_tellerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tellerid().data(), this->tellerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tellerid(), target);
  }

  // optional string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->billid(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string pin = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pin(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickDeposit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string tellerId = 2;
    if (has_tellerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tellerid());
    }

    // optional string billId = 3;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string pin = 5;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickDeposit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickDeposit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickDeposit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickDeposit::MergeFrom(const QuickDeposit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_tellerid()) {
      set_tellerid(from.tellerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickDeposit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickDeposit::CopyFrom(const QuickDeposit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickDeposit::IsInitialized() const {

  return true;
}

void QuickDeposit::Swap(QuickDeposit* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(tellerid_, other->tellerid_);
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(pin_, other->pin_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickDeposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickDeposit_descriptor_;
  metadata.reflection = QuickDeposit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickPayment::kProviderIdFieldNumber;
const int QuickPayment::kTellerIdFieldNumber;
const int QuickPayment::kBillIdFieldNumber;
const int QuickPayment::kAmountFieldNumber;
const int QuickPayment::kPinFieldNumber;
const int QuickPayment::kChannelFieldNumber;
#endif  // !_MSC_VER

QuickPayment::QuickPayment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickPayment::InitAsDefaultInstance() {
}

QuickPayment::QuickPayment(const QuickPayment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickPayment::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tellerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickPayment::~QuickPayment() {
  SharedDtor();
}

void QuickPayment::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (tellerid_ != &::google::protobuf::internal::kEmptyString) {
    delete tellerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void QuickPayment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickPayment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickPayment_descriptor_;
}

const QuickPayment& QuickPayment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

QuickPayment* QuickPayment::default_instance_ = NULL;

QuickPayment* QuickPayment::New() const {
  return new QuickPayment;
}

void QuickPayment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_tellerid()) {
      if (tellerid_ != &::google::protobuf::internal::kEmptyString) {
        tellerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickPayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tellerId;
        break;
      }

      // optional string tellerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tellerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tellerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tellerid().data(), this->tellerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billId;
        break;
      }

      // optional string billId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pin;
        break;
      }

      // optional string pin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickPayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string tellerId = 2;
  if (has_tellerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tellerid().data(), this->tellerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tellerid(), output);
  }

  // optional string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->billid(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional string pin = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pin(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickPayment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->providerid(), target);
  }

  // optional string tellerId = 2;
  if (has_tellerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tellerid().data(), this->tellerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tellerid(), target);
  }

  // optional string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->billid(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional string pin = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pin(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickPayment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string tellerId = 2;
    if (has_tellerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tellerid());
    }

    // optional string billId = 3;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string pin = 5;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickPayment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickPayment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickPayment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickPayment::MergeFrom(const QuickPayment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_tellerid()) {
      set_tellerid(from.tellerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickPayment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickPayment::CopyFrom(const QuickPayment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickPayment::IsInitialized() const {

  return true;
}

void QuickPayment::Swap(QuickPayment* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(tellerid_, other->tellerid_);
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(pin_, other->pin_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickPayment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickPayment_descriptor_;
  metadata.reflection = QuickPayment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankNetToMomo::kAmountFieldNumber;
const int BankNetToMomo::kBankIdFieldNumber;
const int BankNetToMomo::kCardHolderNameFieldNumber;
const int BankNetToMomo::kCardHolderNumberFieldNumber;
const int BankNetToMomo::kCardHolderMonthFieldNumber;
const int BankNetToMomo::kCardHolderYearFieldNumber;
#endif  // !_MSC_VER

BankNetToMomo::BankNetToMomo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankNetToMomo::InitAsDefaultInstance() {
}

BankNetToMomo::BankNetToMomo(const BankNetToMomo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankNetToMomo::SharedCtor() {
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankNetToMomo::~BankNetToMomo() {
  SharedDtor();
}

void BankNetToMomo::SharedDtor() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (card_holder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_name_;
  }
  if (card_holder_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_number_;
  }
  if (card_holder_month_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_month_;
  }
  if (card_holder_year_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_year_;
  }
  if (this != default_instance_) {
  }
}

void BankNetToMomo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankNetToMomo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankNetToMomo_descriptor_;
}

const BankNetToMomo& BankNetToMomo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BankNetToMomo* BankNetToMomo::default_instance_ = NULL;

BankNetToMomo* BankNetToMomo::New() const {
  return new BankNetToMomo;
}

void BankNetToMomo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
    if (has_card_holder_name()) {
      if (card_holder_name_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_name_->clear();
      }
    }
    if (has_card_holder_number()) {
      if (card_holder_number_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_number_->clear();
      }
    }
    if (has_card_holder_month()) {
      if (card_holder_month_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_month_->clear();
      }
    }
    if (has_card_holder_year()) {
      if (card_holder_year_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_year_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankNetToMomo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bankId;
        break;
      }

      // optional string bankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_holder_name;
        break;
      }

      // optional string card_holder_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_holder_name().data(), this->card_holder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_card_holder_number;
        break;
      }

      // optional string card_holder_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_holder_number().data(), this->card_holder_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card_holder_month;
        break;
      }

      // optional string card_holder_month = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_month:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_month()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_holder_month().data(), this->card_holder_month().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_holder_year;
        break;
      }

      // optional string card_holder_year = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_holder_year().data(), this->card_holder_year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankNetToMomo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string bankId = 2;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bankid(), output);
  }

  // optional string card_holder_name = 3;
  if (has_card_holder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_name().data(), this->card_holder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_holder_name(), output);
  }

  // optional string card_holder_number = 4;
  if (has_card_holder_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_number().data(), this->card_holder_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->card_holder_number(), output);
  }

  // optional string card_holder_month = 5;
  if (has_card_holder_month()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_month().data(), this->card_holder_month().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->card_holder_month(), output);
  }

  // optional string card_holder_year = 6;
  if (has_card_holder_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_year().data(), this->card_holder_year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->card_holder_year(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankNetToMomo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string bankId = 2;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bankid(), target);
  }

  // optional string card_holder_name = 3;
  if (has_card_holder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_name().data(), this->card_holder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_holder_name(), target);
  }

  // optional string card_holder_number = 4;
  if (has_card_holder_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_number().data(), this->card_holder_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->card_holder_number(), target);
  }

  // optional string card_holder_month = 5;
  if (has_card_holder_month()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_month().data(), this->card_holder_month().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_holder_month(), target);
  }

  // optional string card_holder_year = 6;
  if (has_card_holder_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_holder_year().data(), this->card_holder_year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->card_holder_year(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankNetToMomo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string bankId = 2;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

    // optional string card_holder_name = 3;
    if (has_card_holder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_name());
    }

    // optional string card_holder_number = 4;
    if (has_card_holder_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_number());
    }

    // optional string card_holder_month = 5;
    if (has_card_holder_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_month());
    }

    // optional string card_holder_year = 6;
    if (has_card_holder_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_year());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankNetToMomo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankNetToMomo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankNetToMomo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankNetToMomo::MergeFrom(const BankNetToMomo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
    if (from.has_card_holder_name()) {
      set_card_holder_name(from.card_holder_name());
    }
    if (from.has_card_holder_number()) {
      set_card_holder_number(from.card_holder_number());
    }
    if (from.has_card_holder_month()) {
      set_card_holder_month(from.card_holder_month());
    }
    if (from.has_card_holder_year()) {
      set_card_holder_year(from.card_holder_year());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankNetToMomo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankNetToMomo::CopyFrom(const BankNetToMomo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankNetToMomo::IsInitialized() const {

  return true;
}

void BankNetToMomo::Swap(BankNetToMomo* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(bankid_, other->bankid_);
    std::swap(card_holder_name_, other->card_holder_name_);
    std::swap(card_holder_number_, other->card_holder_number_);
    std::swap(card_holder_month_, other->card_holder_month_);
    std::swap(card_holder_year_, other->card_holder_year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankNetToMomo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankNetToMomo_descriptor_;
  metadata.reflection = BankNetToMomo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankNetVerifyOtp::kMerchantTransIdFieldNumber;
const int BankNetVerifyOtp::kTransIdFieldNumber;
const int BankNetVerifyOtp::kAmountFieldNumber;
const int BankNetVerifyOtp::kOtpFieldNumber;
const int BankNetVerifyOtp::kKvpsFieldNumber;
#endif  // !_MSC_VER

BankNetVerifyOtp::BankNetVerifyOtp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankNetVerifyOtp::InitAsDefaultInstance() {
}

BankNetVerifyOtp::BankNetVerifyOtp(const BankNetVerifyOtp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankNetVerifyOtp::SharedCtor() {
  _cached_size_ = 0;
  merchant_trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankNetVerifyOtp::~BankNetVerifyOtp() {
  SharedDtor();
}

void BankNetVerifyOtp::SharedDtor() {
  if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete merchant_trans_id_;
  }
  if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_id_;
  }
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (this != default_instance_) {
  }
}

void BankNetVerifyOtp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankNetVerifyOtp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankNetVerifyOtp_descriptor_;
}

const BankNetVerifyOtp& BankNetVerifyOtp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

BankNetVerifyOtp* BankNetVerifyOtp::default_instance_ = NULL;

BankNetVerifyOtp* BankNetVerifyOtp::New() const {
  return new BankNetVerifyOtp;
}

void BankNetVerifyOtp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_merchant_trans_id()) {
      if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
        merchant_trans_id_->clear();
      }
    }
    if (has_trans_id()) {
      if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
        trans_id_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankNetVerifyOtp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string merchant_trans_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchant_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->merchant_trans_id().data(), this->merchant_trans_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trans_id;
        break;
      }

      // optional string trans_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trans_id().data(), this->trans_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_otp;
        break;
      }

      // optional string otp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvps;
        break;
      }

      // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankNetVerifyOtp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string merchant_trans_id = 1;
  if (has_merchant_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchant_trans_id().data(), this->merchant_trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->merchant_trans_id(), output);
  }

  // optional string trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_id().data(), this->trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trans_id(), output);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional string otp = 4;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->otp(), output);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankNetVerifyOtp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string merchant_trans_id = 1;
  if (has_merchant_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchant_trans_id().data(), this->merchant_trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->merchant_trans_id(), target);
  }

  // optional string trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_id().data(), this->trans_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_id(), target);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional string otp = 4;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->otp(), target);
  }

  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankNetVerifyOtp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string merchant_trans_id = 1;
    if (has_merchant_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchant_trans_id());
    }

    // optional string trans_id = 2;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_id());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string otp = 4;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

  }
  // repeated .com.mservice.momo.msg.keyValuePair kvps = 5;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankNetVerifyOtp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankNetVerifyOtp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankNetVerifyOtp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankNetVerifyOtp::MergeFrom(const BankNetVerifyOtp& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_merchant_trans_id()) {
      set_merchant_trans_id(from.merchant_trans_id());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankNetVerifyOtp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankNetVerifyOtp::CopyFrom(const BankNetVerifyOtp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankNetVerifyOtp::IsInitialized() const {

  return true;
}

void BankNetVerifyOtp::Swap(BankNetVerifyOtp* other) {
  if (other != this) {
    std::swap(merchant_trans_id_, other->merchant_trans_id_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(amount_, other->amount_);
    std::swap(otp_, other->otp_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankNetVerifyOtp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankNetVerifyOtp_descriptor_;
  metadata.reflection = BankNetVerifyOtp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Broadcast_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_MsgType_descriptor_;
}
bool Broadcast_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Broadcast_MsgType Broadcast::NOTICE;
const Broadcast_MsgType Broadcast::ADVERTISE;
const Broadcast_MsgType Broadcast::NEW_USER;
const Broadcast_MsgType Broadcast::MONEY_REQ;
const Broadcast_MsgType Broadcast::KILL_PREV;
const Broadcast_MsgType Broadcast::MONEY_RECV;
const Broadcast_MsgType Broadcast::TRANS_OUSIDE;
const Broadcast_MsgType Broadcast::NOTIFICATION;
const Broadcast_MsgType Broadcast::CHECK_PREV;
const Broadcast_MsgType Broadcast::PREV_RETURN;
const Broadcast_MsgType Broadcast::FORCE_UPDATE_AGENT_INFO;
const Broadcast_MsgType Broadcast::GET_TOKEN;
const Broadcast_MsgType Broadcast::MsgType_MIN;
const Broadcast_MsgType Broadcast::MsgType_MAX;
const int Broadcast::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Broadcast::kTypeFieldNumber;
const int Broadcast::kSenderFieldNumber;
const int Broadcast::kContentFieldNumber;
#endif  // !_MSC_VER

Broadcast::Broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Broadcast::InitAsDefaultInstance() {
}

Broadcast::Broadcast(const Broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Broadcast::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast::~Broadcast() {
  SharedDtor();
}

void Broadcast::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_descriptor_;
}

const Broadcast& Broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SoapProto_2eproto();
  return *default_instance_;
}

Broadcast* Broadcast::default_instance_ = NULL;

Broadcast* Broadcast::New() const {
  return new Broadcast;
}

void Broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mservice.momo.msg.Broadcast.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::Broadcast_MsgType_IsValid(value)) {
            set_type(static_cast< ::com::mservice::momo::msg::Broadcast_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // optional string sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mservice.momo.msg.Broadcast.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sender(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.mservice.momo.msg.Broadcast.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mservice.momo.msg.Broadcast.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast::MergeFrom(const Broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast::CopyFrom(const Broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast::IsInitialized() const {

  return true;
}

void Broadcast::Swap(Broadcast* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sender_, other->sender_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_descriptor_;
  metadata.reflection = Broadcast_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace momo
}  // namespace mservice
}  // namespace com

// @@protoc_insertion_point(global_scope)
