// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdModels.proto

#ifndef PROTOBUF_CmdModels_2eproto__INCLUDED
#define PROTOBUF_CmdModels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mservice {
namespace momo {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CmdModels_2eproto();
void protobuf_AssignDesc_CmdModels_2eproto();
void protobuf_ShutdownFile_CmdModels_2eproto();

class Error;
class SendOtp;
class SendOtpReply;
class VerifyOtp;
class VerifyOtpReply;
class Register;
class RegisterReply;
class GetAgentInfo;
class GetAgentInfoReply;
class IsPinCorrect;
class IsPinCorrectReply;
class ChangePin;
class ChangePinReply;
class UpdateAgentInfo;
class UpdateAgentInfoReply;
class Article;
class ModifyArticle;
class ModifyArticleReply;
class GetArticlePage;
class GetArticlePageReply;
class BankAccount;
class ModifyBankAccount;
class ModifyBankAccountReply;
class GetAgentBankAccounts;
class GetAgentBankAccountsReply;
class Transaction;
class GetTransaction;
class GetTransactionReply;
class GetTransactionDetail;
class GetTransactionDetailReply;
class Topup;
class TopupReply;
class TopupGame;
class TopupGameReply;
class TransferM2m;
class TransferM2mReply;
class TransferM2c;
class TransferM2cReply;
class DepositWithdrawAtPlace;
class DepositWithdrawAtPlaceReply;
class BillDetail;
class GetBillInfo;
class GetBillInfoReply;
class PayBill;
class PayBillReply;
class Bill;
class SaveBill;
class SaveBillReply;
class GetSavedBill;
class GetSavedBillReply;
class RemoveSavedBill;
class RemoveSavedBillReply;
class BankIn;
class BankInReply;
class BankOut;
class BankOutReply;
class BanknetToMomo;
class BanknetToMomoReply;
class VerifyBanknetOtp;
class VerifyBanknetOtpReply;
class Location;
class StoreInfo;
class GetStoreAround;
class GetStoreAroundReply;
class GetStoreByCode;
class GetStoreByCodeReply;
class KeyValueData;
class KeyValueDataReply;
class GetAvatarUploadToken;
class GetAvatarUploadTokenReply;
class Pay123MuaOrder;
class Pay123MuaOrderReply;
class TransactionFee;
class GetTransactionFee;
class GetTransactionFeeReply;
class PayAirlineTicket;
class PayAirlineTicketReply;
class WithdrawByAgent;
class WithdrawByAgentReply;
class SendSms;
class SendSmsReply;
class BankOutManual;
class BankOutManualReply;
class IsMomoer;
class IsMomoerReply;
class CountAgentTran;
class CountAgentTranReply;
class GetServiceLayout;
class GetServicelayoutReply;
class CompeleteTran;
class MakeTranReply;

enum VerifyOtpReply_ResultCode {
  VerifyOtpReply_ResultCode_SUCCESS = 1,
  VerifyOtpReply_ResultCode_NOT_MATCH = 2,
  VerifyOtpReply_ResultCode_OUT_OF_TIME = 3
};
bool VerifyOtpReply_ResultCode_IsValid(int value);
const VerifyOtpReply_ResultCode VerifyOtpReply_ResultCode_ResultCode_MIN = VerifyOtpReply_ResultCode_SUCCESS;
const VerifyOtpReply_ResultCode VerifyOtpReply_ResultCode_ResultCode_MAX = VerifyOtpReply_ResultCode_OUT_OF_TIME;
const int VerifyOtpReply_ResultCode_ResultCode_ARRAYSIZE = VerifyOtpReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VerifyOtpReply_ResultCode_descriptor();
inline const ::std::string& VerifyOtpReply_ResultCode_Name(VerifyOtpReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VerifyOtpReply_ResultCode_descriptor(), value);
}
inline bool VerifyOtpReply_ResultCode_Parse(
    const ::std::string& name, VerifyOtpReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VerifyOtpReply_ResultCode>(
    VerifyOtpReply_ResultCode_descriptor(), name, value);
}
enum RegisterReply_ResultCode {
  RegisterReply_ResultCode_SUCCESS = 1,
  RegisterReply_ResultCode_NUMBER_EXISTED = 2
};
bool RegisterReply_ResultCode_IsValid(int value);
const RegisterReply_ResultCode RegisterReply_ResultCode_ResultCode_MIN = RegisterReply_ResultCode_SUCCESS;
const RegisterReply_ResultCode RegisterReply_ResultCode_ResultCode_MAX = RegisterReply_ResultCode_NUMBER_EXISTED;
const int RegisterReply_ResultCode_ResultCode_ARRAYSIZE = RegisterReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegisterReply_ResultCode_descriptor();
inline const ::std::string& RegisterReply_ResultCode_Name(RegisterReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegisterReply_ResultCode_descriptor(), value);
}
inline bool RegisterReply_ResultCode_Parse(
    const ::std::string& name, RegisterReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegisterReply_ResultCode>(
    RegisterReply_ResultCode_descriptor(), name, value);
}
enum IsPinCorrectReply_ResultCode {
  IsPinCorrectReply_ResultCode_CORRECT = 1,
  IsPinCorrectReply_ResultCode_INCORRECT = 2,
  IsPinCorrectReply_ResultCode_AUTH_EXPIRED = 3,
  IsPinCorrectReply_ResultCode_AUTH_RETRY_EXCEED = 4
};
bool IsPinCorrectReply_ResultCode_IsValid(int value);
const IsPinCorrectReply_ResultCode IsPinCorrectReply_ResultCode_ResultCode_MIN = IsPinCorrectReply_ResultCode_CORRECT;
const IsPinCorrectReply_ResultCode IsPinCorrectReply_ResultCode_ResultCode_MAX = IsPinCorrectReply_ResultCode_AUTH_RETRY_EXCEED;
const int IsPinCorrectReply_ResultCode_ResultCode_ARRAYSIZE = IsPinCorrectReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* IsPinCorrectReply_ResultCode_descriptor();
inline const ::std::string& IsPinCorrectReply_ResultCode_Name(IsPinCorrectReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    IsPinCorrectReply_ResultCode_descriptor(), value);
}
inline bool IsPinCorrectReply_ResultCode_Parse(
    const ::std::string& name, IsPinCorrectReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IsPinCorrectReply_ResultCode>(
    IsPinCorrectReply_ResultCode_descriptor(), name, value);
}
enum ChangePinReply_ResultCode {
  ChangePinReply_ResultCode_SUCCESS = 1,
  ChangePinReply_ResultCode_PIN_INCORRECT = 2,
  ChangePinReply_ResultCode_BAD_PASSWORD = 3,
  ChangePinReply_ResultCode_SAME_PASSWORD = 4,
  ChangePinReply_ResultCode_PASSWORD_PREVIOUS_USED = 5
};
bool ChangePinReply_ResultCode_IsValid(int value);
const ChangePinReply_ResultCode ChangePinReply_ResultCode_ResultCode_MIN = ChangePinReply_ResultCode_SUCCESS;
const ChangePinReply_ResultCode ChangePinReply_ResultCode_ResultCode_MAX = ChangePinReply_ResultCode_PASSWORD_PREVIOUS_USED;
const int ChangePinReply_ResultCode_ResultCode_ARRAYSIZE = ChangePinReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangePinReply_ResultCode_descriptor();
inline const ::std::string& ChangePinReply_ResultCode_Name(ChangePinReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangePinReply_ResultCode_descriptor(), value);
}
inline bool ChangePinReply_ResultCode_Parse(
    const ::std::string& name, ChangePinReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangePinReply_ResultCode>(
    ChangePinReply_ResultCode_descriptor(), name, value);
}
enum UpdateAgentInfoReply_ResultCode {
  UpdateAgentInfoReply_ResultCode_SUCCESS = 1,
  UpdateAgentInfoReply_ResultCode_FAIL = 2
};
bool UpdateAgentInfoReply_ResultCode_IsValid(int value);
const UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply_ResultCode_ResultCode_MIN = UpdateAgentInfoReply_ResultCode_SUCCESS;
const UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply_ResultCode_ResultCode_MAX = UpdateAgentInfoReply_ResultCode_FAIL;
const int UpdateAgentInfoReply_ResultCode_ResultCode_ARRAYSIZE = UpdateAgentInfoReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateAgentInfoReply_ResultCode_descriptor();
inline const ::std::string& UpdateAgentInfoReply_ResultCode_Name(UpdateAgentInfoReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateAgentInfoReply_ResultCode_descriptor(), value);
}
inline bool UpdateAgentInfoReply_ResultCode_Parse(
    const ::std::string& name, UpdateAgentInfoReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateAgentInfoReply_ResultCode>(
    UpdateAgentInfoReply_ResultCode_descriptor(), name, value);
}
enum ModifyArticle_Command {
  ModifyArticle_Command_ADD = 1,
  ModifyArticle_Command_UPDATE = 2,
  ModifyArticle_Command_DELETE = 3
};
bool ModifyArticle_Command_IsValid(int value);
const ModifyArticle_Command ModifyArticle_Command_Command_MIN = ModifyArticle_Command_ADD;
const ModifyArticle_Command ModifyArticle_Command_Command_MAX = ModifyArticle_Command_DELETE;
const int ModifyArticle_Command_Command_ARRAYSIZE = ModifyArticle_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModifyArticle_Command_descriptor();
inline const ::std::string& ModifyArticle_Command_Name(ModifyArticle_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModifyArticle_Command_descriptor(), value);
}
inline bool ModifyArticle_Command_Parse(
    const ::std::string& name, ModifyArticle_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModifyArticle_Command>(
    ModifyArticle_Command_descriptor(), name, value);
}
enum ModifyArticleReply_ResultCode {
  ModifyArticleReply_ResultCode_SUCCESS = 1,
  ModifyArticleReply_ResultCode_NOT_FOUND = 2
};
bool ModifyArticleReply_ResultCode_IsValid(int value);
const ModifyArticleReply_ResultCode ModifyArticleReply_ResultCode_ResultCode_MIN = ModifyArticleReply_ResultCode_SUCCESS;
const ModifyArticleReply_ResultCode ModifyArticleReply_ResultCode_ResultCode_MAX = ModifyArticleReply_ResultCode_NOT_FOUND;
const int ModifyArticleReply_ResultCode_ResultCode_ARRAYSIZE = ModifyArticleReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModifyArticleReply_ResultCode_descriptor();
inline const ::std::string& ModifyArticleReply_ResultCode_Name(ModifyArticleReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModifyArticleReply_ResultCode_descriptor(), value);
}
inline bool ModifyArticleReply_ResultCode_Parse(
    const ::std::string& name, ModifyArticleReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModifyArticleReply_ResultCode>(
    ModifyArticleReply_ResultCode_descriptor(), name, value);
}
enum ModifyBankAccount_Command {
  ModifyBankAccount_Command_ADD = 1,
  ModifyBankAccount_Command_UPDATE = 2,
  ModifyBankAccount_Command_DELETE = 3
};
bool ModifyBankAccount_Command_IsValid(int value);
const ModifyBankAccount_Command ModifyBankAccount_Command_Command_MIN = ModifyBankAccount_Command_ADD;
const ModifyBankAccount_Command ModifyBankAccount_Command_Command_MAX = ModifyBankAccount_Command_DELETE;
const int ModifyBankAccount_Command_Command_ARRAYSIZE = ModifyBankAccount_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModifyBankAccount_Command_descriptor();
inline const ::std::string& ModifyBankAccount_Command_Name(ModifyBankAccount_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModifyBankAccount_Command_descriptor(), value);
}
inline bool ModifyBankAccount_Command_Parse(
    const ::std::string& name, ModifyBankAccount_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModifyBankAccount_Command>(
    ModifyBankAccount_Command_descriptor(), name, value);
}
enum ModifyBankAccountReply_ResultCode {
  ModifyBankAccountReply_ResultCode_SUCCESS = 1,
  ModifyBankAccountReply_ResultCode_NOT_FOUND = 2
};
bool ModifyBankAccountReply_ResultCode_IsValid(int value);
const ModifyBankAccountReply_ResultCode ModifyBankAccountReply_ResultCode_ResultCode_MIN = ModifyBankAccountReply_ResultCode_SUCCESS;
const ModifyBankAccountReply_ResultCode ModifyBankAccountReply_ResultCode_ResultCode_MAX = ModifyBankAccountReply_ResultCode_NOT_FOUND;
const int ModifyBankAccountReply_ResultCode_ResultCode_ARRAYSIZE = ModifyBankAccountReply_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModifyBankAccountReply_ResultCode_descriptor();
inline const ::std::string& ModifyBankAccountReply_ResultCode_Name(ModifyBankAccountReply_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModifyBankAccountReply_ResultCode_descriptor(), value);
}
inline bool ModifyBankAccountReply_ResultCode_Parse(
    const ::std::string& name, ModifyBankAccountReply_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModifyBankAccountReply_ResultCode>(
    ModifyBankAccountReply_ResultCode_descriptor(), name, value);
}
enum TopupReply_Result {
  TopupReply_Result_SUCCESS = 1,
  TopupReply_Result_FAILED = 2,
  TopupReply_Result_LOGIN_REQUIRED = 4
};
bool TopupReply_Result_IsValid(int value);
const TopupReply_Result TopupReply_Result_Result_MIN = TopupReply_Result_SUCCESS;
const TopupReply_Result TopupReply_Result_Result_MAX = TopupReply_Result_LOGIN_REQUIRED;
const int TopupReply_Result_Result_ARRAYSIZE = TopupReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* TopupReply_Result_descriptor();
inline const ::std::string& TopupReply_Result_Name(TopupReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    TopupReply_Result_descriptor(), value);
}
inline bool TopupReply_Result_Parse(
    const ::std::string& name, TopupReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopupReply_Result>(
    TopupReply_Result_descriptor(), name, value);
}
enum TopupGameReply_TopupGameResult {
  TopupGameReply_TopupGameResult_SUCCESS = 1,
  TopupGameReply_TopupGameResult_FAILED = 2
};
bool TopupGameReply_TopupGameResult_IsValid(int value);
const TopupGameReply_TopupGameResult TopupGameReply_TopupGameResult_TopupGameResult_MIN = TopupGameReply_TopupGameResult_SUCCESS;
const TopupGameReply_TopupGameResult TopupGameReply_TopupGameResult_TopupGameResult_MAX = TopupGameReply_TopupGameResult_FAILED;
const int TopupGameReply_TopupGameResult_TopupGameResult_ARRAYSIZE = TopupGameReply_TopupGameResult_TopupGameResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* TopupGameReply_TopupGameResult_descriptor();
inline const ::std::string& TopupGameReply_TopupGameResult_Name(TopupGameReply_TopupGameResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    TopupGameReply_TopupGameResult_descriptor(), value);
}
inline bool TopupGameReply_TopupGameResult_Parse(
    const ::std::string& name, TopupGameReply_TopupGameResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopupGameReply_TopupGameResult>(
    TopupGameReply_TopupGameResult_descriptor(), name, value);
}
enum TransferM2mReply_Result {
  TransferM2mReply_Result_SUCCESS = 1,
  TransferM2mReply_Result_FAILED = 2,
  TransferM2mReply_Result_ACCESS_DENIED = 3,
  TransferM2mReply_Result_LOGIN_REQUIRED = 4
};
bool TransferM2mReply_Result_IsValid(int value);
const TransferM2mReply_Result TransferM2mReply_Result_Result_MIN = TransferM2mReply_Result_SUCCESS;
const TransferM2mReply_Result TransferM2mReply_Result_Result_MAX = TransferM2mReply_Result_LOGIN_REQUIRED;
const int TransferM2mReply_Result_Result_ARRAYSIZE = TransferM2mReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferM2mReply_Result_descriptor();
inline const ::std::string& TransferM2mReply_Result_Name(TransferM2mReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferM2mReply_Result_descriptor(), value);
}
inline bool TransferM2mReply_Result_Parse(
    const ::std::string& name, TransferM2mReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferM2mReply_Result>(
    TransferM2mReply_Result_descriptor(), name, value);
}
enum TransferM2cReply_Result {
  TransferM2cReply_Result_SUCCESS = 1,
  TransferM2cReply_Result_FAILED = 2,
  TransferM2cReply_Result_ACCESS_DENIED = 3
};
bool TransferM2cReply_Result_IsValid(int value);
const TransferM2cReply_Result TransferM2cReply_Result_Result_MIN = TransferM2cReply_Result_SUCCESS;
const TransferM2cReply_Result TransferM2cReply_Result_Result_MAX = TransferM2cReply_Result_ACCESS_DENIED;
const int TransferM2cReply_Result_Result_ARRAYSIZE = TransferM2cReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferM2cReply_Result_descriptor();
inline const ::std::string& TransferM2cReply_Result_Name(TransferM2cReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferM2cReply_Result_descriptor(), value);
}
inline bool TransferM2cReply_Result_Parse(
    const ::std::string& name, TransferM2cReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferM2cReply_Result>(
    TransferM2cReply_Result_descriptor(), name, value);
}
enum DepositWithdrawAtPlaceReply_Result {
  DepositWithdrawAtPlaceReply_Result_SUCCESS = 1,
  DepositWithdrawAtPlaceReply_Result_FAIL = 2
};
bool DepositWithdrawAtPlaceReply_Result_IsValid(int value);
const DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply_Result_Result_MIN = DepositWithdrawAtPlaceReply_Result_SUCCESS;
const DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply_Result_Result_MAX = DepositWithdrawAtPlaceReply_Result_FAIL;
const int DepositWithdrawAtPlaceReply_Result_Result_ARRAYSIZE = DepositWithdrawAtPlaceReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* DepositWithdrawAtPlaceReply_Result_descriptor();
inline const ::std::string& DepositWithdrawAtPlaceReply_Result_Name(DepositWithdrawAtPlaceReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    DepositWithdrawAtPlaceReply_Result_descriptor(), value);
}
inline bool DepositWithdrawAtPlaceReply_Result_Parse(
    const ::std::string& name, DepositWithdrawAtPlaceReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DepositWithdrawAtPlaceReply_Result>(
    DepositWithdrawAtPlaceReply_Result_descriptor(), name, value);
}
enum GetBillInfoReply_Result {
  GetBillInfoReply_Result_SUCESS = 1,
  GetBillInfoReply_Result_AGENT_NOT_FOUND = 2,
  GetBillInfoReply_Result_BILL_NOT_FOUND = 3
};
bool GetBillInfoReply_Result_IsValid(int value);
const GetBillInfoReply_Result GetBillInfoReply_Result_Result_MIN = GetBillInfoReply_Result_SUCESS;
const GetBillInfoReply_Result GetBillInfoReply_Result_Result_MAX = GetBillInfoReply_Result_BILL_NOT_FOUND;
const int GetBillInfoReply_Result_Result_ARRAYSIZE = GetBillInfoReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetBillInfoReply_Result_descriptor();
inline const ::std::string& GetBillInfoReply_Result_Name(GetBillInfoReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetBillInfoReply_Result_descriptor(), value);
}
inline bool GetBillInfoReply_Result_Parse(
    const ::std::string& name, GetBillInfoReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetBillInfoReply_Result>(
    GetBillInfoReply_Result_descriptor(), name, value);
}
enum PayBillReply_Result {
  PayBillReply_Result_SUCCESS = 1,
  PayBillReply_Result_AGENT_NOT_FOUND = 2,
  PayBillReply_Result_BILL_NOT_FOUND = 3,
  PayBillReply_Result_UNKNOWN_SOURCE = 4
};
bool PayBillReply_Result_IsValid(int value);
const PayBillReply_Result PayBillReply_Result_Result_MIN = PayBillReply_Result_SUCCESS;
const PayBillReply_Result PayBillReply_Result_Result_MAX = PayBillReply_Result_UNKNOWN_SOURCE;
const int PayBillReply_Result_Result_ARRAYSIZE = PayBillReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayBillReply_Result_descriptor();
inline const ::std::string& PayBillReply_Result_Name(PayBillReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayBillReply_Result_descriptor(), value);
}
inline bool PayBillReply_Result_Parse(
    const ::std::string& name, PayBillReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayBillReply_Result>(
    PayBillReply_Result_descriptor(), name, value);
}
enum SaveBillReply_Result {
  SaveBillReply_Result_SUCCESS = 1,
  SaveBillReply_Result_FAIL = 2
};
bool SaveBillReply_Result_IsValid(int value);
const SaveBillReply_Result SaveBillReply_Result_Result_MIN = SaveBillReply_Result_SUCCESS;
const SaveBillReply_Result SaveBillReply_Result_Result_MAX = SaveBillReply_Result_FAIL;
const int SaveBillReply_Result_Result_ARRAYSIZE = SaveBillReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaveBillReply_Result_descriptor();
inline const ::std::string& SaveBillReply_Result_Name(SaveBillReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaveBillReply_Result_descriptor(), value);
}
inline bool SaveBillReply_Result_Parse(
    const ::std::string& name, SaveBillReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaveBillReply_Result>(
    SaveBillReply_Result_descriptor(), name, value);
}
enum RemoveSavedBillReply_Result {
  RemoveSavedBillReply_Result_SUCCESS = 1,
  RemoveSavedBillReply_Result_FAIL = 2
};
bool RemoveSavedBillReply_Result_IsValid(int value);
const RemoveSavedBillReply_Result RemoveSavedBillReply_Result_Result_MIN = RemoveSavedBillReply_Result_SUCCESS;
const RemoveSavedBillReply_Result RemoveSavedBillReply_Result_Result_MAX = RemoveSavedBillReply_Result_FAIL;
const int RemoveSavedBillReply_Result_Result_ARRAYSIZE = RemoveSavedBillReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoveSavedBillReply_Result_descriptor();
inline const ::std::string& RemoveSavedBillReply_Result_Name(RemoveSavedBillReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoveSavedBillReply_Result_descriptor(), value);
}
inline bool RemoveSavedBillReply_Result_Parse(
    const ::std::string& name, RemoveSavedBillReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoveSavedBillReply_Result>(
    RemoveSavedBillReply_Result_descriptor(), name, value);
}
enum BankInReply_Result {
  BankInReply_Result_SUCCESS = 1,
  BankInReply_Result_FAILED = 2
};
bool BankInReply_Result_IsValid(int value);
const BankInReply_Result BankInReply_Result_Result_MIN = BankInReply_Result_SUCCESS;
const BankInReply_Result BankInReply_Result_Result_MAX = BankInReply_Result_FAILED;
const int BankInReply_Result_Result_ARRAYSIZE = BankInReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* BankInReply_Result_descriptor();
inline const ::std::string& BankInReply_Result_Name(BankInReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    BankInReply_Result_descriptor(), value);
}
inline bool BankInReply_Result_Parse(
    const ::std::string& name, BankInReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BankInReply_Result>(
    BankInReply_Result_descriptor(), name, value);
}
enum BankOutReply_Result {
  BankOutReply_Result_SUCCESS = 1,
  BankOutReply_Result_FAILED = 2
};
bool BankOutReply_Result_IsValid(int value);
const BankOutReply_Result BankOutReply_Result_Result_MIN = BankOutReply_Result_SUCCESS;
const BankOutReply_Result BankOutReply_Result_Result_MAX = BankOutReply_Result_FAILED;
const int BankOutReply_Result_Result_ARRAYSIZE = BankOutReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* BankOutReply_Result_descriptor();
inline const ::std::string& BankOutReply_Result_Name(BankOutReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    BankOutReply_Result_descriptor(), value);
}
inline bool BankOutReply_Result_Parse(
    const ::std::string& name, BankOutReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BankOutReply_Result>(
    BankOutReply_Result_descriptor(), name, value);
}
enum BanknetToMomoReply_Result {
  BanknetToMomoReply_Result_SUCCESS = 1,
  BanknetToMomoReply_Result_FAILED = 2
};
bool BanknetToMomoReply_Result_IsValid(int value);
const BanknetToMomoReply_Result BanknetToMomoReply_Result_Result_MIN = BanknetToMomoReply_Result_SUCCESS;
const BanknetToMomoReply_Result BanknetToMomoReply_Result_Result_MAX = BanknetToMomoReply_Result_FAILED;
const int BanknetToMomoReply_Result_Result_ARRAYSIZE = BanknetToMomoReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* BanknetToMomoReply_Result_descriptor();
inline const ::std::string& BanknetToMomoReply_Result_Name(BanknetToMomoReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    BanknetToMomoReply_Result_descriptor(), value);
}
inline bool BanknetToMomoReply_Result_Parse(
    const ::std::string& name, BanknetToMomoReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BanknetToMomoReply_Result>(
    BanknetToMomoReply_Result_descriptor(), name, value);
}
enum KeyValueData_CommandType {
  KeyValueData_CommandType_GET = 0,
  KeyValueData_CommandType_PUT = 1
};
bool KeyValueData_CommandType_IsValid(int value);
const KeyValueData_CommandType KeyValueData_CommandType_CommandType_MIN = KeyValueData_CommandType_GET;
const KeyValueData_CommandType KeyValueData_CommandType_CommandType_MAX = KeyValueData_CommandType_PUT;
const int KeyValueData_CommandType_CommandType_ARRAYSIZE = KeyValueData_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeyValueData_CommandType_descriptor();
inline const ::std::string& KeyValueData_CommandType_Name(KeyValueData_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeyValueData_CommandType_descriptor(), value);
}
inline bool KeyValueData_CommandType_Parse(
    const ::std::string& name, KeyValueData_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeyValueData_CommandType>(
    KeyValueData_CommandType_descriptor(), name, value);
}
enum KeyValueDataReply_Result {
  KeyValueDataReply_Result_SUCCESS = 1,
  KeyValueDataReply_Result_FAILED = 2
};
bool KeyValueDataReply_Result_IsValid(int value);
const KeyValueDataReply_Result KeyValueDataReply_Result_Result_MIN = KeyValueDataReply_Result_SUCCESS;
const KeyValueDataReply_Result KeyValueDataReply_Result_Result_MAX = KeyValueDataReply_Result_FAILED;
const int KeyValueDataReply_Result_Result_ARRAYSIZE = KeyValueDataReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeyValueDataReply_Result_descriptor();
inline const ::std::string& KeyValueDataReply_Result_Name(KeyValueDataReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeyValueDataReply_Result_descriptor(), value);
}
inline bool KeyValueDataReply_Result_Parse(
    const ::std::string& name, KeyValueDataReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeyValueDataReply_Result>(
    KeyValueDataReply_Result_descriptor(), name, value);
}
enum Pay123MuaOrderReply_Result {
  Pay123MuaOrderReply_Result_SUCCESS = 1,
  Pay123MuaOrderReply_Result_FAILED = 2,
  Pay123MuaOrderReply_Result_ACCESS_DENIED = 3
};
bool Pay123MuaOrderReply_Result_IsValid(int value);
const Pay123MuaOrderReply_Result Pay123MuaOrderReply_Result_Result_MIN = Pay123MuaOrderReply_Result_SUCCESS;
const Pay123MuaOrderReply_Result Pay123MuaOrderReply_Result_Result_MAX = Pay123MuaOrderReply_Result_ACCESS_DENIED;
const int Pay123MuaOrderReply_Result_Result_ARRAYSIZE = Pay123MuaOrderReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pay123MuaOrderReply_Result_descriptor();
inline const ::std::string& Pay123MuaOrderReply_Result_Name(Pay123MuaOrderReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pay123MuaOrderReply_Result_descriptor(), value);
}
inline bool Pay123MuaOrderReply_Result_Parse(
    const ::std::string& name, Pay123MuaOrderReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pay123MuaOrderReply_Result>(
    Pay123MuaOrderReply_Result_descriptor(), name, value);
}
enum PayAirlineTicketReply_Result {
  PayAirlineTicketReply_Result_SUCCESS = 1,
  PayAirlineTicketReply_Result_FAIL = 2
};
bool PayAirlineTicketReply_Result_IsValid(int value);
const PayAirlineTicketReply_Result PayAirlineTicketReply_Result_Result_MIN = PayAirlineTicketReply_Result_SUCCESS;
const PayAirlineTicketReply_Result PayAirlineTicketReply_Result_Result_MAX = PayAirlineTicketReply_Result_FAIL;
const int PayAirlineTicketReply_Result_Result_ARRAYSIZE = PayAirlineTicketReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayAirlineTicketReply_Result_descriptor();
inline const ::std::string& PayAirlineTicketReply_Result_Name(PayAirlineTicketReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayAirlineTicketReply_Result_descriptor(), value);
}
inline bool PayAirlineTicketReply_Result_Parse(
    const ::std::string& name, PayAirlineTicketReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayAirlineTicketReply_Result>(
    PayAirlineTicketReply_Result_descriptor(), name, value);
}
enum WithdrawByAgentReply_Result {
  WithdrawByAgentReply_Result_SUCCESS = 1,
  WithdrawByAgentReply_Result_FAIL = 2
};
bool WithdrawByAgentReply_Result_IsValid(int value);
const WithdrawByAgentReply_Result WithdrawByAgentReply_Result_Result_MIN = WithdrawByAgentReply_Result_SUCCESS;
const WithdrawByAgentReply_Result WithdrawByAgentReply_Result_Result_MAX = WithdrawByAgentReply_Result_FAIL;
const int WithdrawByAgentReply_Result_Result_ARRAYSIZE = WithdrawByAgentReply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* WithdrawByAgentReply_Result_descriptor();
inline const ::std::string& WithdrawByAgentReply_Result_Name(WithdrawByAgentReply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    WithdrawByAgentReply_Result_descriptor(), value);
}
inline bool WithdrawByAgentReply_Result_Parse(
    const ::std::string& name, WithdrawByAgentReply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WithdrawByAgentReply_Result>(
    WithdrawByAgentReply_Result_descriptor(), name, value);
}
enum CommandType {
  ERROR = 1,
  SEND_OTP = 2,
  SEND_OTP_REPLY = 3,
  VERIFY_OTP = 4,
  VERIFY_OTP_REPLY = 5,
  REGISTER = 6,
  REGISTER_REPLY = 7,
  GET_AGENT_INFO = 8,
  GET_AGENT_INFO_REPLY = 9,
  IS_PIN_CORRECT = 10,
  IS_PIN_CORRECT_REPLY = 11,
  CHANGE_PIN = 12,
  CHANGE_PIN_REPLY = 13,
  MODIFY_ARTICLE = 14,
  MODIFY_ARTICLE_REPLY = 15,
  GET_ARTICLE_PAGE = 16,
  GET_ARTICLE_PAGE_REPLY = 17,
  MODIFY_BANK_ACCOUNT = 18,
  MODIFY_BANK_ACCOUNT_REPLY = 19,
  GET_AGENT_BANK_ACCOUNTS = 20,
  GET_AGENT_BANK_ACCOUNTS_REPLY = 21,
  GET_TRANSACTION = 22,
  GET_TRANSACTION_REPLY = 23,
  GET_TRANSACTION_DETAIL = 24,
  GET_TRANSACTION_DETAIL_REPLY = 25,
  TOPUP = 26,
  TOPUP_REPLY = 27,
  TOPUP_GAME = 28,
  TOPUP_GAME_REPLY = 29,
  TRANSFER_M2M = 30,
  TRANSFER_M2M_REPLY = 31,
  TRANSFER_M2C = 32,
  TRANSFER_M2C_REPLY = 33,
  GET_BILL_INFO = 34,
  GET_BILL_INFO_REPLY = 35,
  PAY_BILL = 36,
  PAY_BILL_REPLY = 37,
  BANK_IN = 38,
  BANK_IN_REPLY = 39,
  BANK_OUT = 40,
  BANK_OUT_REPLY = 41,
  BANK_NET_TO_MOMO = 42,
  BANK_NET_TO_MOMO_REPLY = 43,
  VERIFY_BANKNET_OTP = 44,
  VERIFY_BANKNET_OTP_REPLY = 45,
  GET_STORE_AROUND = 46,
  GET_STORE_AROUND_REPLY = 47,
  SAVE_BILL = 48,
  SAVE_BILL_REPLY = 49,
  KEY_VALUE_DATA = 50,
  KEY_VALUE_DATA_REPLY = 51,
  GET_STORE_BY_CODE = 52,
  GET_STORE_BY_CODE_REPLY = 53,
  PAY_123MUA_ORDER = 54,
  PAY_123MUA_ORDER_REPLY = 55,
  UPDATE_AGENT_INFO = 56,
  UPDATE_AGENT_INFO_REPLY = 57,
  DEPOSIT_WITHDRAW_AT_PLACE = 58,
  DEPOSIT_WITHDRAW_AT_PLACE_REPLY = 59,
  GET_AVATAR_UPLOAD_TOKEN = 60,
  GET_AVATAR_UPLOAD_TOKEN_REPLY = 61,
  GET_SAVED_BILL = 62,
  GET_SAVED_BILL_REPLY = 63,
  REMOVE_SAVED_BILL = 64,
  REMOVE_SAVED_BILL_REPLY = 65,
  GET_TRANSACTION_FEE = 66,
  GET_TRANSACTION_FEE_REPLY = 67,
  PAY_AIRLINE_TICKET = 68,
  PAY_AIRLINE_TICKET_REPLY = 69,
  SEND_SMS = 70,
  SEND_SMS_REPLY = 71,
  WITHDRAW_BY_AGENT = 72,
  WITHDRAW_BY_AGENT_REPLY = 73,
  BANK_OUT_MANUAL = 74,
  BANK_OUT_MANUAL_REPLY = 75,
  IS_MOMOER = 76,
  IS_MOMOER_REPLY = 77,
  COUNT_AGENT_TRAN = 78,
  COUNT_AGENT_TRAN_REPLY = 79,
  MAKE_TRAN = 80,
  MAKE_TRAN_REPLY = 81,
  GET_SERVICE_LAYOUT = 82,
  GET_SERVICE_LAYOUT_REPLY = 83,
  COMPLETE_TRAN = 84,
  COMPLETE_TRAN_REPLY = 85,
  DO_TRAN = 86,
  DO_TRAN_REPLY = 87,
  GET_SERVICE = 88,
  GET_SERVICE_REPLY = 89
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = ERROR;
const CommandType CommandType_MAX = GET_SERVICE_REPLY;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
enum MoneyResource {
  MOMO = 1,
  BANKLINKED = 2,
  MASTERCARD = 3,
  VISA = 4,
  BANK_NET_2_VERIFY_OTP = 5
};
bool MoneyResource_IsValid(int value);
const MoneyResource MoneyResource_MIN = MOMO;
const MoneyResource MoneyResource_MAX = BANK_NET_2_VERIFY_OTP;
const int MoneyResource_ARRAYSIZE = MoneyResource_MAX + 1;

const ::google::protobuf::EnumDescriptor* MoneyResource_descriptor();
inline const ::std::string& MoneyResource_Name(MoneyResource value) {
  return ::google::protobuf::internal::NameOfEnum(
    MoneyResource_descriptor(), value);
}
inline bool MoneyResource_Parse(
    const ::std::string& name, MoneyResource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MoneyResource>(
    MoneyResource_descriptor(), name, value);
}
enum TransactionStatus {
  SUCCESS = 1,
  FAILED = 2,
  PROCESS = 3,
  CANCELLED = 4,
  UNKNOWN_STATUS = 100
};
bool TransactionStatus_IsValid(int value);
const TransactionStatus TransactionStatus_MIN = SUCCESS;
const TransactionStatus TransactionStatus_MAX = UNKNOWN_STATUS;
const int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor();
inline const ::std::string& TransactionStatus_Name(TransactionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionStatus_descriptor(), value);
}
inline bool TransactionStatus_Parse(
    const ::std::string& name, TransactionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
enum TransactionType {
  BANK_IN_TYPE = 1,
  BANK_OUT_TYPE = 2,
  TOP_UP_TYPE = 3,
  TOP_UP_GAME_TYPE = 4,
  M2C_TYPE = 5,
  M2M_TYPE = 6,
  PAY_ONE_BILL_TYPE = 7,
  QUICK_PAYMENT_TYPE = 8,
  QUICK_DEPOSIT_TYPE = 9,
  BANK_NET_TO_MOMO_TYPE = 10,
  WITHDRAW_TO_AGENT = 13,
  PAY_TELEPHONE_BILL_TYPE = 14,
  PAY_AIRLINE_TICKET_TYPE = 15,
  BANK_OUT_MANUAL_TYPE = 26,
  DEPOSIT_AT_PLACE_TYPE = 27,
  WITHDRAW_AT_HOME_TYPE = 28,
  BONUS_TYPE = 29,
  FEE_TYPE = 30,
  PHIM123_TYPE = 31,
  PAY_NUOCCL_BILL_TYPE = 32,
  PAY_AVG_BILL_TYPE = 33,
  UNKNOWN_TYPE = 100
};
bool TransactionType_IsValid(int value);
const TransactionType TransactionType_MIN = BANK_IN_TYPE;
const TransactionType TransactionType_MAX = UNKNOWN_TYPE;
const int TransactionType_ARRAYSIZE = TransactionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionType_descriptor();
inline const ::std::string& TransactionType_Name(TransactionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionType_descriptor(), value);
}
inline bool TransactionType_Parse(
    const ::std::string& name, TransactionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionType>(
    TransactionType_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Error)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class SendOtp : public ::google::protobuf::Message {
 public:
  SendOtp();
  virtual ~SendOtp();

  SendOtp(const SendOtp& from);

  inline SendOtp& operator=(const SendOtp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendOtp& default_instance();

  void Swap(SendOtp* other);

  // implements Message ----------------------------------------------

  SendOtp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendOtp& from);
  void MergeFrom(const SendOtp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.SendOtp)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static SendOtp* default_instance_;
};
// -------------------------------------------------------------------

class SendOtpReply : public ::google::protobuf::Message {
 public:
  SendOtpReply();
  virtual ~SendOtpReply();

  SendOtpReply(const SendOtpReply& from);

  inline SendOtpReply& operator=(const SendOtpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendOtpReply& default_instance();

  void Swap(SendOtpReply* other);

  // implements Message ----------------------------------------------

  SendOtpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendOtpReply& from);
  void MergeFrom(const SendOtpReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string otp = 2;
  inline bool has_otp() const;
  inline void clear_otp();
  static const int kOtpFieldNumber = 2;
  inline const ::std::string& otp() const;
  inline void set_otp(const ::std::string& value);
  inline void set_otp(const char* value);
  inline void set_otp(const char* value, size_t size);
  inline ::std::string* mutable_otp();
  inline ::std::string* release_otp();
  inline void set_allocated_otp(::std::string* otp);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.SendOtpReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_otp();
  inline void clear_has_otp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* otp_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static SendOtpReply* default_instance_;
};
// -------------------------------------------------------------------

class VerifyOtp : public ::google::protobuf::Message {
 public:
  VerifyOtp();
  virtual ~VerifyOtp();

  VerifyOtp(const VerifyOtp& from);

  inline VerifyOtp& operator=(const VerifyOtp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyOtp& default_instance();

  void Swap(VerifyOtp* other);

  // implements Message ----------------------------------------------

  VerifyOtp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyOtp& from);
  void MergeFrom(const VerifyOtp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string otp = 2;
  inline bool has_otp() const;
  inline void clear_otp();
  static const int kOtpFieldNumber = 2;
  inline const ::std::string& otp() const;
  inline void set_otp(const ::std::string& value);
  inline void set_otp(const char* value);
  inline void set_otp(const char* value, size_t size);
  inline ::std::string* mutable_otp();
  inline ::std::string* release_otp();
  inline void set_allocated_otp(::std::string* otp);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.VerifyOtp)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_otp();
  inline void clear_has_otp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* otp_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static VerifyOtp* default_instance_;
};
// -------------------------------------------------------------------

class VerifyOtpReply : public ::google::protobuf::Message {
 public:
  VerifyOtpReply();
  virtual ~VerifyOtpReply();

  VerifyOtpReply(const VerifyOtpReply& from);

  inline VerifyOtpReply& operator=(const VerifyOtpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyOtpReply& default_instance();

  void Swap(VerifyOtpReply* other);

  // implements Message ----------------------------------------------

  VerifyOtpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyOtpReply& from);
  void MergeFrom(const VerifyOtpReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VerifyOtpReply_ResultCode ResultCode;
  static const ResultCode SUCCESS = VerifyOtpReply_ResultCode_SUCCESS;
  static const ResultCode NOT_MATCH = VerifyOtpReply_ResultCode_NOT_MATCH;
  static const ResultCode OUT_OF_TIME = VerifyOtpReply_ResultCode_OUT_OF_TIME;
  static inline bool ResultCode_IsValid(int value) {
    return VerifyOtpReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    VerifyOtpReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    VerifyOtpReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    VerifyOtpReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return VerifyOtpReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return VerifyOtpReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return VerifyOtpReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.VerifyOtpReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::VerifyOtpReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::VerifyOtpReply_ResultCode value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.VerifyOtpReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static VerifyOtpReply* default_instance_;
};
// -------------------------------------------------------------------

class Register : public ::google::protobuf::Message {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();

  void Swap(Register* other);

  // implements Message ----------------------------------------------

  Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string cardId = 3;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 3;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  inline void set_allocated_cardid(::std::string* cardid);

  // required string pin = 4;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 4;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // optional string email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string question = 6;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 6;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const char* value, size_t size);
  inline ::std::string* mutable_question();
  inline ::std::string* release_question();
  inline void set_allocated_question(::std::string* question);

  // optional string answer = 7;
  inline bool has_answer() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 7;
  inline const ::std::string& answer() const;
  inline void set_answer(const ::std::string& value);
  inline void set_answer(const char* value);
  inline void set_answer(const char* value, size_t size);
  inline ::std::string* mutable_answer();
  inline ::std::string* release_answer();
  inline void set_allocated_answer(::std::string* answer);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Register)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_question();
  inline void clear_has_question();
  inline void set_has_answer();
  inline void clear_has_answer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* cardid_;
  ::std::string* pin_;
  ::std::string* email_;
  ::std::string* question_;
  ::std::string* answer_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class RegisterReply : public ::google::protobuf::Message {
 public:
  RegisterReply();
  virtual ~RegisterReply();

  RegisterReply(const RegisterReply& from);

  inline RegisterReply& operator=(const RegisterReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterReply& default_instance();

  void Swap(RegisterReply* other);

  // implements Message ----------------------------------------------

  RegisterReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterReply& from);
  void MergeFrom(const RegisterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RegisterReply_ResultCode ResultCode;
  static const ResultCode SUCCESS = RegisterReply_ResultCode_SUCCESS;
  static const ResultCode NUMBER_EXISTED = RegisterReply_ResultCode_NUMBER_EXISTED;
  static inline bool ResultCode_IsValid(int value) {
    return RegisterReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    RegisterReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    RegisterReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    RegisterReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return RegisterReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return RegisterReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return RegisterReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.RegisterReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::RegisterReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::RegisterReply_ResultCode value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.RegisterReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static RegisterReply* default_instance_;
};
// -------------------------------------------------------------------

class GetAgentInfo : public ::google::protobuf::Message {
 public:
  GetAgentInfo();
  virtual ~GetAgentInfo();

  GetAgentInfo(const GetAgentInfo& from);

  inline GetAgentInfo& operator=(const GetAgentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAgentInfo& default_instance();

  void Swap(GetAgentInfo* other);

  // implements Message ----------------------------------------------

  GetAgentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAgentInfo& from);
  void MergeFrom(const GetAgentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetAgentInfo)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetAgentInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetAgentInfoReply : public ::google::protobuf::Message {
 public:
  GetAgentInfoReply();
  virtual ~GetAgentInfoReply();

  GetAgentInfoReply(const GetAgentInfoReply& from);

  inline GetAgentInfoReply& operator=(const GetAgentInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAgentInfoReply& default_instance();

  void Swap(GetAgentInfoReply* other);

  // implements Message ----------------------------------------------

  GetAgentInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAgentInfoReply& from);
  void MergeFrom(const GetAgentInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string cardId = 3;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 3;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  inline void set_allocated_cardid(::std::string* cardid);

  // optional string pin = 4;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 4;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // optional string email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string question = 6;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 6;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const char* value, size_t size);
  inline ::std::string* mutable_question();
  inline ::std::string* release_question();
  inline void set_allocated_question(::std::string* question);

  // optional string answer = 7;
  inline bool has_answer() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 7;
  inline const ::std::string& answer() const;
  inline void set_answer(const ::std::string& value);
  inline void set_answer(const char* value);
  inline void set_answer(const char* value, size_t size);
  inline ::std::string* mutable_answer();
  inline ::std::string* release_answer();
  inline void set_allocated_answer(::std::string* answer);

  // optional string bankAccount = 8;
  inline bool has_bankaccount() const;
  inline void clear_bankaccount();
  static const int kBankAccountFieldNumber = 8;
  inline const ::std::string& bankaccount() const;
  inline void set_bankaccount(const ::std::string& value);
  inline void set_bankaccount(const char* value);
  inline void set_bankaccount(const char* value, size_t size);
  inline ::std::string* mutable_bankaccount();
  inline ::std::string* release_bankaccount();
  inline void set_allocated_bankaccount(::std::string* bankaccount);

  // optional string bankCode = 9;
  inline bool has_bankcode() const;
  inline void clear_bankcode();
  static const int kBankCodeFieldNumber = 9;
  inline const ::std::string& bankcode() const;
  inline void set_bankcode(const ::std::string& value);
  inline void set_bankcode(const char* value);
  inline void set_bankcode(const char* value, size_t size);
  inline ::std::string* mutable_bankcode();
  inline ::std::string* release_bankcode();
  inline void set_allocated_bankcode(::std::string* bankcode);

  // optional string bankName = 10;
  inline bool has_bankname() const;
  inline void clear_bankname();
  static const int kBankNameFieldNumber = 10;
  inline const ::std::string& bankname() const;
  inline void set_bankname(const ::std::string& value);
  inline void set_bankname(const char* value);
  inline void set_bankname(const char* value, size_t size);
  inline ::std::string* mutable_bankname();
  inline ::std::string* release_bankname();
  inline void set_allocated_bankname(::std::string* bankname);

  // optional uint64 point = 11;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 11;
  inline ::google::protobuf::uint64 point() const;
  inline void set_point(::google::protobuf::uint64 value);

  // optional uint64 momo = 12;
  inline bool has_momo() const;
  inline void clear_momo();
  static const int kMomoFieldNumber = 12;
  inline ::google::protobuf::uint64 momo() const;
  inline void set_momo(::google::protobuf::uint64 value);

  // optional uint64 mload = 13;
  inline bool has_mload() const;
  inline void clear_mload();
  static const int kMloadFieldNumber = 13;
  inline ::google::protobuf::uint64 mload() const;
  inline void set_mload(::google::protobuf::uint64 value);

  // optional bool isNamedAccount = 14;
  inline bool has_isnamedaccount() const;
  inline void clear_isnamedaccount();
  static const int kIsNamedAccountFieldNumber = 14;
  inline bool isnamedaccount() const;
  inline void set_isnamedaccount(bool value);

  // optional bool isActive = 15;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 15;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // optional string birthday = 16;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 16;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // optional string address = 17;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 17;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional uint64 createdDate = 18;
  inline bool has_createddate() const;
  inline void clear_createddate();
  static const int kCreatedDateFieldNumber = 18;
  inline ::google::protobuf::uint64 createddate() const;
  inline void set_createddate(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetAgentInfoReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_question();
  inline void clear_has_question();
  inline void set_has_answer();
  inline void clear_has_answer();
  inline void set_has_bankaccount();
  inline void clear_has_bankaccount();
  inline void set_has_bankcode();
  inline void clear_has_bankcode();
  inline void set_has_bankname();
  inline void clear_has_bankname();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_momo();
  inline void clear_has_momo();
  inline void set_has_mload();
  inline void clear_has_mload();
  inline void set_has_isnamedaccount();
  inline void clear_has_isnamedaccount();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_createddate();
  inline void clear_has_createddate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* cardid_;
  ::std::string* pin_;
  ::std::string* email_;
  ::std::string* question_;
  ::std::string* answer_;
  ::std::string* bankaccount_;
  ::std::string* bankcode_;
  ::std::string* bankname_;
  ::google::protobuf::uint32 phonenumber_;
  bool isnamedaccount_;
  bool isactive_;
  ::google::protobuf::uint64 point_;
  ::google::protobuf::uint64 momo_;
  ::google::protobuf::uint64 mload_;
  ::std::string* birthday_;
  ::std::string* address_;
  ::google::protobuf::uint64 createddate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetAgentInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class IsPinCorrect : public ::google::protobuf::Message {
 public:
  IsPinCorrect();
  virtual ~IsPinCorrect();

  IsPinCorrect(const IsPinCorrect& from);

  inline IsPinCorrect& operator=(const IsPinCorrect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsPinCorrect& default_instance();

  void Swap(IsPinCorrect* other);

  // implements Message ----------------------------------------------

  IsPinCorrect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsPinCorrect& from);
  void MergeFrom(const IsPinCorrect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // optional string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.IsPinCorrect)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static IsPinCorrect* default_instance_;
};
// -------------------------------------------------------------------

class IsPinCorrectReply : public ::google::protobuf::Message {
 public:
  IsPinCorrectReply();
  virtual ~IsPinCorrectReply();

  IsPinCorrectReply(const IsPinCorrectReply& from);

  inline IsPinCorrectReply& operator=(const IsPinCorrectReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsPinCorrectReply& default_instance();

  void Swap(IsPinCorrectReply* other);

  // implements Message ----------------------------------------------

  IsPinCorrectReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsPinCorrectReply& from);
  void MergeFrom(const IsPinCorrectReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IsPinCorrectReply_ResultCode ResultCode;
  static const ResultCode CORRECT = IsPinCorrectReply_ResultCode_CORRECT;
  static const ResultCode INCORRECT = IsPinCorrectReply_ResultCode_INCORRECT;
  static const ResultCode AUTH_EXPIRED = IsPinCorrectReply_ResultCode_AUTH_EXPIRED;
  static const ResultCode AUTH_RETRY_EXCEED = IsPinCorrectReply_ResultCode_AUTH_RETRY_EXCEED;
  static inline bool ResultCode_IsValid(int value) {
    return IsPinCorrectReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    IsPinCorrectReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    IsPinCorrectReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    IsPinCorrectReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return IsPinCorrectReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return IsPinCorrectReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return IsPinCorrectReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.IsPinCorrectReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::IsPinCorrectReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::IsPinCorrectReply_ResultCode value);

  // optional uint64 locktill = 3;
  inline bool has_locktill() const;
  inline void clear_locktill();
  static const int kLocktillFieldNumber = 3;
  inline ::google::protobuf::uint64 locktill() const;
  inline void set_locktill(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.IsPinCorrectReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_locktill();
  inline void clear_has_locktill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::google::protobuf::uint64 locktill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static IsPinCorrectReply* default_instance_;
};
// -------------------------------------------------------------------

class ChangePin : public ::google::protobuf::Message {
 public:
  ChangePin();
  virtual ~ChangePin();

  ChangePin(const ChangePin& from);

  inline ChangePin& operator=(const ChangePin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePin& default_instance();

  void Swap(ChangePin* other);

  // implements Message ----------------------------------------------

  ChangePin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePin& from);
  void MergeFrom(const ChangePin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string oldPin = 2;
  inline bool has_oldpin() const;
  inline void clear_oldpin();
  static const int kOldPinFieldNumber = 2;
  inline const ::std::string& oldpin() const;
  inline void set_oldpin(const ::std::string& value);
  inline void set_oldpin(const char* value);
  inline void set_oldpin(const char* value, size_t size);
  inline ::std::string* mutable_oldpin();
  inline ::std::string* release_oldpin();
  inline void set_allocated_oldpin(::std::string* oldpin);

  // required string newPin = 3;
  inline bool has_newpin() const;
  inline void clear_newpin();
  static const int kNewPinFieldNumber = 3;
  inline const ::std::string& newpin() const;
  inline void set_newpin(const ::std::string& value);
  inline void set_newpin(const char* value);
  inline void set_newpin(const char* value, size_t size);
  inline ::std::string* mutable_newpin();
  inline ::std::string* release_newpin();
  inline void set_allocated_newpin(::std::string* newpin);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.ChangePin)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_oldpin();
  inline void clear_has_oldpin();
  inline void set_has_newpin();
  inline void clear_has_newpin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* oldpin_;
  ::std::string* newpin_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static ChangePin* default_instance_;
};
// -------------------------------------------------------------------

class ChangePinReply : public ::google::protobuf::Message {
 public:
  ChangePinReply();
  virtual ~ChangePinReply();

  ChangePinReply(const ChangePinReply& from);

  inline ChangePinReply& operator=(const ChangePinReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePinReply& default_instance();

  void Swap(ChangePinReply* other);

  // implements Message ----------------------------------------------

  ChangePinReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePinReply& from);
  void MergeFrom(const ChangePinReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChangePinReply_ResultCode ResultCode;
  static const ResultCode SUCCESS = ChangePinReply_ResultCode_SUCCESS;
  static const ResultCode PIN_INCORRECT = ChangePinReply_ResultCode_PIN_INCORRECT;
  static const ResultCode BAD_PASSWORD = ChangePinReply_ResultCode_BAD_PASSWORD;
  static const ResultCode SAME_PASSWORD = ChangePinReply_ResultCode_SAME_PASSWORD;
  static const ResultCode PASSWORD_PREVIOUS_USED = ChangePinReply_ResultCode_PASSWORD_PREVIOUS_USED;
  static inline bool ResultCode_IsValid(int value) {
    return ChangePinReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    ChangePinReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    ChangePinReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    ChangePinReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return ChangePinReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return ChangePinReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return ChangePinReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.ChangePinReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::ChangePinReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::ChangePinReply_ResultCode value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.ChangePinReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static ChangePinReply* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAgentInfo : public ::google::protobuf::Message {
 public:
  UpdateAgentInfo();
  virtual ~UpdateAgentInfo();

  UpdateAgentInfo(const UpdateAgentInfo& from);

  inline UpdateAgentInfo& operator=(const UpdateAgentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAgentInfo& default_instance();

  void Swap(UpdateAgentInfo* other);

  // implements Message ----------------------------------------------

  UpdateAgentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAgentInfo& from);
  void MergeFrom(const UpdateAgentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string email = 4;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 4;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string cardId = 5;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 5;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  inline void set_allocated_cardid(::std::string* cardid);

  // optional string dob = 6;
  inline bool has_dob() const;
  inline void clear_dob();
  static const int kDobFieldNumber = 6;
  inline const ::std::string& dob() const;
  inline void set_dob(const ::std::string& value);
  inline void set_dob(const char* value);
  inline void set_dob(const char* value, size_t size);
  inline ::std::string* mutable_dob();
  inline ::std::string* release_dob();
  inline void set_allocated_dob(::std::string* dob);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.UpdateAgentInfo)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_dob();
  inline void clear_has_dob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* address_;
  ::std::string* email_;
  ::std::string* cardid_;
  ::std::string* dob_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static UpdateAgentInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAgentInfoReply : public ::google::protobuf::Message {
 public:
  UpdateAgentInfoReply();
  virtual ~UpdateAgentInfoReply();

  UpdateAgentInfoReply(const UpdateAgentInfoReply& from);

  inline UpdateAgentInfoReply& operator=(const UpdateAgentInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAgentInfoReply& default_instance();

  void Swap(UpdateAgentInfoReply* other);

  // implements Message ----------------------------------------------

  UpdateAgentInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAgentInfoReply& from);
  void MergeFrom(const UpdateAgentInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UpdateAgentInfoReply_ResultCode ResultCode;
  static const ResultCode SUCCESS = UpdateAgentInfoReply_ResultCode_SUCCESS;
  static const ResultCode FAIL = UpdateAgentInfoReply_ResultCode_FAIL;
  static inline bool ResultCode_IsValid(int value) {
    return UpdateAgentInfoReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    UpdateAgentInfoReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    UpdateAgentInfoReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    UpdateAgentInfoReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return UpdateAgentInfoReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return UpdateAgentInfoReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return UpdateAgentInfoReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.UpdateAgentInfoReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.UpdateAgentInfoReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static UpdateAgentInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class Article : public ::google::protobuf::Message {
 public:
  Article();
  virtual ~Article();

  Article(const Article& from);

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Article& default_instance();

  void Swap(Article* other);

  // implements Message ----------------------------------------------

  Article* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // optional uint64 postDate = 3;
  inline bool has_postdate() const;
  inline void clear_postdate();
  static const int kPostDateFieldNumber = 3;
  inline ::google::protobuf::uint64 postdate() const;
  inline void set_postdate(::google::protobuf::uint64 value);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string summary = 5;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 5;
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional string detail = 6;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 6;
  inline const ::std::string& detail() const;
  inline void set_detail(const ::std::string& value);
  inline void set_detail(const char* value);
  inline void set_detail(const char* value, size_t size);
  inline ::std::string* mutable_detail();
  inline ::std::string* release_detail();
  inline void set_allocated_detail(::std::string* detail);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Article)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_postdate();
  inline void clear_has_postdate();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 postdate_;
  ::std::string* title_;
  ::std::string* summary_;
  ::std::string* detail_;
  bool active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Article* default_instance_;
};
// -------------------------------------------------------------------

class ModifyArticle : public ::google::protobuf::Message {
 public:
  ModifyArticle();
  virtual ~ModifyArticle();

  ModifyArticle(const ModifyArticle& from);

  inline ModifyArticle& operator=(const ModifyArticle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyArticle& default_instance();

  void Swap(ModifyArticle* other);

  // implements Message ----------------------------------------------

  ModifyArticle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyArticle& from);
  void MergeFrom(const ModifyArticle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModifyArticle_Command Command;
  static const Command ADD = ModifyArticle_Command_ADD;
  static const Command UPDATE = ModifyArticle_Command_UPDATE;
  static const Command DELETE = ModifyArticle_Command_DELETE;
  static inline bool Command_IsValid(int value) {
    return ModifyArticle_Command_IsValid(value);
  }
  static const Command Command_MIN =
    ModifyArticle_Command_Command_MIN;
  static const Command Command_MAX =
    ModifyArticle_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    ModifyArticle_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return ModifyArticle_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return ModifyArticle_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return ModifyArticle_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.mservice.momo.msg.ModifyArticle.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::com::mservice::momo::msg::ModifyArticle_Command command() const;
  inline void set_command(::com::mservice::momo::msg::ModifyArticle_Command value);

  // required .com.mservice.momo.msg.Article article = 2;
  inline bool has_article() const;
  inline void clear_article();
  static const int kArticleFieldNumber = 2;
  inline const ::com::mservice::momo::msg::Article& article() const;
  inline ::com::mservice::momo::msg::Article* mutable_article();
  inline ::com::mservice::momo::msg::Article* release_article();
  inline void set_allocated_article(::com::mservice::momo::msg::Article* article);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.ModifyArticle)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_article();
  inline void clear_has_article();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::mservice::momo::msg::Article* article_;
  int command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static ModifyArticle* default_instance_;
};
// -------------------------------------------------------------------

class ModifyArticleReply : public ::google::protobuf::Message {
 public:
  ModifyArticleReply();
  virtual ~ModifyArticleReply();

  ModifyArticleReply(const ModifyArticleReply& from);

  inline ModifyArticleReply& operator=(const ModifyArticleReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyArticleReply& default_instance();

  void Swap(ModifyArticleReply* other);

  // implements Message ----------------------------------------------

  ModifyArticleReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyArticleReply& from);
  void MergeFrom(const ModifyArticleReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModifyArticleReply_ResultCode ResultCode;
  static const ResultCode SUCCESS = ModifyArticleReply_ResultCode_SUCCESS;
  static const ResultCode NOT_FOUND = ModifyArticleReply_ResultCode_NOT_FOUND;
  static inline bool ResultCode_IsValid(int value) {
    return ModifyArticleReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    ModifyArticleReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    ModifyArticleReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    ModifyArticleReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return ModifyArticleReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return ModifyArticleReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return ModifyArticleReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.mservice.momo.msg.ModifyArticleReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::ModifyArticleReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::ModifyArticleReply_ResultCode value);

  // optional .com.mservice.momo.msg.Article article = 3;
  inline bool has_article() const;
  inline void clear_article();
  static const int kArticleFieldNumber = 3;
  inline const ::com::mservice::momo::msg::Article& article() const;
  inline ::com::mservice::momo::msg::Article* mutable_article();
  inline ::com::mservice::momo::msg::Article* release_article();
  inline void set_allocated_article(::com::mservice::momo::msg::Article* article);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.ModifyArticleReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_article();
  inline void clear_has_article();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::mservice::momo::msg::Article* article_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static ModifyArticleReply* default_instance_;
};
// -------------------------------------------------------------------

class GetArticlePage : public ::google::protobuf::Message {
 public:
  GetArticlePage();
  virtual ~GetArticlePage();

  GetArticlePage(const GetArticlePage& from);

  inline GetArticlePage& operator=(const GetArticlePage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetArticlePage& default_instance();

  void Swap(GetArticlePage* other);

  // implements Message ----------------------------------------------

  GetArticlePage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetArticlePage& from);
  void MergeFrom(const GetArticlePage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pageSize = 1;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // required uint32 pageNumber = 2;
  inline bool has_pagenumber() const;
  inline void clear_pagenumber();
  static const int kPageNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 pagenumber() const;
  inline void set_pagenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetArticlePage)
 private:
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_pagenumber();
  inline void clear_has_pagenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pagesize_;
  ::google::protobuf::uint32 pagenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetArticlePage* default_instance_;
};
// -------------------------------------------------------------------

class GetArticlePageReply : public ::google::protobuf::Message {
 public:
  GetArticlePageReply();
  virtual ~GetArticlePageReply();

  GetArticlePageReply(const GetArticlePageReply& from);

  inline GetArticlePageReply& operator=(const GetArticlePageReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetArticlePageReply& default_instance();

  void Swap(GetArticlePageReply* other);

  // implements Message ----------------------------------------------

  GetArticlePageReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetArticlePageReply& from);
  void MergeFrom(const GetArticlePageReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pageCount = 1;
  inline bool has_pagecount() const;
  inline void clear_pagecount();
  static const int kPageCountFieldNumber = 1;
  inline ::google::protobuf::uint32 pagecount() const;
  inline void set_pagecount(::google::protobuf::uint32 value);

  // repeated .com.mservice.momo.msg.Article articles = 2;
  inline int articles_size() const;
  inline void clear_articles();
  static const int kArticlesFieldNumber = 2;
  inline const ::com::mservice::momo::msg::Article& articles(int index) const;
  inline ::com::mservice::momo::msg::Article* mutable_articles(int index);
  inline ::com::mservice::momo::msg::Article* add_articles();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Article >&
      articles() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Article >*
      mutable_articles();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetArticlePageReply)
 private:
  inline void set_has_pagecount();
  inline void clear_has_pagecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Article > articles_;
  ::google::protobuf::uint32 pagecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetArticlePageReply* default_instance_;
};
// -------------------------------------------------------------------

class BankAccount : public ::google::protobuf::Message {
 public:
  BankAccount();
  virtual ~BankAccount();

  BankAccount(const BankAccount& from);

  inline BankAccount& operator=(const BankAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankAccount& default_instance();

  void Swap(BankAccount* other);

  // implements Message ----------------------------------------------

  BankAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankAccount& from);
  void MergeFrom(const BankAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 2;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string accountId = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 3;
  inline const ::std::string& accountid() const;
  inline void set_accountid(const ::std::string& value);
  inline void set_accountid(const char* value);
  inline void set_accountid(const char* value, size_t size);
  inline ::std::string* mutable_accountid();
  inline ::std::string* release_accountid();
  inline void set_allocated_accountid(::std::string* accountid);

  // optional string bankName = 4;
  inline bool has_bankname() const;
  inline void clear_bankname();
  static const int kBankNameFieldNumber = 4;
  inline const ::std::string& bankname() const;
  inline void set_bankname(const ::std::string& value);
  inline void set_bankname(const char* value);
  inline void set_bankname(const char* value, size_t size);
  inline ::std::string* mutable_bankname();
  inline ::std::string* release_bankname();
  inline void set_allocated_bankname(::std::string* bankname);

  // optional string ownerName = 5;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnerNameFieldNumber = 5;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const char* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // optional uint64 createdDate = 6;
  inline bool has_createddate() const;
  inline void clear_createddate();
  static const int kCreatedDateFieldNumber = 6;
  inline ::google::protobuf::uint64 createddate() const;
  inline void set_createddate(::google::protobuf::uint64 value);

  // optional string bankId = 7;
  inline bool has_bankid() const;
  inline void clear_bankid();
  static const int kBankIdFieldNumber = 7;
  inline const ::std::string& bankid() const;
  inline void set_bankid(const ::std::string& value);
  inline void set_bankid(const char* value);
  inline void set_bankid(const char* value, size_t size);
  inline ::std::string* mutable_bankid();
  inline ::std::string* release_bankid();
  inline void set_allocated_bankid(::std::string* bankid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankAccount)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_bankname();
  inline void clear_has_bankname();
  inline void set_has_ownername();
  inline void clear_has_ownername();
  inline void set_has_createddate();
  inline void clear_has_createddate();
  inline void set_has_bankid();
  inline void clear_has_bankid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountid_;
  ::std::string* bankname_;
  ::std::string* ownername_;
  ::google::protobuf::uint64 createddate_;
  ::std::string* bankid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankAccount* default_instance_;
};
// -------------------------------------------------------------------

class ModifyBankAccount : public ::google::protobuf::Message {
 public:
  ModifyBankAccount();
  virtual ~ModifyBankAccount();

  ModifyBankAccount(const ModifyBankAccount& from);

  inline ModifyBankAccount& operator=(const ModifyBankAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyBankAccount& default_instance();

  void Swap(ModifyBankAccount* other);

  // implements Message ----------------------------------------------

  ModifyBankAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyBankAccount& from);
  void MergeFrom(const ModifyBankAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModifyBankAccount_Command Command;
  static const Command ADD = ModifyBankAccount_Command_ADD;
  static const Command UPDATE = ModifyBankAccount_Command_UPDATE;
  static const Command DELETE = ModifyBankAccount_Command_DELETE;
  static inline bool Command_IsValid(int value) {
    return ModifyBankAccount_Command_IsValid(value);
  }
  static const Command Command_MIN =
    ModifyBankAccount_Command_Command_MIN;
  static const Command Command_MAX =
    ModifyBankAccount_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    ModifyBankAccount_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return ModifyBankAccount_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return ModifyBankAccount_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return ModifyBankAccount_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.mservice.momo.msg.ModifyBankAccount.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::com::mservice::momo::msg::ModifyBankAccount_Command command() const;
  inline void set_command(::com::mservice::momo::msg::ModifyBankAccount_Command value);

  // required .com.mservice.momo.msg.BankAccount account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::com::mservice::momo::msg::BankAccount& account() const;
  inline ::com::mservice::momo::msg::BankAccount* mutable_account();
  inline ::com::mservice::momo::msg::BankAccount* release_account();
  inline void set_allocated_account(::com::mservice::momo::msg::BankAccount* account);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.ModifyBankAccount)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::mservice::momo::msg::BankAccount* account_;
  int command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static ModifyBankAccount* default_instance_;
};
// -------------------------------------------------------------------

class ModifyBankAccountReply : public ::google::protobuf::Message {
 public:
  ModifyBankAccountReply();
  virtual ~ModifyBankAccountReply();

  ModifyBankAccountReply(const ModifyBankAccountReply& from);

  inline ModifyBankAccountReply& operator=(const ModifyBankAccountReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyBankAccountReply& default_instance();

  void Swap(ModifyBankAccountReply* other);

  // implements Message ----------------------------------------------

  ModifyBankAccountReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyBankAccountReply& from);
  void MergeFrom(const ModifyBankAccountReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModifyBankAccountReply_ResultCode ResultCode;
  static const ResultCode SUCCESS = ModifyBankAccountReply_ResultCode_SUCCESS;
  static const ResultCode NOT_FOUND = ModifyBankAccountReply_ResultCode_NOT_FOUND;
  static inline bool ResultCode_IsValid(int value) {
    return ModifyBankAccountReply_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    ModifyBankAccountReply_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    ModifyBankAccountReply_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    ModifyBankAccountReply_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return ModifyBankAccountReply_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return ModifyBankAccountReply_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return ModifyBankAccountReply_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.mservice.momo.msg.ModifyBankAccountReply.ResultCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode result() const;
  inline void set_result(::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode value);

  // optional .com.mservice.momo.msg.BankAccount bankAccount = 3;
  inline bool has_bankaccount() const;
  inline void clear_bankaccount();
  static const int kBankAccountFieldNumber = 3;
  inline const ::com::mservice::momo::msg::BankAccount& bankaccount() const;
  inline ::com::mservice::momo::msg::BankAccount* mutable_bankaccount();
  inline ::com::mservice::momo::msg::BankAccount* release_bankaccount();
  inline void set_allocated_bankaccount(::com::mservice::momo::msg::BankAccount* bankaccount);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.ModifyBankAccountReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bankaccount();
  inline void clear_has_bankaccount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::mservice::momo::msg::BankAccount* bankaccount_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static ModifyBankAccountReply* default_instance_;
};
// -------------------------------------------------------------------

class GetAgentBankAccounts : public ::google::protobuf::Message {
 public:
  GetAgentBankAccounts();
  virtual ~GetAgentBankAccounts();

  GetAgentBankAccounts(const GetAgentBankAccounts& from);

  inline GetAgentBankAccounts& operator=(const GetAgentBankAccounts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAgentBankAccounts& default_instance();

  void Swap(GetAgentBankAccounts* other);

  // implements Message ----------------------------------------------

  GetAgentBankAccounts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAgentBankAccounts& from);
  void MergeFrom(const GetAgentBankAccounts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetAgentBankAccounts)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetAgentBankAccounts* default_instance_;
};
// -------------------------------------------------------------------

class GetAgentBankAccountsReply : public ::google::protobuf::Message {
 public:
  GetAgentBankAccountsReply();
  virtual ~GetAgentBankAccountsReply();

  GetAgentBankAccountsReply(const GetAgentBankAccountsReply& from);

  inline GetAgentBankAccountsReply& operator=(const GetAgentBankAccountsReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAgentBankAccountsReply& default_instance();

  void Swap(GetAgentBankAccountsReply* other);

  // implements Message ----------------------------------------------

  GetAgentBankAccountsReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAgentBankAccountsReply& from);
  void MergeFrom(const GetAgentBankAccountsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mservice.momo.msg.BankAccount accounts = 2;
  inline int accounts_size() const;
  inline void clear_accounts();
  static const int kAccountsFieldNumber = 2;
  inline const ::com::mservice::momo::msg::BankAccount& accounts(int index) const;
  inline ::com::mservice::momo::msg::BankAccount* mutable_accounts(int index);
  inline ::com::mservice::momo::msg::BankAccount* add_accounts();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BankAccount >&
      accounts() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BankAccount >*
      mutable_accounts();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetAgentBankAccountsReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BankAccount > accounts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetAgentBankAccountsReply* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  Transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional string partnerName = 4;
  inline bool has_partnername() const;
  inline void clear_partnername();
  static const int kPartnerNameFieldNumber = 4;
  inline const ::std::string& partnername() const;
  inline void set_partnername(const ::std::string& value);
  inline void set_partnername(const char* value);
  inline void set_partnername(const char* value, size_t size);
  inline ::std::string* mutable_partnername();
  inline ::std::string* release_partnername();
  inline void set_allocated_partnername(::std::string* partnername);

  // optional .com.mservice.momo.msg.TransactionType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::com::mservice::momo::msg::TransactionType type() const;
  inline void set_type(::com::mservice::momo::msg::TransactionType value);

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::com::mservice::momo::msg::TransactionStatus status() const;
  inline void set_status(::com::mservice::momo::msg::TransactionStatus value);

  // optional string partnerId = 7;
  inline bool has_partnerid() const;
  inline void clear_partnerid();
  static const int kPartnerIdFieldNumber = 7;
  inline const ::std::string& partnerid() const;
  inline void set_partnerid(const ::std::string& value);
  inline void set_partnerid(const char* value);
  inline void set_partnerid(const char* value, size_t size);
  inline ::std::string* mutable_partnerid();
  inline ::std::string* release_partnerid();
  inline void set_allocated_partnerid(::std::string* partnerid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Transaction)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_partnername();
  inline void clear_has_partnername();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_partnerid();
  inline void clear_has_partnerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 amount_;
  ::std::string* partnername_;
  int type_;
  int status_;
  ::std::string* partnerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class GetTransaction : public ::google::protobuf::Message {
 public:
  GetTransaction();
  virtual ~GetTransaction();

  GetTransaction(const GetTransaction& from);

  inline GetTransaction& operator=(const GetTransaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransaction& default_instance();

  void Swap(GetTransaction* other);

  // implements Message ----------------------------------------------

  GetTransaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTransaction& from);
  void MergeFrom(const GetTransaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required uint32 pageSize = 2;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // required uint32 pageNumber = 3;
  inline bool has_pagenumber() const;
  inline void clear_pagenumber();
  static const int kPageNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 pagenumber() const;
  inline void set_pagenumber(::google::protobuf::uint32 value);

  // optional uint64 startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 endTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::com::mservice::momo::msg::TransactionStatus status() const;
  inline void set_status(::com::mservice::momo::msg::TransactionStatus value);

  // repeated .com.mservice.momo.msg.TransactionType type = 7;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::com::mservice::momo::msg::TransactionType type(int index) const;
  inline void set_type(int index, ::com::mservice::momo::msg::TransactionType value);
  inline void add_type(::com::mservice::momo::msg::TransactionType value);
  inline const ::google::protobuf::RepeatedField<int>& type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_type();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetTransaction)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_pagenumber();
  inline void clear_has_pagenumber();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 pagesize_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint32 pagenumber_;
  int status_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::RepeatedField<int> type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetTransaction* default_instance_;
};
// -------------------------------------------------------------------

class GetTransactionReply : public ::google::protobuf::Message {
 public:
  GetTransactionReply();
  virtual ~GetTransactionReply();

  GetTransactionReply(const GetTransactionReply& from);

  inline GetTransactionReply& operator=(const GetTransactionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransactionReply& default_instance();

  void Swap(GetTransactionReply* other);

  // implements Message ----------------------------------------------

  GetTransactionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTransactionReply& from);
  void MergeFrom(const GetTransactionReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required uint32 pageCount = 2;
  inline bool has_pagecount() const;
  inline void clear_pagecount();
  static const int kPageCountFieldNumber = 2;
  inline ::google::protobuf::uint32 pagecount() const;
  inline void set_pagecount(::google::protobuf::uint32 value);

  // repeated .com.mservice.momo.msg.Transaction transactions = 3;
  inline int transactions_size() const;
  inline void clear_transactions();
  static const int kTransactionsFieldNumber = 3;
  inline const ::com::mservice::momo::msg::Transaction& transactions(int index) const;
  inline ::com::mservice::momo::msg::Transaction* mutable_transactions(int index);
  inline ::com::mservice::momo::msg::Transaction* add_transactions();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Transaction >&
      transactions() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Transaction >*
      mutable_transactions();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetTransactionReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pagecount();
  inline void clear_has_pagecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 pagecount_;
  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Transaction > transactions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetTransactionReply* default_instance_;
};
// -------------------------------------------------------------------

class GetTransactionDetail : public ::google::protobuf::Message {
 public:
  GetTransactionDetail();
  virtual ~GetTransactionDetail();

  GetTransactionDetail(const GetTransactionDetail& from);

  inline GetTransactionDetail& operator=(const GetTransactionDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransactionDetail& default_instance();

  void Swap(GetTransactionDetail* other);

  // implements Message ----------------------------------------------

  GetTransactionDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTransactionDetail& from);
  void MergeFrom(const GetTransactionDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required uint64 transactionId = 2;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 transactionid() const;
  inline void set_transactionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetTransactionDetail)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 transactionid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetTransactionDetail* default_instance_;
};
// -------------------------------------------------------------------

class GetTransactionDetailReply : public ::google::protobuf::Message {
 public:
  GetTransactionDetailReply();
  virtual ~GetTransactionDetailReply();

  GetTransactionDetailReply(const GetTransactionDetailReply& from);

  inline GetTransactionDetailReply& operator=(const GetTransactionDetailReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransactionDetailReply& default_instance();

  void Swap(GetTransactionDetailReply* other);

  // implements Message ----------------------------------------------

  GetTransactionDetailReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTransactionDetailReply& from);
  void MergeFrom(const GetTransactionDetailReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional .com.mservice.momo.msg.TransactionType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::com::mservice::momo::msg::TransactionType type() const;
  inline void set_type(::com::mservice::momo::msg::TransactionType value);

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::com::mservice::momo::msg::TransactionStatus status() const;
  inline void set_status(::com::mservice::momo::msg::TransactionStatus value);

  // optional string partnerId = 7;
  inline bool has_partnerid() const;
  inline void clear_partnerid();
  static const int kPartnerIdFieldNumber = 7;
  inline const ::std::string& partnerid() const;
  inline void set_partnerid(const ::std::string& value);
  inline void set_partnerid(const char* value);
  inline void set_partnerid(const char* value, size_t size);
  inline ::std::string* mutable_partnerid();
  inline ::std::string* release_partnerid();
  inline void set_allocated_partnerid(::std::string* partnerid);

  // optional string partnerCode = 8;
  inline bool has_partnercode() const;
  inline void clear_partnercode();
  static const int kPartnerCodeFieldNumber = 8;
  inline const ::std::string& partnercode() const;
  inline void set_partnercode(const ::std::string& value);
  inline void set_partnercode(const char* value);
  inline void set_partnercode(const char* value, size_t size);
  inline ::std::string* mutable_partnercode();
  inline ::std::string* release_partnercode();
  inline void set_allocated_partnercode(::std::string* partnercode);

  // optional string partnerName = 9;
  inline bool has_partnername() const;
  inline void clear_partnername();
  static const int kPartnerNameFieldNumber = 9;
  inline const ::std::string& partnername() const;
  inline void set_partnername(const ::std::string& value);
  inline void set_partnername(const char* value);
  inline void set_partnername(const char* value, size_t size);
  inline ::std::string* mutable_partnername();
  inline ::std::string* release_partnername();
  inline void set_allocated_partnername(::std::string* partnername);

  // optional string billId = 10;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 10;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // optional string comment = 11;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 11;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional string partnerPref = 12;
  inline bool has_partnerpref() const;
  inline void clear_partnerpref();
  static const int kPartnerPrefFieldNumber = 12;
  inline const ::std::string& partnerpref() const;
  inline void set_partnerpref(const ::std::string& value);
  inline void set_partnerpref(const char* value);
  inline void set_partnerpref(const char* value, size_t size);
  inline ::std::string* mutable_partnerpref();
  inline ::std::string* release_partnerpref();
  inline void set_allocated_partnerpref(::std::string* partnerpref);

  // optional uint32 errorCode = 13;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 13;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetTransactionDetailReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_partnerid();
  inline void clear_has_partnerid();
  inline void set_has_partnercode();
  inline void clear_has_partnercode();
  inline void set_has_partnername();
  inline void clear_has_partnername();
  inline void set_has_billid();
  inline void clear_has_billid();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_partnerpref();
  inline void clear_has_partnerpref();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 phonenumber_;
  int type_;
  ::google::protobuf::uint64 amount_;
  ::std::string* partnerid_;
  ::std::string* partnercode_;
  ::std::string* partnername_;
  int status_;
  ::google::protobuf::uint32 errorcode_;
  ::std::string* billid_;
  ::std::string* comment_;
  ::std::string* partnerpref_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetTransactionDetailReply* default_instance_;
};
// -------------------------------------------------------------------

class Topup : public ::google::protobuf::Message {
 public:
  Topup();
  virtual ~Topup();

  Topup(const Topup& from);

  inline Topup& operator=(const Topup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Topup& default_instance();

  void Swap(Topup* other);

  // implements Message ----------------------------------------------

  Topup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Topup& from);
  void MergeFrom(const Topup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required uint32 topupPhoneNumber = 3;
  inline bool has_topupphonenumber() const;
  inline void clear_topupphonenumber();
  static const int kTopupPhoneNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 topupphonenumber() const;
  inline void set_topupphonenumber(::google::protobuf::uint32 value);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Topup)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_topupphonenumber();
  inline void clear_has_topupphonenumber();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 topupphonenumber_;
  ::google::protobuf::uint64 amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Topup* default_instance_;
};
// -------------------------------------------------------------------

class TopupReply : public ::google::protobuf::Message {
 public:
  TopupReply();
  virtual ~TopupReply();

  TopupReply(const TopupReply& from);

  inline TopupReply& operator=(const TopupReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopupReply& default_instance();

  void Swap(TopupReply* other);

  // implements Message ----------------------------------------------

  TopupReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopupReply& from);
  void MergeFrom(const TopupReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TopupReply_Result Result;
  static const Result SUCCESS = TopupReply_Result_SUCCESS;
  static const Result FAILED = TopupReply_Result_FAILED;
  static const Result LOGIN_REQUIRED = TopupReply_Result_LOGIN_REQUIRED;
  static inline bool Result_IsValid(int value) {
    return TopupReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    TopupReply_Result_Result_MIN;
  static const Result Result_MAX =
    TopupReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    TopupReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return TopupReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return TopupReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return TopupReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.TopupReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::TopupReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::TopupReply_Result value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TopupReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TopupReply* default_instance_;
};
// -------------------------------------------------------------------

class TopupGame : public ::google::protobuf::Message {
 public:
  TopupGame();
  virtual ~TopupGame();

  TopupGame(const TopupGame& from);

  inline TopupGame& operator=(const TopupGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopupGame& default_instance();

  void Swap(TopupGame* other);

  // implements Message ----------------------------------------------

  TopupGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopupGame& from);
  void MergeFrom(const TopupGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string providerId = 3;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string gameAccount = 4;
  inline bool has_gameaccount() const;
  inline void clear_gameaccount();
  static const int kGameAccountFieldNumber = 4;
  inline const ::std::string& gameaccount() const;
  inline void set_gameaccount(const ::std::string& value);
  inline void set_gameaccount(const char* value);
  inline void set_gameaccount(const char* value, size_t size);
  inline ::std::string* mutable_gameaccount();
  inline ::std::string* release_gameaccount();
  inline void set_allocated_gameaccount(::std::string* gameaccount);

  // required uint64 amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TopupGame)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_gameaccount();
  inline void clear_has_gameaccount();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* providerid_;
  ::std::string* gameaccount_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TopupGame* default_instance_;
};
// -------------------------------------------------------------------

class TopupGameReply : public ::google::protobuf::Message {
 public:
  TopupGameReply();
  virtual ~TopupGameReply();

  TopupGameReply(const TopupGameReply& from);

  inline TopupGameReply& operator=(const TopupGameReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopupGameReply& default_instance();

  void Swap(TopupGameReply* other);

  // implements Message ----------------------------------------------

  TopupGameReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopupGameReply& from);
  void MergeFrom(const TopupGameReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TopupGameReply_TopupGameResult TopupGameResult;
  static const TopupGameResult SUCCESS = TopupGameReply_TopupGameResult_SUCCESS;
  static const TopupGameResult FAILED = TopupGameReply_TopupGameResult_FAILED;
  static inline bool TopupGameResult_IsValid(int value) {
    return TopupGameReply_TopupGameResult_IsValid(value);
  }
  static const TopupGameResult TopupGameResult_MIN =
    TopupGameReply_TopupGameResult_TopupGameResult_MIN;
  static const TopupGameResult TopupGameResult_MAX =
    TopupGameReply_TopupGameResult_TopupGameResult_MAX;
  static const int TopupGameResult_ARRAYSIZE =
    TopupGameReply_TopupGameResult_TopupGameResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TopupGameResult_descriptor() {
    return TopupGameReply_TopupGameResult_descriptor();
  }
  static inline const ::std::string& TopupGameResult_Name(TopupGameResult value) {
    return TopupGameReply_TopupGameResult_Name(value);
  }
  static inline bool TopupGameResult_Parse(const ::std::string& name,
      TopupGameResult* value) {
    return TopupGameReply_TopupGameResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.TopupGameReply.TopupGameResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::TopupGameReply_TopupGameResult result() const;
  inline void set_result(::com::mservice::momo::msg::TopupGameReply_TopupGameResult value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TopupGameReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TopupGameReply* default_instance_;
};
// -------------------------------------------------------------------

class TransferM2m : public ::google::protobuf::Message {
 public:
  TransferM2m();
  virtual ~TransferM2m();

  TransferM2m(const TransferM2m& from);

  inline TransferM2m& operator=(const TransferM2m& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferM2m& default_instance();

  void Swap(TransferM2m* other);

  // implements Message ----------------------------------------------

  TransferM2m* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferM2m& from);
  void MergeFrom(const TransferM2m& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required uint32 receiverPhoneNumber = 3;
  inline bool has_receiverphonenumber() const;
  inline void clear_receiverphonenumber();
  static const int kReceiverPhoneNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 receiverphonenumber() const;
  inline void set_receiverphonenumber(::google::protobuf::uint32 value);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required string comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TransferM2m)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_receiverphonenumber();
  inline void clear_has_receiverphonenumber();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 receiverphonenumber_;
  ::google::protobuf::uint64 amount_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TransferM2m* default_instance_;
};
// -------------------------------------------------------------------

class TransferM2mReply : public ::google::protobuf::Message {
 public:
  TransferM2mReply();
  virtual ~TransferM2mReply();

  TransferM2mReply(const TransferM2mReply& from);

  inline TransferM2mReply& operator=(const TransferM2mReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferM2mReply& default_instance();

  void Swap(TransferM2mReply* other);

  // implements Message ----------------------------------------------

  TransferM2mReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferM2mReply& from);
  void MergeFrom(const TransferM2mReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransferM2mReply_Result Result;
  static const Result SUCCESS = TransferM2mReply_Result_SUCCESS;
  static const Result FAILED = TransferM2mReply_Result_FAILED;
  static const Result ACCESS_DENIED = TransferM2mReply_Result_ACCESS_DENIED;
  static const Result LOGIN_REQUIRED = TransferM2mReply_Result_LOGIN_REQUIRED;
  static inline bool Result_IsValid(int value) {
    return TransferM2mReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    TransferM2mReply_Result_Result_MIN;
  static const Result Result_MAX =
    TransferM2mReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    TransferM2mReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return TransferM2mReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return TransferM2mReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return TransferM2mReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.TransferM2mReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::TransferM2mReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::TransferM2mReply_Result value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TransferM2mReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TransferM2mReply* default_instance_;
};
// -------------------------------------------------------------------

class TransferM2c : public ::google::protobuf::Message {
 public:
  TransferM2c();
  virtual ~TransferM2c();

  TransferM2c(const TransferM2c& from);

  inline TransferM2c& operator=(const TransferM2c& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferM2c& default_instance();

  void Swap(TransferM2c* other);

  // implements Message ----------------------------------------------

  TransferM2c* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferM2c& from);
  void MergeFrom(const TransferM2c& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string receiverName = 3;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceiverNameFieldNumber = 3;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // required string receiverCardId = 4;
  inline bool has_receivercardid() const;
  inline void clear_receivercardid();
  static const int kReceiverCardIdFieldNumber = 4;
  inline const ::std::string& receivercardid() const;
  inline void set_receivercardid(const ::std::string& value);
  inline void set_receivercardid(const char* value);
  inline void set_receivercardid(const char* value, size_t size);
  inline ::std::string* mutable_receivercardid();
  inline ::std::string* release_receivercardid();
  inline void set_allocated_receivercardid(::std::string* receivercardid);

  // required uint32 receiverPhoneNumber = 5;
  inline bool has_receiverphonenumber() const;
  inline void clear_receiverphonenumber();
  static const int kReceiverPhoneNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 receiverphonenumber() const;
  inline void set_receiverphonenumber(::google::protobuf::uint32 value);

  // required uint64 amount = 6;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 6;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required string comment = 7;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 7;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TransferM2c)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_receivername();
  inline void clear_has_receivername();
  inline void set_has_receivercardid();
  inline void clear_has_receivercardid();
  inline void set_has_receiverphonenumber();
  inline void clear_has_receiverphonenumber();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* receivername_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 receiverphonenumber_;
  ::std::string* receivercardid_;
  ::google::protobuf::uint64 amount_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TransferM2c* default_instance_;
};
// -------------------------------------------------------------------

class TransferM2cReply : public ::google::protobuf::Message {
 public:
  TransferM2cReply();
  virtual ~TransferM2cReply();

  TransferM2cReply(const TransferM2cReply& from);

  inline TransferM2cReply& operator=(const TransferM2cReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferM2cReply& default_instance();

  void Swap(TransferM2cReply* other);

  // implements Message ----------------------------------------------

  TransferM2cReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferM2cReply& from);
  void MergeFrom(const TransferM2cReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransferM2cReply_Result Result;
  static const Result SUCCESS = TransferM2cReply_Result_SUCCESS;
  static const Result FAILED = TransferM2cReply_Result_FAILED;
  static const Result ACCESS_DENIED = TransferM2cReply_Result_ACCESS_DENIED;
  static inline bool Result_IsValid(int value) {
    return TransferM2cReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    TransferM2cReply_Result_Result_MIN;
  static const Result Result_MAX =
    TransferM2cReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    TransferM2cReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return TransferM2cReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return TransferM2cReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return TransferM2cReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.TransferM2cReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::TransferM2cReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::TransferM2cReply_Result value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TransferM2cReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TransferM2cReply* default_instance_;
};
// -------------------------------------------------------------------

class DepositWithdrawAtPlace : public ::google::protobuf::Message {
 public:
  DepositWithdrawAtPlace();
  virtual ~DepositWithdrawAtPlace();

  DepositWithdrawAtPlace(const DepositWithdrawAtPlace& from);

  inline DepositWithdrawAtPlace& operator=(const DepositWithdrawAtPlace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepositWithdrawAtPlace& default_instance();

  void Swap(DepositWithdrawAtPlace* other);

  // implements Message ----------------------------------------------

  DepositWithdrawAtPlace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepositWithdrawAtPlace& from);
  void MergeFrom(const DepositWithdrawAtPlace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required uint64 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required uint32 inOut = 4;
  inline bool has_inout() const;
  inline void clear_inout();
  static const int kInOutFieldNumber = 4;
  inline ::google::protobuf::uint32 inout() const;
  inline void set_inout(::google::protobuf::uint32 value);

  // required string maTinh = 5;
  inline bool has_matinh() const;
  inline void clear_matinh();
  static const int kMaTinhFieldNumber = 5;
  inline const ::std::string& matinh() const;
  inline void set_matinh(const ::std::string& value);
  inline void set_matinh(const char* value);
  inline void set_matinh(const char* value, size_t size);
  inline ::std::string* mutable_matinh();
  inline ::std::string* release_matinh();
  inline void set_allocated_matinh(::std::string* matinh);

  // required string maHuyen = 6;
  inline bool has_mahuyen() const;
  inline void clear_mahuyen();
  static const int kMaHuyenFieldNumber = 6;
  inline const ::std::string& mahuyen() const;
  inline void set_mahuyen(const ::std::string& value);
  inline void set_mahuyen(const char* value);
  inline void set_mahuyen(const char* value, size_t size);
  inline ::std::string* mutable_mahuyen();
  inline ::std::string* release_mahuyen();
  inline void set_allocated_mahuyen(::std::string* mahuyen);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.DepositWithdrawAtPlace)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_inout();
  inline void clear_has_inout();
  inline void set_has_matinh();
  inline void clear_has_matinh();
  inline void set_has_mahuyen();
  inline void clear_has_mahuyen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 inout_;
  ::google::protobuf::uint64 amount_;
  ::std::string* matinh_;
  ::std::string* mahuyen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static DepositWithdrawAtPlace* default_instance_;
};
// -------------------------------------------------------------------

class DepositWithdrawAtPlaceReply : public ::google::protobuf::Message {
 public:
  DepositWithdrawAtPlaceReply();
  virtual ~DepositWithdrawAtPlaceReply();

  DepositWithdrawAtPlaceReply(const DepositWithdrawAtPlaceReply& from);

  inline DepositWithdrawAtPlaceReply& operator=(const DepositWithdrawAtPlaceReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepositWithdrawAtPlaceReply& default_instance();

  void Swap(DepositWithdrawAtPlaceReply* other);

  // implements Message ----------------------------------------------

  DepositWithdrawAtPlaceReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepositWithdrawAtPlaceReply& from);
  void MergeFrom(const DepositWithdrawAtPlaceReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DepositWithdrawAtPlaceReply_Result Result;
  static const Result SUCCESS = DepositWithdrawAtPlaceReply_Result_SUCCESS;
  static const Result FAIL = DepositWithdrawAtPlaceReply_Result_FAIL;
  static inline bool Result_IsValid(int value) {
    return DepositWithdrawAtPlaceReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    DepositWithdrawAtPlaceReply_Result_Result_MIN;
  static const Result Result_MAX =
    DepositWithdrawAtPlaceReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    DepositWithdrawAtPlaceReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return DepositWithdrawAtPlaceReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return DepositWithdrawAtPlaceReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return DepositWithdrawAtPlaceReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.DepositWithdrawAtPlaceReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.DepositWithdrawAtPlaceReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static DepositWithdrawAtPlaceReply* default_instance_;
};
// -------------------------------------------------------------------

class BillDetail : public ::google::protobuf::Message {
 public:
  BillDetail();
  virtual ~BillDetail();

  BillDetail(const BillDetail& from);

  inline BillDetail& operator=(const BillDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BillDetail& default_instance();

  void Swap(BillDetail* other);

  // implements Message ----------------------------------------------

  BillDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BillDetail& from);
  void MergeFrom(const BillDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string billId = 1;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 1;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // optional uint64 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint64 startDate = 3;
  inline bool has_startdate() const;
  inline void clear_startdate();
  static const int kStartDateFieldNumber = 3;
  inline ::google::protobuf::uint64 startdate() const;
  inline void set_startdate(::google::protobuf::uint64 value);

  // optional uint64 endDate = 4;
  inline bool has_enddate() const;
  inline void clear_enddate();
  static const int kEndDateFieldNumber = 4;
  inline ::google::protobuf::uint64 enddate() const;
  inline void set_enddate(::google::protobuf::uint64 value);

  // optional string providerId = 5;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 5;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BillDetail)
 private:
  inline void set_has_billid();
  inline void clear_has_billid();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_startdate();
  inline void clear_has_startdate();
  inline void set_has_enddate();
  inline void clear_has_enddate();
  inline void set_has_providerid();
  inline void clear_has_providerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* billid_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 startdate_;
  ::google::protobuf::uint64 enddate_;
  ::std::string* providerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BillDetail* default_instance_;
};
// -------------------------------------------------------------------

class GetBillInfo : public ::google::protobuf::Message {
 public:
  GetBillInfo();
  virtual ~GetBillInfo();

  GetBillInfo(const GetBillInfo& from);

  inline GetBillInfo& operator=(const GetBillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBillInfo& default_instance();

  void Swap(GetBillInfo* other);

  // implements Message ----------------------------------------------

  GetBillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBillInfo& from);
  void MergeFrom(const GetBillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string providerId = 3;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string billId = 4;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 4;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetBillInfo)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_billid();
  inline void clear_has_billid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* providerid_;
  ::std::string* billid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetBillInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetBillInfoReply : public ::google::protobuf::Message {
 public:
  GetBillInfoReply();
  virtual ~GetBillInfoReply();

  GetBillInfoReply(const GetBillInfoReply& from);

  inline GetBillInfoReply& operator=(const GetBillInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBillInfoReply& default_instance();

  void Swap(GetBillInfoReply* other);

  // implements Message ----------------------------------------------

  GetBillInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBillInfoReply& from);
  void MergeFrom(const GetBillInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetBillInfoReply_Result Result;
  static const Result SUCESS = GetBillInfoReply_Result_SUCESS;
  static const Result AGENT_NOT_FOUND = GetBillInfoReply_Result_AGENT_NOT_FOUND;
  static const Result BILL_NOT_FOUND = GetBillInfoReply_Result_BILL_NOT_FOUND;
  static inline bool Result_IsValid(int value) {
    return GetBillInfoReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    GetBillInfoReply_Result_Result_MIN;
  static const Result Result_MAX =
    GetBillInfoReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    GetBillInfoReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return GetBillInfoReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return GetBillInfoReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return GetBillInfoReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.GetBillInfoReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::GetBillInfoReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::GetBillInfoReply_Result value);

  // repeated .com.mservice.momo.msg.BillDetail billDetails = 3;
  inline int billdetails_size() const;
  inline void clear_billdetails();
  static const int kBillDetailsFieldNumber = 3;
  inline const ::com::mservice::momo::msg::BillDetail& billdetails(int index) const;
  inline ::com::mservice::momo::msg::BillDetail* mutable_billdetails(int index);
  inline ::com::mservice::momo::msg::BillDetail* add_billdetails();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >&
      billdetails() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >*
      mutable_billdetails();

  // optional string agentName = 4;
  inline bool has_agentname() const;
  inline void clear_agentname();
  static const int kAgentNameFieldNumber = 4;
  inline const ::std::string& agentname() const;
  inline void set_agentname(const ::std::string& value);
  inline void set_agentname(const char* value);
  inline void set_agentname(const char* value, size_t size);
  inline ::std::string* mutable_agentname();
  inline ::std::string* release_agentname();
  inline void set_allocated_agentname(::std::string* agentname);

  // optional string agentPhone = 5;
  inline bool has_agentphone() const;
  inline void clear_agentphone();
  static const int kAgentPhoneFieldNumber = 5;
  inline const ::std::string& agentphone() const;
  inline void set_agentphone(const ::std::string& value);
  inline void set_agentphone(const char* value);
  inline void set_agentphone(const char* value, size_t size);
  inline ::std::string* mutable_agentphone();
  inline ::std::string* release_agentphone();
  inline void set_allocated_agentphone(::std::string* agentphone);

  // optional string agentAddress = 6;
  inline bool has_agentaddress() const;
  inline void clear_agentaddress();
  static const int kAgentAddressFieldNumber = 6;
  inline const ::std::string& agentaddress() const;
  inline void set_agentaddress(const ::std::string& value);
  inline void set_agentaddress(const char* value);
  inline void set_agentaddress(const char* value, size_t size);
  inline ::std::string* mutable_agentaddress();
  inline ::std::string* release_agentaddress();
  inline void set_allocated_agentaddress(::std::string* agentaddress);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetBillInfoReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_agentname();
  inline void clear_has_agentname();
  inline void set_has_agentphone();
  inline void clear_has_agentphone();
  inline void set_has_agentaddress();
  inline void clear_has_agentaddress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail > billdetails_;
  ::std::string* agentname_;
  ::std::string* agentphone_;
  ::std::string* agentaddress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetBillInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class PayBill : public ::google::protobuf::Message {
 public:
  PayBill();
  virtual ~PayBill();

  PayBill(const PayBill& from);

  inline PayBill& operator=(const PayBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayBill& default_instance();

  void Swap(PayBill* other);

  // implements Message ----------------------------------------------

  PayBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayBill& from);
  void MergeFrom(const PayBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string providerId = 3;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string billId = 4;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 4;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // required uint64 amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint32 fromSource = 6;
  inline bool has_fromsource() const;
  inline void clear_fromsource();
  static const int kFromSourceFieldNumber = 6;
  inline ::google::protobuf::uint32 fromsource() const;
  inline void set_fromsource(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.PayBill)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_billid();
  inline void clear_has_billid();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_fromsource();
  inline void clear_has_fromsource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* providerid_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 fromsource_;
  ::std::string* billid_;
  ::google::protobuf::uint64 amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static PayBill* default_instance_;
};
// -------------------------------------------------------------------

class PayBillReply : public ::google::protobuf::Message {
 public:
  PayBillReply();
  virtual ~PayBillReply();

  PayBillReply(const PayBillReply& from);

  inline PayBillReply& operator=(const PayBillReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayBillReply& default_instance();

  void Swap(PayBillReply* other);

  // implements Message ----------------------------------------------

  PayBillReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayBillReply& from);
  void MergeFrom(const PayBillReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PayBillReply_Result Result;
  static const Result SUCCESS = PayBillReply_Result_SUCCESS;
  static const Result AGENT_NOT_FOUND = PayBillReply_Result_AGENT_NOT_FOUND;
  static const Result BILL_NOT_FOUND = PayBillReply_Result_BILL_NOT_FOUND;
  static const Result UNKNOWN_SOURCE = PayBillReply_Result_UNKNOWN_SOURCE;
  static inline bool Result_IsValid(int value) {
    return PayBillReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    PayBillReply_Result_Result_MIN;
  static const Result Result_MAX =
    PayBillReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    PayBillReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return PayBillReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return PayBillReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return PayBillReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.PayBillReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::PayBillReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::PayBillReply_Result value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.PayBillReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static PayBillReply* default_instance_;
};
// -------------------------------------------------------------------

class Bill : public ::google::protobuf::Message {
 public:
  Bill();
  virtual ~Bill();

  Bill(const Bill& from);

  inline Bill& operator=(const Bill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bill& default_instance();

  void Swap(Bill* other);

  // implements Message ----------------------------------------------

  Bill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bill& from);
  void MergeFrom(const Bill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string providerId = 3;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string billId = 4;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 4;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Bill)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_billid();
  inline void clear_has_billid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* providerid_;
  ::std::string* billid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Bill* default_instance_;
};
// -------------------------------------------------------------------

class SaveBill : public ::google::protobuf::Message {
 public:
  SaveBill();
  virtual ~SaveBill();

  SaveBill(const SaveBill& from);

  inline SaveBill& operator=(const SaveBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveBill& default_instance();

  void Swap(SaveBill* other);

  // implements Message ----------------------------------------------

  SaveBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveBill& from);
  void MergeFrom(const SaveBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string providerId = 3;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string billId = 4;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 4;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.SaveBill)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_billid();
  inline void clear_has_billid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* providerid_;
  ::std::string* billid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static SaveBill* default_instance_;
};
// -------------------------------------------------------------------

class SaveBillReply : public ::google::protobuf::Message {
 public:
  SaveBillReply();
  virtual ~SaveBillReply();

  SaveBillReply(const SaveBillReply& from);

  inline SaveBillReply& operator=(const SaveBillReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveBillReply& default_instance();

  void Swap(SaveBillReply* other);

  // implements Message ----------------------------------------------

  SaveBillReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveBillReply& from);
  void MergeFrom(const SaveBillReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SaveBillReply_Result Result;
  static const Result SUCCESS = SaveBillReply_Result_SUCCESS;
  static const Result FAIL = SaveBillReply_Result_FAIL;
  static inline bool Result_IsValid(int value) {
    return SaveBillReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    SaveBillReply_Result_Result_MIN;
  static const Result Result_MAX =
    SaveBillReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    SaveBillReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return SaveBillReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return SaveBillReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return SaveBillReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.SaveBillReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::SaveBillReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::SaveBillReply_Result value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.SaveBillReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static SaveBillReply* default_instance_;
};
// -------------------------------------------------------------------

class GetSavedBill : public ::google::protobuf::Message {
 public:
  GetSavedBill();
  virtual ~GetSavedBill();

  GetSavedBill(const GetSavedBill& from);

  inline GetSavedBill& operator=(const GetSavedBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSavedBill& default_instance();

  void Swap(GetSavedBill* other);

  // implements Message ----------------------------------------------

  GetSavedBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSavedBill& from);
  void MergeFrom(const GetSavedBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetSavedBill)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetSavedBill* default_instance_;
};
// -------------------------------------------------------------------

class GetSavedBillReply : public ::google::protobuf::Message {
 public:
  GetSavedBillReply();
  virtual ~GetSavedBillReply();

  GetSavedBillReply(const GetSavedBillReply& from);

  inline GetSavedBillReply& operator=(const GetSavedBillReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSavedBillReply& default_instance();

  void Swap(GetSavedBillReply* other);

  // implements Message ----------------------------------------------

  GetSavedBillReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSavedBillReply& from);
  void MergeFrom(const GetSavedBillReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // repeated .com.mservice.momo.msg.BillDetail billDetails = 2;
  inline int billdetails_size() const;
  inline void clear_billdetails();
  static const int kBillDetailsFieldNumber = 2;
  inline const ::com::mservice::momo::msg::BillDetail& billdetails(int index) const;
  inline ::com::mservice::momo::msg::BillDetail* mutable_billdetails(int index);
  inline ::com::mservice::momo::msg::BillDetail* add_billdetails();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >&
      billdetails() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >*
      mutable_billdetails();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetSavedBillReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail > billdetails_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetSavedBillReply* default_instance_;
};
// -------------------------------------------------------------------

class RemoveSavedBill : public ::google::protobuf::Message {
 public:
  RemoveSavedBill();
  virtual ~RemoveSavedBill();

  RemoveSavedBill(const RemoveSavedBill& from);

  inline RemoveSavedBill& operator=(const RemoveSavedBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSavedBill& default_instance();

  void Swap(RemoveSavedBill* other);

  // implements Message ----------------------------------------------

  RemoveSavedBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveSavedBill& from);
  void MergeFrom(const RemoveSavedBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string providerId = 3;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string billId = 4;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 4;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.RemoveSavedBill)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_billid();
  inline void clear_has_billid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* providerid_;
  ::std::string* billid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static RemoveSavedBill* default_instance_;
};
// -------------------------------------------------------------------

class RemoveSavedBillReply : public ::google::protobuf::Message {
 public:
  RemoveSavedBillReply();
  virtual ~RemoveSavedBillReply();

  RemoveSavedBillReply(const RemoveSavedBillReply& from);

  inline RemoveSavedBillReply& operator=(const RemoveSavedBillReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSavedBillReply& default_instance();

  void Swap(RemoveSavedBillReply* other);

  // implements Message ----------------------------------------------

  RemoveSavedBillReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveSavedBillReply& from);
  void MergeFrom(const RemoveSavedBillReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RemoveSavedBillReply_Result Result;
  static const Result SUCCESS = RemoveSavedBillReply_Result_SUCCESS;
  static const Result FAIL = RemoveSavedBillReply_Result_FAIL;
  static inline bool Result_IsValid(int value) {
    return RemoveSavedBillReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    RemoveSavedBillReply_Result_Result_MIN;
  static const Result Result_MAX =
    RemoveSavedBillReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    RemoveSavedBillReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return RemoveSavedBillReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return RemoveSavedBillReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return RemoveSavedBillReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::RemoveSavedBillReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::RemoveSavedBillReply_Result value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.RemoveSavedBillReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static RemoveSavedBillReply* default_instance_;
};
// -------------------------------------------------------------------

class BankIn : public ::google::protobuf::Message {
 public:
  BankIn();
  virtual ~BankIn();

  BankIn(const BankIn& from);

  inline BankIn& operator=(const BankIn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankIn& default_instance();

  void Swap(BankIn* other);

  // implements Message ----------------------------------------------

  BankIn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankIn& from);
  void MergeFrom(const BankIn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string bankCode = 3;
  inline bool has_bankcode() const;
  inline void clear_bankcode();
  static const int kBankCodeFieldNumber = 3;
  inline const ::std::string& bankcode() const;
  inline void set_bankcode(const ::std::string& value);
  inline void set_bankcode(const char* value);
  inline void set_bankcode(const char* value, size_t size);
  inline ::std::string* mutable_bankcode();
  inline ::std::string* release_bankcode();
  inline void set_allocated_bankcode(::std::string* bankcode);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankIn)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_bankcode();
  inline void clear_has_bankcode();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* bankcode_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankIn* default_instance_;
};
// -------------------------------------------------------------------

class BankInReply : public ::google::protobuf::Message {
 public:
  BankInReply();
  virtual ~BankInReply();

  BankInReply(const BankInReply& from);

  inline BankInReply& operator=(const BankInReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankInReply& default_instance();

  void Swap(BankInReply* other);

  // implements Message ----------------------------------------------

  BankInReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankInReply& from);
  void MergeFrom(const BankInReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BankInReply_Result Result;
  static const Result SUCCESS = BankInReply_Result_SUCCESS;
  static const Result FAILED = BankInReply_Result_FAILED;
  static inline bool Result_IsValid(int value) {
    return BankInReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    BankInReply_Result_Result_MIN;
  static const Result Result_MAX =
    BankInReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    BankInReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return BankInReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return BankInReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return BankInReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.BankInReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::BankInReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::BankInReply_Result value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankInReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankInReply* default_instance_;
};
// -------------------------------------------------------------------

class BankOut : public ::google::protobuf::Message {
 public:
  BankOut();
  virtual ~BankOut();

  BankOut(const BankOut& from);

  inline BankOut& operator=(const BankOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankOut& default_instance();

  void Swap(BankOut* other);

  // implements Message ----------------------------------------------

  BankOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankOut& from);
  void MergeFrom(const BankOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string bankCode = 3;
  inline bool has_bankcode() const;
  inline void clear_bankcode();
  static const int kBankCodeFieldNumber = 3;
  inline const ::std::string& bankcode() const;
  inline void set_bankcode(const ::std::string& value);
  inline void set_bankcode(const char* value);
  inline void set_bankcode(const char* value, size_t size);
  inline ::std::string* mutable_bankcode();
  inline ::std::string* release_bankcode();
  inline void set_allocated_bankcode(::std::string* bankcode);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankOut)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_bankcode();
  inline void clear_has_bankcode();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* bankcode_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankOut* default_instance_;
};
// -------------------------------------------------------------------

class BankOutReply : public ::google::protobuf::Message {
 public:
  BankOutReply();
  virtual ~BankOutReply();

  BankOutReply(const BankOutReply& from);

  inline BankOutReply& operator=(const BankOutReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankOutReply& default_instance();

  void Swap(BankOutReply* other);

  // implements Message ----------------------------------------------

  BankOutReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankOutReply& from);
  void MergeFrom(const BankOutReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BankOutReply_Result Result;
  static const Result SUCCESS = BankOutReply_Result_SUCCESS;
  static const Result FAILED = BankOutReply_Result_FAILED;
  static inline bool Result_IsValid(int value) {
    return BankOutReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    BankOutReply_Result_Result_MIN;
  static const Result Result_MAX =
    BankOutReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    BankOutReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return BankOutReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return BankOutReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return BankOutReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.BankOutReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::BankOutReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::BankOutReply_Result value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankOutReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankOutReply* default_instance_;
};
// -------------------------------------------------------------------

class BanknetToMomo : public ::google::protobuf::Message {
 public:
  BanknetToMomo();
  virtual ~BanknetToMomo();

  BanknetToMomo(const BanknetToMomo& from);

  inline BanknetToMomo& operator=(const BanknetToMomo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BanknetToMomo& default_instance();

  void Swap(BanknetToMomo* other);

  // implements Message ----------------------------------------------

  BanknetToMomo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BanknetToMomo& from);
  void MergeFrom(const BanknetToMomo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required string bankId = 3;
  inline bool has_bankid() const;
  inline void clear_bankid();
  static const int kBankIdFieldNumber = 3;
  inline const ::std::string& bankid() const;
  inline void set_bankid(const ::std::string& value);
  inline void set_bankid(const char* value);
  inline void set_bankid(const char* value, size_t size);
  inline ::std::string* mutable_bankid();
  inline ::std::string* release_bankid();
  inline void set_allocated_bankid(::std::string* bankid);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required string cardHolderName = 5;
  inline bool has_cardholdername() const;
  inline void clear_cardholdername();
  static const int kCardHolderNameFieldNumber = 5;
  inline const ::std::string& cardholdername() const;
  inline void set_cardholdername(const ::std::string& value);
  inline void set_cardholdername(const char* value);
  inline void set_cardholdername(const char* value, size_t size);
  inline ::std::string* mutable_cardholdername();
  inline ::std::string* release_cardholdername();
  inline void set_allocated_cardholdername(::std::string* cardholdername);

  // required string cardHolderNumber = 6;
  inline bool has_cardholdernumber() const;
  inline void clear_cardholdernumber();
  static const int kCardHolderNumberFieldNumber = 6;
  inline const ::std::string& cardholdernumber() const;
  inline void set_cardholdernumber(const ::std::string& value);
  inline void set_cardholdernumber(const char* value);
  inline void set_cardholdernumber(const char* value, size_t size);
  inline ::std::string* mutable_cardholdernumber();
  inline ::std::string* release_cardholdernumber();
  inline void set_allocated_cardholdernumber(::std::string* cardholdernumber);

  // required uint32 cardHolderMonth = 7;
  inline bool has_cardholdermonth() const;
  inline void clear_cardholdermonth();
  static const int kCardHolderMonthFieldNumber = 7;
  inline ::google::protobuf::uint32 cardholdermonth() const;
  inline void set_cardholdermonth(::google::protobuf::uint32 value);

  // required uint32 cardHolderYear = 8;
  inline bool has_cardholderyear() const;
  inline void clear_cardholderyear();
  static const int kCardHolderYearFieldNumber = 8;
  inline ::google::protobuf::uint32 cardholderyear() const;
  inline void set_cardholderyear(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BanknetToMomo)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_bankid();
  inline void clear_has_bankid();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_cardholdername();
  inline void clear_has_cardholdername();
  inline void set_has_cardholdernumber();
  inline void clear_has_cardholdernumber();
  inline void set_has_cardholdermonth();
  inline void clear_has_cardholdermonth();
  inline void set_has_cardholderyear();
  inline void clear_has_cardholderyear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::std::string* bankid_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 cardholdermonth_;
  ::std::string* cardholdername_;
  ::std::string* cardholdernumber_;
  ::google::protobuf::uint32 cardholderyear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BanknetToMomo* default_instance_;
};
// -------------------------------------------------------------------

class BanknetToMomoReply : public ::google::protobuf::Message {
 public:
  BanknetToMomoReply();
  virtual ~BanknetToMomoReply();

  BanknetToMomoReply(const BanknetToMomoReply& from);

  inline BanknetToMomoReply& operator=(const BanknetToMomoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BanknetToMomoReply& default_instance();

  void Swap(BanknetToMomoReply* other);

  // implements Message ----------------------------------------------

  BanknetToMomoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BanknetToMomoReply& from);
  void MergeFrom(const BanknetToMomoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BanknetToMomoReply_Result Result;
  static const Result SUCCESS = BanknetToMomoReply_Result_SUCCESS;
  static const Result FAILED = BanknetToMomoReply_Result_FAILED;
  static inline bool Result_IsValid(int value) {
    return BanknetToMomoReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    BanknetToMomoReply_Result_Result_MIN;
  static const Result Result_MAX =
    BanknetToMomoReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    BanknetToMomoReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return BanknetToMomoReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return BanknetToMomoReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return BanknetToMomoReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.BanknetToMomoReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::BanknetToMomoReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::BanknetToMomoReply_Result value);

  // required string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // required string merchantTransactionId = 4;
  inline bool has_merchanttransactionid() const;
  inline void clear_merchanttransactionid();
  static const int kMerchantTransactionIdFieldNumber = 4;
  inline const ::std::string& merchanttransactionid() const;
  inline void set_merchanttransactionid(const ::std::string& value);
  inline void set_merchanttransactionid(const char* value);
  inline void set_merchanttransactionid(const char* value, size_t size);
  inline ::std::string* mutable_merchanttransactionid();
  inline ::std::string* release_merchanttransactionid();
  inline void set_allocated_merchanttransactionid(::std::string* merchanttransactionid);

  // optional uint32 banketError = 5;
  inline bool has_banketerror() const;
  inline void clear_banketerror();
  static const int kBanketErrorFieldNumber = 5;
  inline ::google::protobuf::uint32 banketerror() const;
  inline void set_banketerror(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BanknetToMomoReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();
  inline void set_has_merchanttransactionid();
  inline void clear_has_merchanttransactionid();
  inline void set_has_banketerror();
  inline void clear_has_banketerror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;
  ::std::string* merchanttransactionid_;
  ::google::protobuf::uint32 banketerror_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BanknetToMomoReply* default_instance_;
};
// -------------------------------------------------------------------

class VerifyBanknetOtp : public ::google::protobuf::Message {
 public:
  VerifyBanknetOtp();
  virtual ~VerifyBanknetOtp();

  VerifyBanknetOtp(const VerifyBanknetOtp& from);

  inline VerifyBanknetOtp& operator=(const VerifyBanknetOtp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyBanknetOtp& default_instance();

  void Swap(VerifyBanknetOtp* other);

  // implements Message ----------------------------------------------

  VerifyBanknetOtp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyBanknetOtp& from);
  void MergeFrom(const VerifyBanknetOtp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required uint64 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // required string merchantTransactionId = 4;
  inline bool has_merchanttransactionid() const;
  inline void clear_merchanttransactionid();
  static const int kMerchantTransactionIdFieldNumber = 4;
  inline const ::std::string& merchanttransactionid() const;
  inline void set_merchanttransactionid(const ::std::string& value);
  inline void set_merchanttransactionid(const char* value);
  inline void set_merchanttransactionid(const char* value, size_t size);
  inline ::std::string* mutable_merchanttransactionid();
  inline ::std::string* release_merchanttransactionid();
  inline void set_allocated_merchanttransactionid(::std::string* merchanttransactionid);

  // required string otp = 5;
  inline bool has_otp() const;
  inline void clear_otp();
  static const int kOtpFieldNumber = 5;
  inline const ::std::string& otp() const;
  inline void set_otp(const ::std::string& value);
  inline void set_otp(const char* value);
  inline void set_otp(const char* value, size_t size);
  inline ::std::string* mutable_otp();
  inline ::std::string* release_otp();
  inline void set_allocated_otp(::std::string* otp);

  // required string bankId = 6;
  inline bool has_bankid() const;
  inline void clear_bankid();
  static const int kBankIdFieldNumber = 6;
  inline const ::std::string& bankid() const;
  inline void set_bankid(const ::std::string& value);
  inline void set_bankid(const char* value);
  inline void set_bankid(const char* value, size_t size);
  inline ::std::string* mutable_bankid();
  inline ::std::string* release_bankid();
  inline void set_allocated_bankid(::std::string* bankid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.VerifyBanknetOtp)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();
  inline void set_has_merchanttransactionid();
  inline void clear_has_merchanttransactionid();
  inline void set_has_otp();
  inline void clear_has_otp();
  inline void set_has_bankid();
  inline void clear_has_bankid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 amount_;
  ::std::string* transactionid_;
  ::std::string* merchanttransactionid_;
  ::std::string* otp_;
  ::std::string* bankid_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static VerifyBanknetOtp* default_instance_;
};
// -------------------------------------------------------------------

class VerifyBanknetOtpReply : public ::google::protobuf::Message {
 public:
  VerifyBanknetOtpReply();
  virtual ~VerifyBanknetOtpReply();

  VerifyBanknetOtpReply(const VerifyBanknetOtpReply& from);

  inline VerifyBanknetOtpReply& operator=(const VerifyBanknetOtpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyBanknetOtpReply& default_instance();

  void Swap(VerifyBanknetOtpReply* other);

  // implements Message ----------------------------------------------

  VerifyBanknetOtpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyBanknetOtpReply& from);
  void MergeFrom(const VerifyBanknetOtpReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.VerifyBanknetOtpReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static VerifyBanknetOtpReply* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double longitude = 1;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Location)
 private:
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double longitude_;
  double latitude_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class StoreInfo : public ::google::protobuf::Message {
 public:
  StoreInfo();
  virtual ~StoreInfo();

  StoreInfo(const StoreInfo& from);

  inline StoreInfo& operator=(const StoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreInfo& default_instance();

  void Swap(StoreInfo* other);

  // implements Message ----------------------------------------------

  StoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreInfo& from);
  void MergeFrom(const StoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ownerName = 1;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnerNameFieldNumber = 1;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const char* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // optional string ownerPhone = 2;
  inline bool has_ownerphone() const;
  inline void clear_ownerphone();
  static const int kOwnerPhoneFieldNumber = 2;
  inline const ::std::string& ownerphone() const;
  inline void set_ownerphone(const ::std::string& value);
  inline void set_ownerphone(const char* value);
  inline void set_ownerphone(const char* value, size_t size);
  inline ::std::string* mutable_ownerphone();
  inline ::std::string* release_ownerphone();
  inline void set_allocated_ownerphone(::std::string* ownerphone);

  // optional .com.mservice.momo.msg.Location location = 4;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 4;
  inline const ::com::mservice::momo::msg::Location& location() const;
  inline ::com::mservice::momo::msg::Location* mutable_location();
  inline ::com::mservice::momo::msg::Location* release_location();
  inline void set_allocated_location(::com::mservice::momo::msg::Location* location);

  // optional string address = 5;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 5;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional uint32 districtId = 6;
  inline bool has_districtid() const;
  inline void clear_districtid();
  static const int kDistrictIdFieldNumber = 6;
  inline ::google::protobuf::uint32 districtid() const;
  inline void set_districtid(::google::protobuf::uint32 value);

  // optional uint32 cityId = 7;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 7;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 areaId = 8;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 8;
  inline ::google::protobuf::uint32 areaid() const;
  inline void set_areaid(::google::protobuf::uint32 value);

  // optional string street = 9;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 9;
  inline const ::std::string& street() const;
  inline void set_street(const ::std::string& value);
  inline void set_street(const char* value);
  inline void set_street(const char* value, size_t size);
  inline ::std::string* mutable_street();
  inline ::std::string* release_street();
  inline void set_allocated_street(::std::string* street);

  // optional string wardName = 10;
  inline bool has_wardname() const;
  inline void clear_wardname();
  static const int kWardNameFieldNumber = 10;
  inline const ::std::string& wardname() const;
  inline void set_wardname(const ::std::string& value);
  inline void set_wardname(const char* value);
  inline void set_wardname(const char* value, size_t size);
  inline ::std::string* mutable_wardname();
  inline ::std::string* release_wardname();
  inline void set_allocated_wardname(::std::string* wardname);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.StoreInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ownername();
  inline void clear_has_ownername();
  inline void set_has_ownerphone();
  inline void clear_has_ownerphone();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_districtid();
  inline void clear_has_districtid();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_street();
  inline void clear_has_street();
  inline void set_has_wardname();
  inline void clear_has_wardname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* ownername_;
  ::std::string* ownerphone_;
  ::com::mservice::momo::msg::Location* location_;
  ::std::string* address_;
  ::google::protobuf::uint32 districtid_;
  ::google::protobuf::uint32 cityid_;
  ::std::string* street_;
  ::std::string* wardname_;
  ::google::protobuf::uint32 areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static StoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreAround : public ::google::protobuf::Message {
 public:
  GetStoreAround();
  virtual ~GetStoreAround();

  GetStoreAround(const GetStoreAround& from);

  inline GetStoreAround& operator=(const GetStoreAround& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreAround& default_instance();

  void Swap(GetStoreAround* other);

  // implements Message ----------------------------------------------

  GetStoreAround* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreAround& from);
  void MergeFrom(const GetStoreAround& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double longitude = 1;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional uint32 cityId = 3;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 3;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 districtId = 4;
  inline bool has_districtid() const;
  inline void clear_districtid();
  static const int kDistrictIdFieldNumber = 4;
  inline ::google::protobuf::uint32 districtid() const;
  inline void set_districtid(::google::protobuf::uint32 value);

  // optional uint32 limit = 5;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 5;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetStoreAround)
 private:
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_districtid();
  inline void clear_has_districtid();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double longitude_;
  double latitude_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 districtid_;
  ::google::protobuf::uint32 limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetStoreAround* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreAroundReply : public ::google::protobuf::Message {
 public:
  GetStoreAroundReply();
  virtual ~GetStoreAroundReply();

  GetStoreAroundReply(const GetStoreAroundReply& from);

  inline GetStoreAroundReply& operator=(const GetStoreAroundReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreAroundReply& default_instance();

  void Swap(GetStoreAroundReply* other);

  // implements Message ----------------------------------------------

  GetStoreAroundReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreAroundReply& from);
  void MergeFrom(const GetStoreAroundReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mservice.momo.msg.StoreInfo stores = 1;
  inline int stores_size() const;
  inline void clear_stores();
  static const int kStoresFieldNumber = 1;
  inline const ::com::mservice::momo::msg::StoreInfo& stores(int index) const;
  inline ::com::mservice::momo::msg::StoreInfo* mutable_stores(int index);
  inline ::com::mservice::momo::msg::StoreInfo* add_stores();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >&
      stores() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >*
      mutable_stores();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetStoreAroundReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo > stores_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetStoreAroundReply* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreByCode : public ::google::protobuf::Message {
 public:
  GetStoreByCode();
  virtual ~GetStoreByCode();

  GetStoreByCode(const GetStoreByCode& from);

  inline GetStoreByCode& operator=(const GetStoreByCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreByCode& default_instance();

  void Swap(GetStoreByCode* other);

  // implements Message ----------------------------------------------

  GetStoreByCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreByCode& from);
  void MergeFrom(const GetStoreByCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // optional uint32 did = 2;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 2;
  inline ::google::protobuf::uint32 did() const;
  inline void set_did(::google::protobuf::uint32 value);

  // required uint32 pageSize = 3;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // required uint32 pageNum = 4;
  inline bool has_pagenum() const;
  inline void clear_pagenum();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::uint32 pagenum() const;
  inline void set_pagenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetStoreByCode)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_pagenum();
  inline void clear_has_pagenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 did_;
  ::google::protobuf::uint32 pagesize_;
  ::google::protobuf::uint32 pagenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetStoreByCode* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreByCodeReply : public ::google::protobuf::Message {
 public:
  GetStoreByCodeReply();
  virtual ~GetStoreByCodeReply();

  GetStoreByCodeReply(const GetStoreByCodeReply& from);

  inline GetStoreByCodeReply& operator=(const GetStoreByCodeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreByCodeReply& default_instance();

  void Swap(GetStoreByCodeReply* other);

  // implements Message ----------------------------------------------

  GetStoreByCodeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreByCodeReply& from);
  void MergeFrom(const GetStoreByCodeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 pageCount = 1;
  inline bool has_pagecount() const;
  inline void clear_pagecount();
  static const int kPageCountFieldNumber = 1;
  inline ::google::protobuf::uint64 pagecount() const;
  inline void set_pagecount(::google::protobuf::uint64 value);

  // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
  inline int stores_size() const;
  inline void clear_stores();
  static const int kStoresFieldNumber = 2;
  inline const ::com::mservice::momo::msg::StoreInfo& stores(int index) const;
  inline ::com::mservice::momo::msg::StoreInfo* mutable_stores(int index);
  inline ::com::mservice::momo::msg::StoreInfo* add_stores();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >&
      stores() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >*
      mutable_stores();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetStoreByCodeReply)
 private:
  inline void set_has_pagecount();
  inline void clear_has_pagecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 pagecount_;
  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo > stores_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetStoreByCodeReply* default_instance_;
};
// -------------------------------------------------------------------

class KeyValueData : public ::google::protobuf::Message {
 public:
  KeyValueData();
  virtual ~KeyValueData();

  KeyValueData(const KeyValueData& from);

  inline KeyValueData& operator=(const KeyValueData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValueData& default_instance();

  void Swap(KeyValueData* other);

  // implements Message ----------------------------------------------

  KeyValueData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValueData& from);
  void MergeFrom(const KeyValueData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KeyValueData_CommandType CommandType;
  static const CommandType GET = KeyValueData_CommandType_GET;
  static const CommandType PUT = KeyValueData_CommandType_PUT;
  static inline bool CommandType_IsValid(int value) {
    return KeyValueData_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    KeyValueData_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    KeyValueData_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    KeyValueData_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return KeyValueData_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return KeyValueData_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return KeyValueData_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.mservice.momo.msg.KeyValueData.CommandType commandType = 1;
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::com::mservice::momo::msg::KeyValueData_CommandType commandtype() const;
  inline void set_commandtype(::com::mservice::momo::msg::KeyValueData_CommandType value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.KeyValueData)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  int commandtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static KeyValueData* default_instance_;
};
// -------------------------------------------------------------------

class KeyValueDataReply : public ::google::protobuf::Message {
 public:
  KeyValueDataReply();
  virtual ~KeyValueDataReply();

  KeyValueDataReply(const KeyValueDataReply& from);

  inline KeyValueDataReply& operator=(const KeyValueDataReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValueDataReply& default_instance();

  void Swap(KeyValueDataReply* other);

  // implements Message ----------------------------------------------

  KeyValueDataReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValueDataReply& from);
  void MergeFrom(const KeyValueDataReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KeyValueDataReply_Result Result;
  static const Result SUCCESS = KeyValueDataReply_Result_SUCCESS;
  static const Result FAILED = KeyValueDataReply_Result_FAILED;
  static inline bool Result_IsValid(int value) {
    return KeyValueDataReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    KeyValueDataReply_Result_Result_MIN;
  static const Result Result_MAX =
    KeyValueDataReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    KeyValueDataReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return KeyValueDataReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return KeyValueDataReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return KeyValueDataReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.mservice.momo.msg.KeyValueDataReply.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::mservice::momo::msg::KeyValueDataReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::KeyValueDataReply_Result value);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.KeyValueDataReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static KeyValueDataReply* default_instance_;
};
// -------------------------------------------------------------------

class GetAvatarUploadToken : public ::google::protobuf::Message {
 public:
  GetAvatarUploadToken();
  virtual ~GetAvatarUploadToken();

  GetAvatarUploadToken(const GetAvatarUploadToken& from);

  inline GetAvatarUploadToken& operator=(const GetAvatarUploadToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAvatarUploadToken& default_instance();

  void Swap(GetAvatarUploadToken* other);

  // implements Message ----------------------------------------------

  GetAvatarUploadToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAvatarUploadToken& from);
  void MergeFrom(const GetAvatarUploadToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetAvatarUploadToken)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetAvatarUploadToken* default_instance_;
};
// -------------------------------------------------------------------

class GetAvatarUploadTokenReply : public ::google::protobuf::Message {
 public:
  GetAvatarUploadTokenReply();
  virtual ~GetAvatarUploadTokenReply();

  GetAvatarUploadTokenReply(const GetAvatarUploadTokenReply& from);

  inline GetAvatarUploadTokenReply& operator=(const GetAvatarUploadTokenReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAvatarUploadTokenReply& default_instance();

  void Swap(GetAvatarUploadTokenReply* other);

  // implements Message ----------------------------------------------

  GetAvatarUploadTokenReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAvatarUploadTokenReply& from);
  void MergeFrom(const GetAvatarUploadTokenReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetAvatarUploadTokenReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetAvatarUploadTokenReply* default_instance_;
};
// -------------------------------------------------------------------

class Pay123MuaOrder : public ::google::protobuf::Message {
 public:
  Pay123MuaOrder();
  virtual ~Pay123MuaOrder();

  Pay123MuaOrder(const Pay123MuaOrder& from);

  inline Pay123MuaOrder& operator=(const Pay123MuaOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pay123MuaOrder& default_instance();

  void Swap(Pay123MuaOrder* other);

  // implements Message ----------------------------------------------

  Pay123MuaOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pay123MuaOrder& from);
  void MergeFrom(const Pay123MuaOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string pin = 2;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 2;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // required uint32 receiverPhoneNumber = 3;
  inline bool has_receiverphonenumber() const;
  inline void clear_receiverphonenumber();
  static const int kReceiverPhoneNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 receiverphonenumber() const;
  inline void set_receiverphonenumber(::google::protobuf::uint32 value);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required string comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required string orderId = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 6;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Pay123MuaOrder)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_receiverphonenumber();
  inline void clear_has_receiverphonenumber();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pin_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 receiverphonenumber_;
  ::google::protobuf::uint64 amount_;
  ::std::string* comment_;
  ::std::string* orderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Pay123MuaOrder* default_instance_;
};
// -------------------------------------------------------------------

class Pay123MuaOrderReply : public ::google::protobuf::Message {
 public:
  Pay123MuaOrderReply();
  virtual ~Pay123MuaOrderReply();

  Pay123MuaOrderReply(const Pay123MuaOrderReply& from);

  inline Pay123MuaOrderReply& operator=(const Pay123MuaOrderReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pay123MuaOrderReply& default_instance();

  void Swap(Pay123MuaOrderReply* other);

  // implements Message ----------------------------------------------

  Pay123MuaOrderReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pay123MuaOrderReply& from);
  void MergeFrom(const Pay123MuaOrderReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Pay123MuaOrderReply_Result Result;
  static const Result SUCCESS = Pay123MuaOrderReply_Result_SUCCESS;
  static const Result FAILED = Pay123MuaOrderReply_Result_FAILED;
  static const Result ACCESS_DENIED = Pay123MuaOrderReply_Result_ACCESS_DENIED;
  static inline bool Result_IsValid(int value) {
    return Pay123MuaOrderReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    Pay123MuaOrderReply_Result_Result_MIN;
  static const Result Result_MAX =
    Pay123MuaOrderReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    Pay123MuaOrderReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return Pay123MuaOrderReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return Pay123MuaOrderReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return Pay123MuaOrderReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required .com.mservice.momo.msg.Pay123MuaOrderReply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::com::mservice::momo::msg::Pay123MuaOrderReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::Pay123MuaOrderReply_Result value);

  // optional string transactionId = 3;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 3;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.Pay123MuaOrderReply)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  int result_;
  ::std::string* transactionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static Pay123MuaOrderReply* default_instance_;
};
// -------------------------------------------------------------------

class TransactionFee : public ::google::protobuf::Message {
 public:
  TransactionFee();
  virtual ~TransactionFee();

  TransactionFee(const TransactionFee& from);

  inline TransactionFee& operator=(const TransactionFee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionFee& default_instance();

  void Swap(TransactionFee* other);

  // implements Message ----------------------------------------------

  TransactionFee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionFee& from);
  void MergeFrom(const TransactionFee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double dynamicFee = 1;
  inline bool has_dynamicfee() const;
  inline void clear_dynamicfee();
  static const int kDynamicFeeFieldNumber = 1;
  inline double dynamicfee() const;
  inline void set_dynamicfee(double value);

  // optional uint32 staticFee = 2;
  inline bool has_staticfee() const;
  inline void clear_staticfee();
  static const int kStaticFeeFieldNumber = 2;
  inline ::google::protobuf::uint32 staticfee() const;
  inline void set_staticfee(::google::protobuf::uint32 value);

  // optional string bankId = 3;
  inline bool has_bankid() const;
  inline void clear_bankid();
  static const int kBankIdFieldNumber = 3;
  inline const ::std::string& bankid() const;
  inline void set_bankid(const ::std::string& value);
  inline void set_bankid(const char* value);
  inline void set_bankid(const char* value, size_t size);
  inline ::std::string* mutable_bankid();
  inline ::std::string* release_bankid();
  inline void set_allocated_bankid(::std::string* bankid);

  // optional uint32 transType = 4;
  inline bool has_transtype() const;
  inline void clear_transtype();
  static const int kTransTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 transtype() const;
  inline void set_transtype(::google::protobuf::uint32 value);

  // optional uint32 channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint32 ioCity = 6;
  inline bool has_iocity() const;
  inline void clear_iocity();
  static const int kIoCityFieldNumber = 6;
  inline ::google::protobuf::uint32 iocity() const;
  inline void set_iocity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.TransactionFee)
 private:
  inline void set_has_dynamicfee();
  inline void clear_has_dynamicfee();
  inline void set_has_staticfee();
  inline void clear_has_staticfee();
  inline void set_has_bankid();
  inline void clear_has_bankid();
  inline void set_has_transtype();
  inline void clear_has_transtype();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_iocity();
  inline void clear_has_iocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double dynamicfee_;
  ::std::string* bankid_;
  ::google::protobuf::uint32 staticfee_;
  ::google::protobuf::uint32 transtype_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 iocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static TransactionFee* default_instance_;
};
// -------------------------------------------------------------------

class GetTransactionFee : public ::google::protobuf::Message {
 public:
  GetTransactionFee();
  virtual ~GetTransactionFee();

  GetTransactionFee(const GetTransactionFee& from);

  inline GetTransactionFee& operator=(const GetTransactionFee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransactionFee& default_instance();

  void Swap(GetTransactionFee* other);

  // implements Message ----------------------------------------------

  GetTransactionFee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTransactionFee& from);
  void MergeFrom(const GetTransactionFee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetTransactionFee)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetTransactionFee* default_instance_;
};
// -------------------------------------------------------------------

class GetTransactionFeeReply : public ::google::protobuf::Message {
 public:
  GetTransactionFeeReply();
  virtual ~GetTransactionFeeReply();

  GetTransactionFeeReply(const GetTransactionFeeReply& from);

  inline GetTransactionFeeReply& operator=(const GetTransactionFeeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransactionFeeReply& default_instance();

  void Swap(GetTransactionFeeReply* other);

  // implements Message ----------------------------------------------

  GetTransactionFeeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTransactionFeeReply& from);
  void MergeFrom(const GetTransactionFeeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mservice.momo.msg.TransactionFee transactionFees = 1;
  inline int transactionfees_size() const;
  inline void clear_transactionfees();
  static const int kTransactionFeesFieldNumber = 1;
  inline const ::com::mservice::momo::msg::TransactionFee& transactionfees(int index) const;
  inline ::com::mservice::momo::msg::TransactionFee* mutable_transactionfees(int index);
  inline ::com::mservice::momo::msg::TransactionFee* add_transactionfees();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::TransactionFee >&
      transactionfees() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::TransactionFee >*
      mutable_transactionfees();

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetTransactionFeeReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::TransactionFee > transactionfees_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetTransactionFeeReply* default_instance_;
};
// -------------------------------------------------------------------

class PayAirlineTicket : public ::google::protobuf::Message {
 public:
  PayAirlineTicket();
  virtual ~PayAirlineTicket();

  PayAirlineTicket(const PayAirlineTicket& from);

  inline PayAirlineTicket& operator=(const PayAirlineTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayAirlineTicket& default_instance();

  void Swap(PayAirlineTicket* other);

  // implements Message ----------------------------------------------

  PayAirlineTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayAirlineTicket& from);
  void MergeFrom(const PayAirlineTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string providerId = 2;
  inline bool has_providerid() const;
  inline void clear_providerid();
  static const int kProviderIdFieldNumber = 2;
  inline const ::std::string& providerid() const;
  inline void set_providerid(const ::std::string& value);
  inline void set_providerid(const char* value);
  inline void set_providerid(const char* value, size_t size);
  inline ::std::string* mutable_providerid();
  inline ::std::string* release_providerid();
  inline void set_allocated_providerid(::std::string* providerid);

  // required string billId = 3;
  inline bool has_billid() const;
  inline void clear_billid();
  static const int kBillIdFieldNumber = 3;
  inline const ::std::string& billid() const;
  inline void set_billid(const ::std::string& value);
  inline void set_billid(const char* value);
  inline void set_billid(const char* value, size_t size);
  inline ::std::string* mutable_billid();
  inline ::std::string* release_billid();
  inline void set_allocated_billid(::std::string* billid);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.PayAirlineTicket)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_providerid();
  inline void clear_has_providerid();
  inline void set_has_billid();
  inline void clear_has_billid();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* providerid_;
  ::std::string* billid_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static PayAirlineTicket* default_instance_;
};
// -------------------------------------------------------------------

class PayAirlineTicketReply : public ::google::protobuf::Message {
 public:
  PayAirlineTicketReply();
  virtual ~PayAirlineTicketReply();

  PayAirlineTicketReply(const PayAirlineTicketReply& from);

  inline PayAirlineTicketReply& operator=(const PayAirlineTicketReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayAirlineTicketReply& default_instance();

  void Swap(PayAirlineTicketReply* other);

  // implements Message ----------------------------------------------

  PayAirlineTicketReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayAirlineTicketReply& from);
  void MergeFrom(const PayAirlineTicketReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PayAirlineTicketReply_Result Result;
  static const Result SUCCESS = PayAirlineTicketReply_Result_SUCCESS;
  static const Result FAIL = PayAirlineTicketReply_Result_FAIL;
  static inline bool Result_IsValid(int value) {
    return PayAirlineTicketReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    PayAirlineTicketReply_Result_Result_MIN;
  static const Result Result_MAX =
    PayAirlineTicketReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    PayAirlineTicketReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return PayAirlineTicketReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return PayAirlineTicketReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return PayAirlineTicketReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.mservice.momo.msg.PayAirlineTicketReply.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::mservice::momo::msg::PayAirlineTicketReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::PayAirlineTicketReply_Result value);

  // optional uint64 transactionId = 2;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 transactionid() const;
  inline void set_transactionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.PayAirlineTicketReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 transactionid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static PayAirlineTicketReply* default_instance_;
};
// -------------------------------------------------------------------

class WithdrawByAgent : public ::google::protobuf::Message {
 public:
  WithdrawByAgent();
  virtual ~WithdrawByAgent();

  WithdrawByAgent(const WithdrawByAgent& from);

  inline WithdrawByAgent& operator=(const WithdrawByAgent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WithdrawByAgent& default_instance();

  void Swap(WithdrawByAgent* other);

  // implements Message ----------------------------------------------

  WithdrawByAgent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WithdrawByAgent& from);
  void MergeFrom(const WithdrawByAgent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required uint32 agentPhone = 2;
  inline bool has_agentphone() const;
  inline void clear_agentphone();
  static const int kAgentPhoneFieldNumber = 2;
  inline ::google::protobuf::uint32 agentphone() const;
  inline void set_agentphone(::google::protobuf::uint32 value);

  // required uint64 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.WithdrawByAgent)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_agentphone();
  inline void clear_has_agentphone();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::uint32 agentphone_;
  ::google::protobuf::uint64 amount_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static WithdrawByAgent* default_instance_;
};
// -------------------------------------------------------------------

class WithdrawByAgentReply : public ::google::protobuf::Message {
 public:
  WithdrawByAgentReply();
  virtual ~WithdrawByAgentReply();

  WithdrawByAgentReply(const WithdrawByAgentReply& from);

  inline WithdrawByAgentReply& operator=(const WithdrawByAgentReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WithdrawByAgentReply& default_instance();

  void Swap(WithdrawByAgentReply* other);

  // implements Message ----------------------------------------------

  WithdrawByAgentReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WithdrawByAgentReply& from);
  void MergeFrom(const WithdrawByAgentReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WithdrawByAgentReply_Result Result;
  static const Result SUCCESS = WithdrawByAgentReply_Result_SUCCESS;
  static const Result FAIL = WithdrawByAgentReply_Result_FAIL;
  static inline bool Result_IsValid(int value) {
    return WithdrawByAgentReply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    WithdrawByAgentReply_Result_Result_MIN;
  static const Result Result_MAX =
    WithdrawByAgentReply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    WithdrawByAgentReply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return WithdrawByAgentReply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return WithdrawByAgentReply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return WithdrawByAgentReply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.mservice.momo.msg.WithdrawByAgentReply.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::mservice::momo::msg::WithdrawByAgentReply_Result result() const;
  inline void set_result(::com::mservice::momo::msg::WithdrawByAgentReply_Result value);

  // optional string transactionId = 2;
  inline bool has_transactionid() const;
  inline void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  inline const ::std::string& transactionid() const;
  inline void set_transactionid(const ::std::string& value);
  inline void set_transactionid(const char* value);
  inline void set_transactionid(const char* value, size_t size);
  inline ::std::string* mutable_transactionid();
  inline ::std::string* release_transactionid();
  inline void set_allocated_transactionid(::std::string* transactionid);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.WithdrawByAgentReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_transactionid();
  inline void clear_has_transactionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* transactionid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static WithdrawByAgentReply* default_instance_;
};
// -------------------------------------------------------------------

class SendSms : public ::google::protobuf::Message {
 public:
  SendSms();
  virtual ~SendSms();

  SendSms(const SendSms& from);

  inline SendSms& operator=(const SendSms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendSms& default_instance();

  void Swap(SendSms* other);

  // implements Message ----------------------------------------------

  SendSms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendSms& from);
  void MergeFrom(const SendSms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.SendSms)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static SendSms* default_instance_;
};
// -------------------------------------------------------------------

class SendSmsReply : public ::google::protobuf::Message {
 public:
  SendSmsReply();
  virtual ~SendSmsReply();

  SendSmsReply(const SendSmsReply& from);

  inline SendSmsReply& operator=(const SendSmsReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendSmsReply& default_instance();

  void Swap(SendSmsReply* other);

  // implements Message ----------------------------------------------

  SendSmsReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendSmsReply& from);
  void MergeFrom(const SendSmsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.SendSmsReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static SendSmsReply* default_instance_;
};
// -------------------------------------------------------------------

class BankOutManual : public ::google::protobuf::Message {
 public:
  BankOutManual();
  virtual ~BankOutManual();

  BankOutManual(const BankOutManual& from);

  inline BankOutManual& operator=(const BankOutManual& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankOutManual& default_instance();

  void Swap(BankOutManual* other);

  // implements Message ----------------------------------------------

  BankOutManual* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankOutManual& from);
  void MergeFrom(const BankOutManual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // required string bankId = 2;
  inline bool has_bankid() const;
  inline void clear_bankid();
  static const int kBankIdFieldNumber = 2;
  inline const ::std::string& bankid() const;
  inline void set_bankid(const ::std::string& value);
  inline void set_bankid(const char* value);
  inline void set_bankid(const char* value, size_t size);
  inline ::std::string* mutable_bankid();
  inline ::std::string* release_bankid();
  inline void set_allocated_bankid(::std::string* bankid);

  // required string holderNumber = 3;
  inline bool has_holdernumber() const;
  inline void clear_holdernumber();
  static const int kHolderNumberFieldNumber = 3;
  inline const ::std::string& holdernumber() const;
  inline void set_holdernumber(const ::std::string& value);
  inline void set_holdernumber(const char* value);
  inline void set_holdernumber(const char* value, size_t size);
  inline ::std::string* mutable_holdernumber();
  inline ::std::string* release_holdernumber();
  inline void set_allocated_holdernumber(::std::string* holdernumber);

  // required uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // required string holderName = 5;
  inline bool has_holdername() const;
  inline void clear_holdername();
  static const int kHolderNameFieldNumber = 5;
  inline const ::std::string& holdername() const;
  inline void set_holdername(const ::std::string& value);
  inline void set_holdername(const char* value);
  inline void set_holdername(const char* value, size_t size);
  inline ::std::string* mutable_holdername();
  inline ::std::string* release_holdername();
  inline void set_allocated_holdername(::std::string* holdername);

  // required string bankName = 6;
  inline bool has_bankname() const;
  inline void clear_bankname();
  static const int kBankNameFieldNumber = 6;
  inline const ::std::string& bankname() const;
  inline void set_bankname(const ::std::string& value);
  inline void set_bankname(const char* value);
  inline void set_bankname(const char* value, size_t size);
  inline ::std::string* mutable_bankname();
  inline ::std::string* release_bankname();
  inline void set_allocated_bankname(::std::string* bankname);

  // optional string comment = 7;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 7;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required int32 inOutCity = 8;
  inline bool has_inoutcity() const;
  inline void clear_inoutcity();
  static const int kInOutCityFieldNumber = 8;
  inline ::google::protobuf::int32 inoutcity() const;
  inline void set_inoutcity(::google::protobuf::int32 value);

  // optional string bankBranch = 9;
  inline bool has_bankbranch() const;
  inline void clear_bankbranch();
  static const int kBankBranchFieldNumber = 9;
  inline const ::std::string& bankbranch() const;
  inline void set_bankbranch(const ::std::string& value);
  inline void set_bankbranch(const char* value);
  inline void set_bankbranch(const char* value, size_t size);
  inline ::std::string* mutable_bankbranch();
  inline ::std::string* release_bankbranch();
  inline void set_allocated_bankbranch(::std::string* bankbranch);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankOutManual)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_bankid();
  inline void clear_has_bankid();
  inline void set_has_holdernumber();
  inline void clear_has_holdernumber();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_holdername();
  inline void clear_has_holdername();
  inline void set_has_bankname();
  inline void clear_has_bankname();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_inoutcity();
  inline void clear_has_inoutcity();
  inline void set_has_bankbranch();
  inline void clear_has_bankbranch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bankid_;
  ::std::string* holdernumber_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 phonenumber_;
  ::google::protobuf::int32 inoutcity_;
  ::std::string* holdername_;
  ::std::string* bankname_;
  ::std::string* comment_;
  ::std::string* bankbranch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankOutManual* default_instance_;
};
// -------------------------------------------------------------------

class BankOutManualReply : public ::google::protobuf::Message {
 public:
  BankOutManualReply();
  virtual ~BankOutManualReply();

  BankOutManualReply(const BankOutManualReply& from);

  inline BankOutManualReply& operator=(const BankOutManualReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankOutManualReply& default_instance();

  void Swap(BankOutManualReply* other);

  // implements Message ----------------------------------------------

  BankOutManualReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankOutManualReply& from);
  void MergeFrom(const BankOutManualReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::uint32 error() const;
  inline void set_error(::google::protobuf::uint32 value);

  // required uint64 tranId = 2;
  inline bool has_tranid() const;
  inline void clear_tranid();
  static const int kTranIdFieldNumber = 2;
  inline ::google::protobuf::uint64 tranid() const;
  inline void set_tranid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.BankOutManualReply)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_tranid();
  inline void clear_has_tranid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tranid_;
  ::google::protobuf::uint32 error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static BankOutManualReply* default_instance_;
};
// -------------------------------------------------------------------

class IsMomoer : public ::google::protobuf::Message {
 public:
  IsMomoer();
  virtual ~IsMomoer();

  IsMomoer(const IsMomoer& from);

  inline IsMomoer& operator=(const IsMomoer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsMomoer& default_instance();

  void Swap(IsMomoer* other);

  // implements Message ----------------------------------------------

  IsMomoer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsMomoer& from);
  void MergeFrom(const IsMomoer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phoneNumber = 1;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 phonenumber() const;
  inline void set_phonenumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.IsMomoer)
 private:
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phonenumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static IsMomoer* default_instance_;
};
// -------------------------------------------------------------------

class IsMomoerReply : public ::google::protobuf::Message {
 public:
  IsMomoerReply();
  virtual ~IsMomoerReply();

  IsMomoerReply(const IsMomoerReply& from);

  inline IsMomoerReply& operator=(const IsMomoerReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsMomoerReply& default_instance();

  void Swap(IsMomoerReply* other);

  // implements Message ----------------------------------------------

  IsMomoerReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsMomoerReply& from);
  void MergeFrom(const IsMomoerReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isMomoer = 1;
  inline bool has_ismomoer() const;
  inline void clear_ismomoer();
  static const int kIsMomoerFieldNumber = 1;
  inline bool ismomoer() const;
  inline void set_ismomoer(bool value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.IsMomoerReply)
 private:
  inline void set_has_ismomoer();
  inline void clear_has_ismomoer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ismomoer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static IsMomoerReply* default_instance_;
};
// -------------------------------------------------------------------

class CountAgentTran : public ::google::protobuf::Message {
 public:
  CountAgentTran();
  virtual ~CountAgentTran();

  CountAgentTran(const CountAgentTran& from);

  inline CountAgentTran& operator=(const CountAgentTran& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountAgentTran& default_instance();

  void Swap(CountAgentTran* other);

  // implements Message ----------------------------------------------

  CountAgentTran* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountAgentTran& from);
  void MergeFrom(const CountAgentTran& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 phone = 1;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 1;
  inline ::google::protobuf::uint32 phone() const;
  inline void set_phone(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.CountAgentTran)
 private:
  inline void set_has_phone();
  inline void clear_has_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phone_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static CountAgentTran* default_instance_;
};
// -------------------------------------------------------------------

class CountAgentTranReply : public ::google::protobuf::Message {
 public:
  CountAgentTranReply();
  virtual ~CountAgentTranReply();

  CountAgentTranReply(const CountAgentTranReply& from);

  inline CountAgentTranReply& operator=(const CountAgentTranReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountAgentTranReply& default_instance();

  void Swap(CountAgentTranReply* other);

  // implements Message ----------------------------------------------

  CountAgentTranReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountAgentTranReply& from);
  void MergeFrom(const CountAgentTranReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 counter = 1;
  inline bool has_counter() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 1;
  inline ::google::protobuf::uint64 counter() const;
  inline void set_counter(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.CountAgentTranReply)
 private:
  inline void set_has_counter();
  inline void clear_has_counter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 counter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static CountAgentTranReply* default_instance_;
};
// -------------------------------------------------------------------

class GetServiceLayout : public ::google::protobuf::Message {
 public:
  GetServiceLayout();
  virtual ~GetServiceLayout();

  GetServiceLayout(const GetServiceLayout& from);

  inline GetServiceLayout& operator=(const GetServiceLayout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceLayout& default_instance();

  void Swap(GetServiceLayout* other);

  // implements Message ----------------------------------------------

  GetServiceLayout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceLayout& from);
  void MergeFrom(const GetServiceLayout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetServiceLayout)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetServiceLayout* default_instance_;
};
// -------------------------------------------------------------------

class GetServicelayoutReply : public ::google::protobuf::Message {
 public:
  GetServicelayoutReply();
  virtual ~GetServicelayoutReply();

  GetServicelayoutReply(const GetServicelayoutReply& from);

  inline GetServicelayoutReply& operator=(const GetServicelayoutReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServicelayoutReply& default_instance();

  void Swap(GetServicelayoutReply* other);

  // implements Message ----------------------------------------------

  GetServicelayoutReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServicelayoutReply& from);
  void MergeFrom(const GetServicelayoutReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.GetServicelayoutReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static GetServicelayoutReply* default_instance_;
};
// -------------------------------------------------------------------

class CompeleteTran : public ::google::protobuf::Message {
 public:
  CompeleteTran();
  virtual ~CompeleteTran();

  CompeleteTran(const CompeleteTran& from);

  inline CompeleteTran& operator=(const CompeleteTran& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompeleteTran& default_instance();

  void Swap(CompeleteTran* other);

  // implements Message ----------------------------------------------

  CompeleteTran* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompeleteTran& from);
  void MergeFrom(const CompeleteTran& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tranType = 1;
  inline bool has_trantype() const;
  inline void clear_trantype();
  static const int kTranTypeFieldNumber = 1;
  inline ::google::protobuf::int32 trantype() const;
  inline void set_trantype(::google::protobuf::int32 value);

  // required string otp = 2;
  inline bool has_otp() const;
  inline void clear_otp();
  static const int kOtpFieldNumber = 2;
  inline const ::std::string& otp() const;
  inline void set_otp(const ::std::string& value);
  inline void set_otp(const char* value);
  inline void set_otp(const char* value, size_t size);
  inline ::std::string* mutable_otp();
  inline ::std::string* release_otp();
  inline void set_allocated_otp(::std::string* otp);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.CompeleteTran)
 private:
  inline void set_has_trantype();
  inline void clear_has_trantype();
  inline void set_has_otp();
  inline void clear_has_otp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* otp_;
  ::google::protobuf::int32 trantype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static CompeleteTran* default_instance_;
};
// -------------------------------------------------------------------

class MakeTranReply : public ::google::protobuf::Message {
 public:
  MakeTranReply();
  virtual ~MakeTranReply();

  MakeTranReply(const MakeTranReply& from);

  inline MakeTranReply& operator=(const MakeTranReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeTranReply& default_instance();

  void Swap(MakeTranReply* other);

  // implements Message ----------------------------------------------

  MakeTranReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MakeTranReply& from);
  void MergeFrom(const MakeTranReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.mservice.momo.msg.MakeTranReply)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdModels_2eproto();
  friend void protobuf_AssignDesc_CmdModels_2eproto();
  friend void protobuf_ShutdownFile_CmdModels_2eproto();

  void InitAsDefaultInstance();
  static MakeTranReply* default_instance_;
};
// ===================================================================


// ===================================================================

// Error

// required sint32 code = 1;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Error::code() const {
  return code_;
}
inline void Error::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional string description = 2;
inline bool Error::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Error::description() const {
  return *description_;
}
inline void Error::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Error::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Error::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Error::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Error::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendOtp

// required uint32 phoneNumber = 1;
inline bool SendOtp::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendOtp::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendOtp::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendOtp::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 SendOtp::phonenumber() const {
  return phonenumber_;
}
inline void SendOtp::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// -------------------------------------------------------------------

// SendOtpReply

// required uint32 phoneNumber = 1;
inline bool SendOtpReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendOtpReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendOtpReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendOtpReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 SendOtpReply::phonenumber() const {
  return phonenumber_;
}
inline void SendOtpReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string otp = 2;
inline bool SendOtpReply::has_otp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendOtpReply::set_has_otp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendOtpReply::clear_has_otp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendOtpReply::clear_otp() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    otp_->clear();
  }
  clear_has_otp();
}
inline const ::std::string& SendOtpReply::otp() const {
  return *otp_;
}
inline void SendOtpReply::set_otp(const ::std::string& value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void SendOtpReply::set_otp(const char* value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void SendOtpReply::set_otp(const char* value, size_t size) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendOtpReply::mutable_otp() {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  return otp_;
}
inline ::std::string* SendOtpReply::release_otp() {
  clear_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otp_;
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendOtpReply::set_allocated_otp(::std::string* otp) {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (otp) {
    set_has_otp();
    otp_ = otp;
  } else {
    clear_has_otp();
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VerifyOtp

// required uint32 phoneNumber = 1;
inline bool VerifyOtp::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyOtp::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyOtp::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyOtp::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 VerifyOtp::phonenumber() const {
  return phonenumber_;
}
inline void VerifyOtp::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string otp = 2;
inline bool VerifyOtp::has_otp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyOtp::set_has_otp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyOtp::clear_has_otp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyOtp::clear_otp() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    otp_->clear();
  }
  clear_has_otp();
}
inline const ::std::string& VerifyOtp::otp() const {
  return *otp_;
}
inline void VerifyOtp::set_otp(const ::std::string& value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void VerifyOtp::set_otp(const char* value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void VerifyOtp::set_otp(const char* value, size_t size) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyOtp::mutable_otp() {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  return otp_;
}
inline ::std::string* VerifyOtp::release_otp() {
  clear_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otp_;
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyOtp::set_allocated_otp(::std::string* otp) {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (otp) {
    set_has_otp();
    otp_ = otp;
  } else {
    clear_has_otp();
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VerifyOtpReply

// required uint32 phoneNumber = 1;
inline bool VerifyOtpReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyOtpReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyOtpReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyOtpReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 VerifyOtpReply::phonenumber() const {
  return phonenumber_;
}
inline void VerifyOtpReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.VerifyOtpReply.ResultCode result = 2;
inline bool VerifyOtpReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyOtpReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyOtpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyOtpReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::VerifyOtpReply_ResultCode VerifyOtpReply::result() const {
  return static_cast< ::com::mservice::momo::msg::VerifyOtpReply_ResultCode >(result_);
}
inline void VerifyOtpReply::set_result(::com::mservice::momo::msg::VerifyOtpReply_ResultCode value) {
  assert(::com::mservice::momo::msg::VerifyOtpReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Register

// required uint32 phoneNumber = 1;
inline bool Register::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 Register::phonenumber() const {
  return phonenumber_;
}
inline void Register::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string name = 2;
inline bool Register::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Register::name() const {
  return *name_;
}
inline void Register::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Register::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Register::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Register::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cardId = 3;
inline bool Register::has_cardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Register::set_has_cardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Register::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Register::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& Register::cardid() const {
  return *cardid_;
}
inline void Register::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void Register::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void Register::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* Register::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_cardid(::std::string* cardid) {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (cardid) {
    set_has_cardid();
    cardid_ = cardid;
  } else {
    clear_has_cardid();
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pin = 4;
inline bool Register::has_pin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Register::set_has_pin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Register::clear_has_pin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Register::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& Register::pin() const {
  return *pin_;
}
inline void Register::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Register::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Register::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* Register::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 5;
inline bool Register::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Register::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Register::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Register::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Register::email() const {
  return *email_;
}
inline void Register::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Register::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Register::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Register::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string question = 6;
inline bool Register::has_question() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Register::set_has_question() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Register::clear_has_question() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Register::clear_question() {
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    question_->clear();
  }
  clear_has_question();
}
inline const ::std::string& Register::question() const {
  return *question_;
}
inline void Register::set_question(const ::std::string& value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void Register::set_question(const char* value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void Register::set_question(const char* value, size_t size) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_question() {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  return question_;
}
inline ::std::string* Register::release_question() {
  clear_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = question_;
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_question(::std::string* question) {
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (question) {
    set_has_question();
    question_ = question;
  } else {
    clear_has_question();
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string answer = 7;
inline bool Register::has_answer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Register::set_has_answer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Register::clear_has_answer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Register::clear_answer() {
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    answer_->clear();
  }
  clear_has_answer();
}
inline const ::std::string& Register::answer() const {
  return *answer_;
}
inline void Register::set_answer(const ::std::string& value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
}
inline void Register::set_answer(const char* value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
}
inline void Register::set_answer(const char* value, size_t size) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  answer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_answer() {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  return answer_;
}
inline ::std::string* Register::release_answer() {
  clear_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = answer_;
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_answer(::std::string* answer) {
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (answer) {
    set_has_answer();
    answer_ = answer;
  } else {
    clear_has_answer();
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegisterReply

// required uint32 phoneNumber = 1;
inline bool RegisterReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 RegisterReply::phonenumber() const {
  return phonenumber_;
}
inline void RegisterReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.RegisterReply.ResultCode result = 2;
inline bool RegisterReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::RegisterReply_ResultCode RegisterReply::result() const {
  return static_cast< ::com::mservice::momo::msg::RegisterReply_ResultCode >(result_);
}
inline void RegisterReply::set_result(::com::mservice::momo::msg::RegisterReply_ResultCode value) {
  assert(::com::mservice::momo::msg::RegisterReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetAgentInfo

// required uint32 phoneNumber = 1;
inline bool GetAgentInfo::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAgentInfo::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAgentInfo::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAgentInfo::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetAgentInfo::phonenumber() const {
  return phonenumber_;
}
inline void GetAgentInfo::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// -------------------------------------------------------------------

// GetAgentInfoReply

// required uint32 phoneNumber = 1;
inline bool GetAgentInfoReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAgentInfoReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAgentInfoReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAgentInfoReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetAgentInfoReply::phonenumber() const {
  return phonenumber_;
}
inline void GetAgentInfoReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// optional string name = 2;
inline bool GetAgentInfoReply::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAgentInfoReply::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAgentInfoReply::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAgentInfoReply::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GetAgentInfoReply::name() const {
  return *name_;
}
inline void GetAgentInfoReply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GetAgentInfoReply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GetAgentInfoReply::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GetAgentInfoReply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cardId = 3;
inline bool GetAgentInfoReply::has_cardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAgentInfoReply::set_has_cardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAgentInfoReply::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAgentInfoReply::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& GetAgentInfoReply::cardid() const {
  return *cardid_;
}
inline void GetAgentInfoReply::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void GetAgentInfoReply::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void GetAgentInfoReply::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* GetAgentInfoReply::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_cardid(::std::string* cardid) {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (cardid) {
    set_has_cardid();
    cardid_ = cardid;
  } else {
    clear_has_cardid();
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pin = 4;
inline bool GetAgentInfoReply::has_pin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAgentInfoReply::set_has_pin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAgentInfoReply::clear_has_pin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAgentInfoReply::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& GetAgentInfoReply::pin() const {
  return *pin_;
}
inline void GetAgentInfoReply::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void GetAgentInfoReply::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void GetAgentInfoReply::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* GetAgentInfoReply::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 5;
inline bool GetAgentInfoReply::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetAgentInfoReply::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetAgentInfoReply::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetAgentInfoReply::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& GetAgentInfoReply::email() const {
  return *email_;
}
inline void GetAgentInfoReply::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void GetAgentInfoReply::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void GetAgentInfoReply::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* GetAgentInfoReply::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string question = 6;
inline bool GetAgentInfoReply::has_question() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetAgentInfoReply::set_has_question() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetAgentInfoReply::clear_has_question() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetAgentInfoReply::clear_question() {
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    question_->clear();
  }
  clear_has_question();
}
inline const ::std::string& GetAgentInfoReply::question() const {
  return *question_;
}
inline void GetAgentInfoReply::set_question(const ::std::string& value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void GetAgentInfoReply::set_question(const char* value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void GetAgentInfoReply::set_question(const char* value, size_t size) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_question() {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  return question_;
}
inline ::std::string* GetAgentInfoReply::release_question() {
  clear_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = question_;
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_question(::std::string* question) {
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (question) {
    set_has_question();
    question_ = question;
  } else {
    clear_has_question();
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string answer = 7;
inline bool GetAgentInfoReply::has_answer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetAgentInfoReply::set_has_answer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetAgentInfoReply::clear_has_answer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetAgentInfoReply::clear_answer() {
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    answer_->clear();
  }
  clear_has_answer();
}
inline const ::std::string& GetAgentInfoReply::answer() const {
  return *answer_;
}
inline void GetAgentInfoReply::set_answer(const ::std::string& value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
}
inline void GetAgentInfoReply::set_answer(const char* value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
}
inline void GetAgentInfoReply::set_answer(const char* value, size_t size) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  answer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_answer() {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    answer_ = new ::std::string;
  }
  return answer_;
}
inline ::std::string* GetAgentInfoReply::release_answer() {
  clear_has_answer();
  if (answer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = answer_;
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_answer(::std::string* answer) {
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (answer) {
    set_has_answer();
    answer_ = answer;
  } else {
    clear_has_answer();
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankAccount = 8;
inline bool GetAgentInfoReply::has_bankaccount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetAgentInfoReply::set_has_bankaccount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetAgentInfoReply::clear_has_bankaccount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetAgentInfoReply::clear_bankaccount() {
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    bankaccount_->clear();
  }
  clear_has_bankaccount();
}
inline const ::std::string& GetAgentInfoReply::bankaccount() const {
  return *bankaccount_;
}
inline void GetAgentInfoReply::set_bankaccount(const ::std::string& value) {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  bankaccount_->assign(value);
}
inline void GetAgentInfoReply::set_bankaccount(const char* value) {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  bankaccount_->assign(value);
}
inline void GetAgentInfoReply::set_bankaccount(const char* value, size_t size) {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  bankaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_bankaccount() {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  return bankaccount_;
}
inline ::std::string* GetAgentInfoReply::release_bankaccount() {
  clear_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankaccount_;
    bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_bankaccount(::std::string* bankaccount) {
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bankaccount_;
  }
  if (bankaccount) {
    set_has_bankaccount();
    bankaccount_ = bankaccount;
  } else {
    clear_has_bankaccount();
    bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankCode = 9;
inline bool GetAgentInfoReply::has_bankcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetAgentInfoReply::set_has_bankcode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetAgentInfoReply::clear_has_bankcode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetAgentInfoReply::clear_bankcode() {
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    bankcode_->clear();
  }
  clear_has_bankcode();
}
inline const ::std::string& GetAgentInfoReply::bankcode() const {
  return *bankcode_;
}
inline void GetAgentInfoReply::set_bankcode(const ::std::string& value) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(value);
}
inline void GetAgentInfoReply::set_bankcode(const char* value) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(value);
}
inline void GetAgentInfoReply::set_bankcode(const char* value, size_t size) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_bankcode() {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  return bankcode_;
}
inline ::std::string* GetAgentInfoReply::release_bankcode() {
  clear_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankcode_;
    bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_bankcode(::std::string* bankcode) {
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcode_;
  }
  if (bankcode) {
    set_has_bankcode();
    bankcode_ = bankcode;
  } else {
    clear_has_bankcode();
    bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankName = 10;
inline bool GetAgentInfoReply::has_bankname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetAgentInfoReply::set_has_bankname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetAgentInfoReply::clear_has_bankname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetAgentInfoReply::clear_bankname() {
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    bankname_->clear();
  }
  clear_has_bankname();
}
inline const ::std::string& GetAgentInfoReply::bankname() const {
  return *bankname_;
}
inline void GetAgentInfoReply::set_bankname(const ::std::string& value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
}
inline void GetAgentInfoReply::set_bankname(const char* value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
}
inline void GetAgentInfoReply::set_bankname(const char* value, size_t size) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_bankname() {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  return bankname_;
}
inline ::std::string* GetAgentInfoReply::release_bankname() {
  clear_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankname_;
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_bankname(::std::string* bankname) {
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankname_;
  }
  if (bankname) {
    set_has_bankname();
    bankname_ = bankname;
  } else {
    clear_has_bankname();
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 point = 11;
inline bool GetAgentInfoReply::has_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetAgentInfoReply::set_has_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetAgentInfoReply::clear_has_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetAgentInfoReply::clear_point() {
  point_ = GOOGLE_ULONGLONG(0);
  clear_has_point();
}
inline ::google::protobuf::uint64 GetAgentInfoReply::point() const {
  return point_;
}
inline void GetAgentInfoReply::set_point(::google::protobuf::uint64 value) {
  set_has_point();
  point_ = value;
}

// optional uint64 momo = 12;
inline bool GetAgentInfoReply::has_momo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetAgentInfoReply::set_has_momo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetAgentInfoReply::clear_has_momo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetAgentInfoReply::clear_momo() {
  momo_ = GOOGLE_ULONGLONG(0);
  clear_has_momo();
}
inline ::google::protobuf::uint64 GetAgentInfoReply::momo() const {
  return momo_;
}
inline void GetAgentInfoReply::set_momo(::google::protobuf::uint64 value) {
  set_has_momo();
  momo_ = value;
}

// optional uint64 mload = 13;
inline bool GetAgentInfoReply::has_mload() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetAgentInfoReply::set_has_mload() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetAgentInfoReply::clear_has_mload() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetAgentInfoReply::clear_mload() {
  mload_ = GOOGLE_ULONGLONG(0);
  clear_has_mload();
}
inline ::google::protobuf::uint64 GetAgentInfoReply::mload() const {
  return mload_;
}
inline void GetAgentInfoReply::set_mload(::google::protobuf::uint64 value) {
  set_has_mload();
  mload_ = value;
}

// optional bool isNamedAccount = 14;
inline bool GetAgentInfoReply::has_isnamedaccount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetAgentInfoReply::set_has_isnamedaccount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetAgentInfoReply::clear_has_isnamedaccount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetAgentInfoReply::clear_isnamedaccount() {
  isnamedaccount_ = false;
  clear_has_isnamedaccount();
}
inline bool GetAgentInfoReply::isnamedaccount() const {
  return isnamedaccount_;
}
inline void GetAgentInfoReply::set_isnamedaccount(bool value) {
  set_has_isnamedaccount();
  isnamedaccount_ = value;
}

// optional bool isActive = 15;
inline bool GetAgentInfoReply::has_isactive() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GetAgentInfoReply::set_has_isactive() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GetAgentInfoReply::clear_has_isactive() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GetAgentInfoReply::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool GetAgentInfoReply::isactive() const {
  return isactive_;
}
inline void GetAgentInfoReply::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// optional string birthday = 16;
inline bool GetAgentInfoReply::has_birthday() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GetAgentInfoReply::set_has_birthday() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GetAgentInfoReply::clear_has_birthday() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GetAgentInfoReply::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& GetAgentInfoReply::birthday() const {
  return *birthday_;
}
inline void GetAgentInfoReply::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void GetAgentInfoReply::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void GetAgentInfoReply::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* GetAgentInfoReply::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 17;
inline bool GetAgentInfoReply::has_address() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GetAgentInfoReply::set_has_address() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GetAgentInfoReply::clear_has_address() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GetAgentInfoReply::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& GetAgentInfoReply::address() const {
  return *address_;
}
inline void GetAgentInfoReply::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void GetAgentInfoReply::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void GetAgentInfoReply::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAgentInfoReply::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* GetAgentInfoReply::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAgentInfoReply::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 createdDate = 18;
inline bool GetAgentInfoReply::has_createddate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GetAgentInfoReply::set_has_createddate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GetAgentInfoReply::clear_has_createddate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GetAgentInfoReply::clear_createddate() {
  createddate_ = GOOGLE_ULONGLONG(0);
  clear_has_createddate();
}
inline ::google::protobuf::uint64 GetAgentInfoReply::createddate() const {
  return createddate_;
}
inline void GetAgentInfoReply::set_createddate(::google::protobuf::uint64 value) {
  set_has_createddate();
  createddate_ = value;
}

// -------------------------------------------------------------------

// IsPinCorrect

// required uint32 phoneNumber = 1;
inline bool IsPinCorrect::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsPinCorrect::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsPinCorrect::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsPinCorrect::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 IsPinCorrect::phonenumber() const {
  return phonenumber_;
}
inline void IsPinCorrect::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// optional string pin = 2;
inline bool IsPinCorrect::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IsPinCorrect::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IsPinCorrect::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IsPinCorrect::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& IsPinCorrect::pin() const {
  return *pin_;
}
inline void IsPinCorrect::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void IsPinCorrect::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void IsPinCorrect::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IsPinCorrect::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* IsPinCorrect::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IsPinCorrect::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IsPinCorrectReply

// required uint32 phoneNumber = 1;
inline bool IsPinCorrectReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsPinCorrectReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsPinCorrectReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsPinCorrectReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 IsPinCorrectReply::phonenumber() const {
  return phonenumber_;
}
inline void IsPinCorrectReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.IsPinCorrectReply.ResultCode result = 2;
inline bool IsPinCorrectReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IsPinCorrectReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IsPinCorrectReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IsPinCorrectReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::IsPinCorrectReply_ResultCode IsPinCorrectReply::result() const {
  return static_cast< ::com::mservice::momo::msg::IsPinCorrectReply_ResultCode >(result_);
}
inline void IsPinCorrectReply::set_result(::com::mservice::momo::msg::IsPinCorrectReply_ResultCode value) {
  assert(::com::mservice::momo::msg::IsPinCorrectReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint64 locktill = 3;
inline bool IsPinCorrectReply::has_locktill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IsPinCorrectReply::set_has_locktill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IsPinCorrectReply::clear_has_locktill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IsPinCorrectReply::clear_locktill() {
  locktill_ = GOOGLE_ULONGLONG(0);
  clear_has_locktill();
}
inline ::google::protobuf::uint64 IsPinCorrectReply::locktill() const {
  return locktill_;
}
inline void IsPinCorrectReply::set_locktill(::google::protobuf::uint64 value) {
  set_has_locktill();
  locktill_ = value;
}

// -------------------------------------------------------------------

// ChangePin

// required uint32 phoneNumber = 1;
inline bool ChangePin::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePin::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePin::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePin::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 ChangePin::phonenumber() const {
  return phonenumber_;
}
inline void ChangePin::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string oldPin = 2;
inline bool ChangePin::has_oldpin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePin::set_has_oldpin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePin::clear_has_oldpin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePin::clear_oldpin() {
  if (oldpin_ != &::google::protobuf::internal::kEmptyString) {
    oldpin_->clear();
  }
  clear_has_oldpin();
}
inline const ::std::string& ChangePin::oldpin() const {
  return *oldpin_;
}
inline void ChangePin::set_oldpin(const ::std::string& value) {
  set_has_oldpin();
  if (oldpin_ == &::google::protobuf::internal::kEmptyString) {
    oldpin_ = new ::std::string;
  }
  oldpin_->assign(value);
}
inline void ChangePin::set_oldpin(const char* value) {
  set_has_oldpin();
  if (oldpin_ == &::google::protobuf::internal::kEmptyString) {
    oldpin_ = new ::std::string;
  }
  oldpin_->assign(value);
}
inline void ChangePin::set_oldpin(const char* value, size_t size) {
  set_has_oldpin();
  if (oldpin_ == &::google::protobuf::internal::kEmptyString) {
    oldpin_ = new ::std::string;
  }
  oldpin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePin::mutable_oldpin() {
  set_has_oldpin();
  if (oldpin_ == &::google::protobuf::internal::kEmptyString) {
    oldpin_ = new ::std::string;
  }
  return oldpin_;
}
inline ::std::string* ChangePin::release_oldpin() {
  clear_has_oldpin();
  if (oldpin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldpin_;
    oldpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangePin::set_allocated_oldpin(::std::string* oldpin) {
  if (oldpin_ != &::google::protobuf::internal::kEmptyString) {
    delete oldpin_;
  }
  if (oldpin) {
    set_has_oldpin();
    oldpin_ = oldpin;
  } else {
    clear_has_oldpin();
    oldpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newPin = 3;
inline bool ChangePin::has_newpin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangePin::set_has_newpin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangePin::clear_has_newpin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangePin::clear_newpin() {
  if (newpin_ != &::google::protobuf::internal::kEmptyString) {
    newpin_->clear();
  }
  clear_has_newpin();
}
inline const ::std::string& ChangePin::newpin() const {
  return *newpin_;
}
inline void ChangePin::set_newpin(const ::std::string& value) {
  set_has_newpin();
  if (newpin_ == &::google::protobuf::internal::kEmptyString) {
    newpin_ = new ::std::string;
  }
  newpin_->assign(value);
}
inline void ChangePin::set_newpin(const char* value) {
  set_has_newpin();
  if (newpin_ == &::google::protobuf::internal::kEmptyString) {
    newpin_ = new ::std::string;
  }
  newpin_->assign(value);
}
inline void ChangePin::set_newpin(const char* value, size_t size) {
  set_has_newpin();
  if (newpin_ == &::google::protobuf::internal::kEmptyString) {
    newpin_ = new ::std::string;
  }
  newpin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePin::mutable_newpin() {
  set_has_newpin();
  if (newpin_ == &::google::protobuf::internal::kEmptyString) {
    newpin_ = new ::std::string;
  }
  return newpin_;
}
inline ::std::string* ChangePin::release_newpin() {
  clear_has_newpin();
  if (newpin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newpin_;
    newpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangePin::set_allocated_newpin(::std::string* newpin) {
  if (newpin_ != &::google::protobuf::internal::kEmptyString) {
    delete newpin_;
  }
  if (newpin) {
    set_has_newpin();
    newpin_ = newpin;
  } else {
    clear_has_newpin();
    newpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChangePinReply

// required uint32 phoneNumber = 1;
inline bool ChangePinReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePinReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePinReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePinReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 ChangePinReply::phonenumber() const {
  return phonenumber_;
}
inline void ChangePinReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.ChangePinReply.ResultCode result = 2;
inline bool ChangePinReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePinReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePinReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePinReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::ChangePinReply_ResultCode ChangePinReply::result() const {
  return static_cast< ::com::mservice::momo::msg::ChangePinReply_ResultCode >(result_);
}
inline void ChangePinReply::set_result(::com::mservice::momo::msg::ChangePinReply_ResultCode value) {
  assert(::com::mservice::momo::msg::ChangePinReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// UpdateAgentInfo

// required uint32 phoneNumber = 1;
inline bool UpdateAgentInfo::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAgentInfo::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAgentInfo::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAgentInfo::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 UpdateAgentInfo::phonenumber() const {
  return phonenumber_;
}
inline void UpdateAgentInfo::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// optional string name = 2;
inline bool UpdateAgentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAgentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAgentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAgentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UpdateAgentInfo::name() const {
  return *name_;
}
inline void UpdateAgentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UpdateAgentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UpdateAgentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAgentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UpdateAgentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateAgentInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 3;
inline bool UpdateAgentInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateAgentInfo::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateAgentInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateAgentInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& UpdateAgentInfo::address() const {
  return *address_;
}
inline void UpdateAgentInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void UpdateAgentInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void UpdateAgentInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAgentInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* UpdateAgentInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateAgentInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 4;
inline bool UpdateAgentInfo::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateAgentInfo::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateAgentInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateAgentInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& UpdateAgentInfo::email() const {
  return *email_;
}
inline void UpdateAgentInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void UpdateAgentInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void UpdateAgentInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAgentInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* UpdateAgentInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateAgentInfo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cardId = 5;
inline bool UpdateAgentInfo::has_cardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateAgentInfo::set_has_cardid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateAgentInfo::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateAgentInfo::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& UpdateAgentInfo::cardid() const {
  return *cardid_;
}
inline void UpdateAgentInfo::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void UpdateAgentInfo::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void UpdateAgentInfo::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAgentInfo::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* UpdateAgentInfo::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateAgentInfo::set_allocated_cardid(::std::string* cardid) {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (cardid) {
    set_has_cardid();
    cardid_ = cardid;
  } else {
    clear_has_cardid();
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dob = 6;
inline bool UpdateAgentInfo::has_dob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateAgentInfo::set_has_dob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateAgentInfo::clear_has_dob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateAgentInfo::clear_dob() {
  if (dob_ != &::google::protobuf::internal::kEmptyString) {
    dob_->clear();
  }
  clear_has_dob();
}
inline const ::std::string& UpdateAgentInfo::dob() const {
  return *dob_;
}
inline void UpdateAgentInfo::set_dob(const ::std::string& value) {
  set_has_dob();
  if (dob_ == &::google::protobuf::internal::kEmptyString) {
    dob_ = new ::std::string;
  }
  dob_->assign(value);
}
inline void UpdateAgentInfo::set_dob(const char* value) {
  set_has_dob();
  if (dob_ == &::google::protobuf::internal::kEmptyString) {
    dob_ = new ::std::string;
  }
  dob_->assign(value);
}
inline void UpdateAgentInfo::set_dob(const char* value, size_t size) {
  set_has_dob();
  if (dob_ == &::google::protobuf::internal::kEmptyString) {
    dob_ = new ::std::string;
  }
  dob_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAgentInfo::mutable_dob() {
  set_has_dob();
  if (dob_ == &::google::protobuf::internal::kEmptyString) {
    dob_ = new ::std::string;
  }
  return dob_;
}
inline ::std::string* UpdateAgentInfo::release_dob() {
  clear_has_dob();
  if (dob_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dob_;
    dob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateAgentInfo::set_allocated_dob(::std::string* dob) {
  if (dob_ != &::google::protobuf::internal::kEmptyString) {
    delete dob_;
  }
  if (dob) {
    set_has_dob();
    dob_ = dob;
  } else {
    clear_has_dob();
    dob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateAgentInfoReply

// required uint32 phoneNumber = 1;
inline bool UpdateAgentInfoReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAgentInfoReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAgentInfoReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAgentInfoReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 UpdateAgentInfoReply::phonenumber() const {
  return phonenumber_;
}
inline void UpdateAgentInfoReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.UpdateAgentInfoReply.ResultCode result = 2;
inline bool UpdateAgentInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAgentInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAgentInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAgentInfoReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply::result() const {
  return static_cast< ::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode >(result_);
}
inline void UpdateAgentInfoReply::set_result(::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode value) {
  assert(::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Article

// optional string id = 1;
inline bool Article::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Article::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Article::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Article::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Article::id() const {
  return *id_;
}
inline void Article::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Article::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Article::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Article::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Article::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Article::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool active = 2;
inline bool Article::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Article::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Article::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Article::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool Article::active() const {
  return active_;
}
inline void Article::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional uint64 postDate = 3;
inline bool Article::has_postdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Article::set_has_postdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Article::clear_has_postdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Article::clear_postdate() {
  postdate_ = GOOGLE_ULONGLONG(0);
  clear_has_postdate();
}
inline ::google::protobuf::uint64 Article::postdate() const {
  return postdate_;
}
inline void Article::set_postdate(::google::protobuf::uint64 value) {
  set_has_postdate();
  postdate_ = value;
}

// optional string title = 4;
inline bool Article::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Article::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Article::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Article::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Article::title() const {
  return *title_;
}
inline void Article::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Article::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Article::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Article::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Article::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Article::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string summary = 5;
inline bool Article::has_summary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Article::set_has_summary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Article::clear_has_summary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Article::clear_summary() {
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& Article::summary() const {
  return *summary_;
}
inline void Article::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
}
inline void Article::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
}
inline void Article::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Article::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  return summary_;
}
inline ::std::string* Article::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Article::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string detail = 6;
inline bool Article::has_detail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Article::set_has_detail() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Article::clear_has_detail() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Article::clear_detail() {
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    detail_->clear();
  }
  clear_has_detail();
}
inline const ::std::string& Article::detail() const {
  return *detail_;
}
inline void Article::set_detail(const ::std::string& value) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  detail_->assign(value);
}
inline void Article::set_detail(const char* value) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  detail_->assign(value);
}
inline void Article::set_detail(const char* value, size_t size) {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  detail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Article::mutable_detail() {
  set_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    detail_ = new ::std::string;
  }
  return detail_;
}
inline ::std::string* Article::release_detail() {
  clear_has_detail();
  if (detail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = detail_;
    detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Article::set_allocated_detail(::std::string* detail) {
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_;
  }
  if (detail) {
    set_has_detail();
    detail_ = detail;
  } else {
    clear_has_detail();
    detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModifyArticle

// required .com.mservice.momo.msg.ModifyArticle.Command command = 1;
inline bool ModifyArticle::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyArticle::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyArticle::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyArticle::clear_command() {
  command_ = 1;
  clear_has_command();
}
inline ::com::mservice::momo::msg::ModifyArticle_Command ModifyArticle::command() const {
  return static_cast< ::com::mservice::momo::msg::ModifyArticle_Command >(command_);
}
inline void ModifyArticle::set_command(::com::mservice::momo::msg::ModifyArticle_Command value) {
  assert(::com::mservice::momo::msg::ModifyArticle_Command_IsValid(value));
  set_has_command();
  command_ = value;
}

// required .com.mservice.momo.msg.Article article = 2;
inline bool ModifyArticle::has_article() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyArticle::set_has_article() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyArticle::clear_has_article() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyArticle::clear_article() {
  if (article_ != NULL) article_->::com::mservice::momo::msg::Article::Clear();
  clear_has_article();
}
inline const ::com::mservice::momo::msg::Article& ModifyArticle::article() const {
  return article_ != NULL ? *article_ : *default_instance_->article_;
}
inline ::com::mservice::momo::msg::Article* ModifyArticle::mutable_article() {
  set_has_article();
  if (article_ == NULL) article_ = new ::com::mservice::momo::msg::Article;
  return article_;
}
inline ::com::mservice::momo::msg::Article* ModifyArticle::release_article() {
  clear_has_article();
  ::com::mservice::momo::msg::Article* temp = article_;
  article_ = NULL;
  return temp;
}
inline void ModifyArticle::set_allocated_article(::com::mservice::momo::msg::Article* article) {
  delete article_;
  article_ = article;
  if (article) {
    set_has_article();
  } else {
    clear_has_article();
  }
}

// -------------------------------------------------------------------

// ModifyArticleReply

// required .com.mservice.momo.msg.ModifyArticleReply.ResultCode result = 2;
inline bool ModifyArticleReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyArticleReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyArticleReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyArticleReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::ModifyArticleReply_ResultCode ModifyArticleReply::result() const {
  return static_cast< ::com::mservice::momo::msg::ModifyArticleReply_ResultCode >(result_);
}
inline void ModifyArticleReply::set_result(::com::mservice::momo::msg::ModifyArticleReply_ResultCode value) {
  assert(::com::mservice::momo::msg::ModifyArticleReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .com.mservice.momo.msg.Article article = 3;
inline bool ModifyArticleReply::has_article() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyArticleReply::set_has_article() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyArticleReply::clear_has_article() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyArticleReply::clear_article() {
  if (article_ != NULL) article_->::com::mservice::momo::msg::Article::Clear();
  clear_has_article();
}
inline const ::com::mservice::momo::msg::Article& ModifyArticleReply::article() const {
  return article_ != NULL ? *article_ : *default_instance_->article_;
}
inline ::com::mservice::momo::msg::Article* ModifyArticleReply::mutable_article() {
  set_has_article();
  if (article_ == NULL) article_ = new ::com::mservice::momo::msg::Article;
  return article_;
}
inline ::com::mservice::momo::msg::Article* ModifyArticleReply::release_article() {
  clear_has_article();
  ::com::mservice::momo::msg::Article* temp = article_;
  article_ = NULL;
  return temp;
}
inline void ModifyArticleReply::set_allocated_article(::com::mservice::momo::msg::Article* article) {
  delete article_;
  article_ = article;
  if (article) {
    set_has_article();
  } else {
    clear_has_article();
  }
}

// -------------------------------------------------------------------

// GetArticlePage

// required uint32 pageSize = 1;
inline bool GetArticlePage::has_pagesize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetArticlePage::set_has_pagesize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetArticlePage::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetArticlePage::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 GetArticlePage::pagesize() const {
  return pagesize_;
}
inline void GetArticlePage::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// required uint32 pageNumber = 2;
inline bool GetArticlePage::has_pagenumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetArticlePage::set_has_pagenumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetArticlePage::clear_has_pagenumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetArticlePage::clear_pagenumber() {
  pagenumber_ = 0u;
  clear_has_pagenumber();
}
inline ::google::protobuf::uint32 GetArticlePage::pagenumber() const {
  return pagenumber_;
}
inline void GetArticlePage::set_pagenumber(::google::protobuf::uint32 value) {
  set_has_pagenumber();
  pagenumber_ = value;
}

// -------------------------------------------------------------------

// GetArticlePageReply

// required uint32 pageCount = 1;
inline bool GetArticlePageReply::has_pagecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetArticlePageReply::set_has_pagecount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetArticlePageReply::clear_has_pagecount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetArticlePageReply::clear_pagecount() {
  pagecount_ = 0u;
  clear_has_pagecount();
}
inline ::google::protobuf::uint32 GetArticlePageReply::pagecount() const {
  return pagecount_;
}
inline void GetArticlePageReply::set_pagecount(::google::protobuf::uint32 value) {
  set_has_pagecount();
  pagecount_ = value;
}

// repeated .com.mservice.momo.msg.Article articles = 2;
inline int GetArticlePageReply::articles_size() const {
  return articles_.size();
}
inline void GetArticlePageReply::clear_articles() {
  articles_.Clear();
}
inline const ::com::mservice::momo::msg::Article& GetArticlePageReply::articles(int index) const {
  return articles_.Get(index);
}
inline ::com::mservice::momo::msg::Article* GetArticlePageReply::mutable_articles(int index) {
  return articles_.Mutable(index);
}
inline ::com::mservice::momo::msg::Article* GetArticlePageReply::add_articles() {
  return articles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Article >&
GetArticlePageReply::articles() const {
  return articles_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Article >*
GetArticlePageReply::mutable_articles() {
  return &articles_;
}

// -------------------------------------------------------------------

// BankAccount

// required uint32 phoneNumber = 2;
inline bool BankAccount::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankAccount::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankAccount::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankAccount::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BankAccount::phonenumber() const {
  return phonenumber_;
}
inline void BankAccount::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string accountId = 3;
inline bool BankAccount::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankAccount::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankAccount::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankAccount::clear_accountid() {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    accountid_->clear();
  }
  clear_has_accountid();
}
inline const ::std::string& BankAccount::accountid() const {
  return *accountid_;
}
inline void BankAccount::set_accountid(const ::std::string& value) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void BankAccount::set_accountid(const char* value) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void BankAccount::set_accountid(const char* value, size_t size) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankAccount::mutable_accountid() {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  return accountid_;
}
inline ::std::string* BankAccount::release_accountid() {
  clear_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountid_;
    accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankAccount::set_allocated_accountid(::std::string* accountid) {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (accountid) {
    set_has_accountid();
    accountid_ = accountid;
  } else {
    clear_has_accountid();
    accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankName = 4;
inline bool BankAccount::has_bankname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankAccount::set_has_bankname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankAccount::clear_has_bankname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankAccount::clear_bankname() {
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    bankname_->clear();
  }
  clear_has_bankname();
}
inline const ::std::string& BankAccount::bankname() const {
  return *bankname_;
}
inline void BankAccount::set_bankname(const ::std::string& value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
}
inline void BankAccount::set_bankname(const char* value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
}
inline void BankAccount::set_bankname(const char* value, size_t size) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankAccount::mutable_bankname() {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  return bankname_;
}
inline ::std::string* BankAccount::release_bankname() {
  clear_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankname_;
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankAccount::set_allocated_bankname(::std::string* bankname) {
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankname_;
  }
  if (bankname) {
    set_has_bankname();
    bankname_ = bankname;
  } else {
    clear_has_bankname();
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ownerName = 5;
inline bool BankAccount::has_ownername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankAccount::set_has_ownername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankAccount::clear_has_ownername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankAccount::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& BankAccount::ownername() const {
  return *ownername_;
}
inline void BankAccount::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void BankAccount::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void BankAccount::set_ownername(const char* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankAccount::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* BankAccount::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankAccount::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 createdDate = 6;
inline bool BankAccount::has_createddate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BankAccount::set_has_createddate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BankAccount::clear_has_createddate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BankAccount::clear_createddate() {
  createddate_ = GOOGLE_ULONGLONG(0);
  clear_has_createddate();
}
inline ::google::protobuf::uint64 BankAccount::createddate() const {
  return createddate_;
}
inline void BankAccount::set_createddate(::google::protobuf::uint64 value) {
  set_has_createddate();
  createddate_ = value;
}

// optional string bankId = 7;
inline bool BankAccount::has_bankid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BankAccount::set_has_bankid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BankAccount::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BankAccount::clear_bankid() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    bankid_->clear();
  }
  clear_has_bankid();
}
inline const ::std::string& BankAccount::bankid() const {
  return *bankid_;
}
inline void BankAccount::set_bankid(const ::std::string& value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void BankAccount::set_bankid(const char* value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void BankAccount::set_bankid(const char* value, size_t size) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankAccount::mutable_bankid() {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  return bankid_;
}
inline ::std::string* BankAccount::release_bankid() {
  clear_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankid_;
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankAccount::set_allocated_bankid(::std::string* bankid) {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (bankid) {
    set_has_bankid();
    bankid_ = bankid;
  } else {
    clear_has_bankid();
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModifyBankAccount

// required .com.mservice.momo.msg.ModifyBankAccount.Command command = 1;
inline bool ModifyBankAccount::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyBankAccount::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyBankAccount::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyBankAccount::clear_command() {
  command_ = 1;
  clear_has_command();
}
inline ::com::mservice::momo::msg::ModifyBankAccount_Command ModifyBankAccount::command() const {
  return static_cast< ::com::mservice::momo::msg::ModifyBankAccount_Command >(command_);
}
inline void ModifyBankAccount::set_command(::com::mservice::momo::msg::ModifyBankAccount_Command value) {
  assert(::com::mservice::momo::msg::ModifyBankAccount_Command_IsValid(value));
  set_has_command();
  command_ = value;
}

// required .com.mservice.momo.msg.BankAccount account = 2;
inline bool ModifyBankAccount::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyBankAccount::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyBankAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyBankAccount::clear_account() {
  if (account_ != NULL) account_->::com::mservice::momo::msg::BankAccount::Clear();
  clear_has_account();
}
inline const ::com::mservice::momo::msg::BankAccount& ModifyBankAccount::account() const {
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::com::mservice::momo::msg::BankAccount* ModifyBankAccount::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::com::mservice::momo::msg::BankAccount;
  return account_;
}
inline ::com::mservice::momo::msg::BankAccount* ModifyBankAccount::release_account() {
  clear_has_account();
  ::com::mservice::momo::msg::BankAccount* temp = account_;
  account_ = NULL;
  return temp;
}
inline void ModifyBankAccount::set_allocated_account(::com::mservice::momo::msg::BankAccount* account) {
  delete account_;
  account_ = account;
  if (account) {
    set_has_account();
  } else {
    clear_has_account();
  }
}

// -------------------------------------------------------------------

// ModifyBankAccountReply

// required .com.mservice.momo.msg.ModifyBankAccountReply.ResultCode result = 2;
inline bool ModifyBankAccountReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyBankAccountReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyBankAccountReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyBankAccountReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode ModifyBankAccountReply::result() const {
  return static_cast< ::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode >(result_);
}
inline void ModifyBankAccountReply::set_result(::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode value) {
  assert(::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .com.mservice.momo.msg.BankAccount bankAccount = 3;
inline bool ModifyBankAccountReply::has_bankaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyBankAccountReply::set_has_bankaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyBankAccountReply::clear_has_bankaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyBankAccountReply::clear_bankaccount() {
  if (bankaccount_ != NULL) bankaccount_->::com::mservice::momo::msg::BankAccount::Clear();
  clear_has_bankaccount();
}
inline const ::com::mservice::momo::msg::BankAccount& ModifyBankAccountReply::bankaccount() const {
  return bankaccount_ != NULL ? *bankaccount_ : *default_instance_->bankaccount_;
}
inline ::com::mservice::momo::msg::BankAccount* ModifyBankAccountReply::mutable_bankaccount() {
  set_has_bankaccount();
  if (bankaccount_ == NULL) bankaccount_ = new ::com::mservice::momo::msg::BankAccount;
  return bankaccount_;
}
inline ::com::mservice::momo::msg::BankAccount* ModifyBankAccountReply::release_bankaccount() {
  clear_has_bankaccount();
  ::com::mservice::momo::msg::BankAccount* temp = bankaccount_;
  bankaccount_ = NULL;
  return temp;
}
inline void ModifyBankAccountReply::set_allocated_bankaccount(::com::mservice::momo::msg::BankAccount* bankaccount) {
  delete bankaccount_;
  bankaccount_ = bankaccount;
  if (bankaccount) {
    set_has_bankaccount();
  } else {
    clear_has_bankaccount();
  }
}

// -------------------------------------------------------------------

// GetAgentBankAccounts

// required uint32 phoneNumber = 1;
inline bool GetAgentBankAccounts::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAgentBankAccounts::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAgentBankAccounts::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAgentBankAccounts::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetAgentBankAccounts::phonenumber() const {
  return phonenumber_;
}
inline void GetAgentBankAccounts::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// -------------------------------------------------------------------

// GetAgentBankAccountsReply

// repeated .com.mservice.momo.msg.BankAccount accounts = 2;
inline int GetAgentBankAccountsReply::accounts_size() const {
  return accounts_.size();
}
inline void GetAgentBankAccountsReply::clear_accounts() {
  accounts_.Clear();
}
inline const ::com::mservice::momo::msg::BankAccount& GetAgentBankAccountsReply::accounts(int index) const {
  return accounts_.Get(index);
}
inline ::com::mservice::momo::msg::BankAccount* GetAgentBankAccountsReply::mutable_accounts(int index) {
  return accounts_.Mutable(index);
}
inline ::com::mservice::momo::msg::BankAccount* GetAgentBankAccountsReply::add_accounts() {
  return accounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BankAccount >&
GetAgentBankAccountsReply::accounts() const {
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BankAccount >*
GetAgentBankAccountsReply::mutable_accounts() {
  return &accounts_;
}

// -------------------------------------------------------------------

// Transaction

// optional uint64 id = 1;
inline bool Transaction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Transaction::id() const {
  return id_;
}
inline void Transaction::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 time = 2;
inline bool Transaction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Transaction::time() const {
  return time_;
}
inline void Transaction::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 amount = 3;
inline bool Transaction::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transaction::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transaction::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 Transaction::amount() const {
  return amount_;
}
inline void Transaction::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional string partnerName = 4;
inline bool Transaction::has_partnername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction::set_has_partnername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transaction::clear_has_partnername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transaction::clear_partnername() {
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    partnername_->clear();
  }
  clear_has_partnername();
}
inline const ::std::string& Transaction::partnername() const {
  return *partnername_;
}
inline void Transaction::set_partnername(const ::std::string& value) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(value);
}
inline void Transaction::set_partnername(const char* value) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(value);
}
inline void Transaction::set_partnername(const char* value, size_t size) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction::mutable_partnername() {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  return partnername_;
}
inline ::std::string* Transaction::release_partnername() {
  clear_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partnername_;
    partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transaction::set_allocated_partnername(::std::string* partnername) {
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    delete partnername_;
  }
  if (partnername) {
    set_has_partnername();
    partnername_ = partnername;
  } else {
    clear_has_partnername();
    partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.mservice.momo.msg.TransactionType type = 5;
inline bool Transaction::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transaction::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transaction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::mservice::momo::msg::TransactionType Transaction::type() const {
  return static_cast< ::com::mservice::momo::msg::TransactionType >(type_);
}
inline void Transaction::set_type(::com::mservice::momo::msg::TransactionType value) {
  assert(::com::mservice::momo::msg::TransactionType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .com.mservice.momo.msg.TransactionStatus status = 6;
inline bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transaction::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transaction::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::com::mservice::momo::msg::TransactionStatus Transaction::status() const {
  return static_cast< ::com::mservice::momo::msg::TransactionStatus >(status_);
}
inline void Transaction::set_status(::com::mservice::momo::msg::TransactionStatus value) {
  assert(::com::mservice::momo::msg::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string partnerId = 7;
inline bool Transaction::has_partnerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transaction::set_has_partnerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transaction::clear_has_partnerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transaction::clear_partnerid() {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    partnerid_->clear();
  }
  clear_has_partnerid();
}
inline const ::std::string& Transaction::partnerid() const {
  return *partnerid_;
}
inline void Transaction::set_partnerid(const ::std::string& value) {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  partnerid_->assign(value);
}
inline void Transaction::set_partnerid(const char* value) {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  partnerid_->assign(value);
}
inline void Transaction::set_partnerid(const char* value, size_t size) {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  partnerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction::mutable_partnerid() {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  return partnerid_;
}
inline ::std::string* Transaction::release_partnerid() {
  clear_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partnerid_;
    partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transaction::set_allocated_partnerid(::std::string* partnerid) {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (partnerid) {
    set_has_partnerid();
    partnerid_ = partnerid;
  } else {
    clear_has_partnerid();
    partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetTransaction

// required uint32 phoneNumber = 1;
inline bool GetTransaction::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTransaction::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTransaction::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTransaction::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetTransaction::phonenumber() const {
  return phonenumber_;
}
inline void GetTransaction::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required uint32 pageSize = 2;
inline bool GetTransaction::has_pagesize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTransaction::set_has_pagesize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTransaction::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTransaction::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 GetTransaction::pagesize() const {
  return pagesize_;
}
inline void GetTransaction::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// required uint32 pageNumber = 3;
inline bool GetTransaction::has_pagenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTransaction::set_has_pagenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTransaction::clear_has_pagenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTransaction::clear_pagenumber() {
  pagenumber_ = 0u;
  clear_has_pagenumber();
}
inline ::google::protobuf::uint32 GetTransaction::pagenumber() const {
  return pagenumber_;
}
inline void GetTransaction::set_pagenumber(::google::protobuf::uint32 value) {
  set_has_pagenumber();
  pagenumber_ = value;
}

// optional uint64 startTime = 4;
inline bool GetTransaction::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTransaction::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTransaction::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTransaction::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 GetTransaction::starttime() const {
  return starttime_;
}
inline void GetTransaction::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional uint64 endTime = 5;
inline bool GetTransaction::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTransaction::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTransaction::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTransaction::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 GetTransaction::endtime() const {
  return endtime_;
}
inline void GetTransaction::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional .com.mservice.momo.msg.TransactionStatus status = 6;
inline bool GetTransaction::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetTransaction::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetTransaction::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetTransaction::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::com::mservice::momo::msg::TransactionStatus GetTransaction::status() const {
  return static_cast< ::com::mservice::momo::msg::TransactionStatus >(status_);
}
inline void GetTransaction::set_status(::com::mservice::momo::msg::TransactionStatus value) {
  assert(::com::mservice::momo::msg::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .com.mservice.momo.msg.TransactionType type = 7;
inline int GetTransaction::type_size() const {
  return type_.size();
}
inline void GetTransaction::clear_type() {
  type_.Clear();
}
inline ::com::mservice::momo::msg::TransactionType GetTransaction::type(int index) const {
  return static_cast< ::com::mservice::momo::msg::TransactionType >(type_.Get(index));
}
inline void GetTransaction::set_type(int index, ::com::mservice::momo::msg::TransactionType value) {
  assert(::com::mservice::momo::msg::TransactionType_IsValid(value));
  type_.Set(index, value);
}
inline void GetTransaction::add_type(::com::mservice::momo::msg::TransactionType value) {
  assert(::com::mservice::momo::msg::TransactionType_IsValid(value));
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
GetTransaction::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
GetTransaction::mutable_type() {
  return &type_;
}

// -------------------------------------------------------------------

// GetTransactionReply

// required uint32 phoneNumber = 1;
inline bool GetTransactionReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTransactionReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTransactionReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTransactionReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetTransactionReply::phonenumber() const {
  return phonenumber_;
}
inline void GetTransactionReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required uint32 pageCount = 2;
inline bool GetTransactionReply::has_pagecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTransactionReply::set_has_pagecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTransactionReply::clear_has_pagecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTransactionReply::clear_pagecount() {
  pagecount_ = 0u;
  clear_has_pagecount();
}
inline ::google::protobuf::uint32 GetTransactionReply::pagecount() const {
  return pagecount_;
}
inline void GetTransactionReply::set_pagecount(::google::protobuf::uint32 value) {
  set_has_pagecount();
  pagecount_ = value;
}

// repeated .com.mservice.momo.msg.Transaction transactions = 3;
inline int GetTransactionReply::transactions_size() const {
  return transactions_.size();
}
inline void GetTransactionReply::clear_transactions() {
  transactions_.Clear();
}
inline const ::com::mservice::momo::msg::Transaction& GetTransactionReply::transactions(int index) const {
  return transactions_.Get(index);
}
inline ::com::mservice::momo::msg::Transaction* GetTransactionReply::mutable_transactions(int index) {
  return transactions_.Mutable(index);
}
inline ::com::mservice::momo::msg::Transaction* GetTransactionReply::add_transactions() {
  return transactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Transaction >&
GetTransactionReply::transactions() const {
  return transactions_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::Transaction >*
GetTransactionReply::mutable_transactions() {
  return &transactions_;
}

// -------------------------------------------------------------------

// GetTransactionDetail

// required uint32 phoneNumber = 1;
inline bool GetTransactionDetail::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTransactionDetail::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTransactionDetail::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTransactionDetail::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetTransactionDetail::phonenumber() const {
  return phonenumber_;
}
inline void GetTransactionDetail::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required uint64 transactionId = 2;
inline bool GetTransactionDetail::has_transactionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTransactionDetail::set_has_transactionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTransactionDetail::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTransactionDetail::clear_transactionid() {
  transactionid_ = GOOGLE_ULONGLONG(0);
  clear_has_transactionid();
}
inline ::google::protobuf::uint64 GetTransactionDetail::transactionid() const {
  return transactionid_;
}
inline void GetTransactionDetail::set_transactionid(::google::protobuf::uint64 value) {
  set_has_transactionid();
  transactionid_ = value;
}

// -------------------------------------------------------------------

// GetTransactionDetailReply

// required uint32 phoneNumber = 1;
inline bool GetTransactionDetailReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTransactionDetailReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTransactionDetailReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTransactionDetailReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetTransactionDetailReply::phonenumber() const {
  return phonenumber_;
}
inline void GetTransactionDetailReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// optional uint64 id = 2;
inline bool GetTransactionDetailReply::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTransactionDetailReply::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTransactionDetailReply::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTransactionDetailReply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GetTransactionDetailReply::id() const {
  return id_;
}
inline void GetTransactionDetailReply::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 time = 3;
inline bool GetTransactionDetailReply::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTransactionDetailReply::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTransactionDetailReply::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTransactionDetailReply::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 GetTransactionDetailReply::time() const {
  return time_;
}
inline void GetTransactionDetailReply::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 amount = 4;
inline bool GetTransactionDetailReply::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTransactionDetailReply::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTransactionDetailReply::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTransactionDetailReply::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 GetTransactionDetailReply::amount() const {
  return amount_;
}
inline void GetTransactionDetailReply::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional .com.mservice.momo.msg.TransactionType type = 5;
inline bool GetTransactionDetailReply::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTransactionDetailReply::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTransactionDetailReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTransactionDetailReply::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::mservice::momo::msg::TransactionType GetTransactionDetailReply::type() const {
  return static_cast< ::com::mservice::momo::msg::TransactionType >(type_);
}
inline void GetTransactionDetailReply::set_type(::com::mservice::momo::msg::TransactionType value) {
  assert(::com::mservice::momo::msg::TransactionType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .com.mservice.momo.msg.TransactionStatus status = 6;
inline bool GetTransactionDetailReply::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetTransactionDetailReply::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetTransactionDetailReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetTransactionDetailReply::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::com::mservice::momo::msg::TransactionStatus GetTransactionDetailReply::status() const {
  return static_cast< ::com::mservice::momo::msg::TransactionStatus >(status_);
}
inline void GetTransactionDetailReply::set_status(::com::mservice::momo::msg::TransactionStatus value) {
  assert(::com::mservice::momo::msg::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string partnerId = 7;
inline bool GetTransactionDetailReply::has_partnerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetTransactionDetailReply::set_has_partnerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetTransactionDetailReply::clear_has_partnerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetTransactionDetailReply::clear_partnerid() {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    partnerid_->clear();
  }
  clear_has_partnerid();
}
inline const ::std::string& GetTransactionDetailReply::partnerid() const {
  return *partnerid_;
}
inline void GetTransactionDetailReply::set_partnerid(const ::std::string& value) {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  partnerid_->assign(value);
}
inline void GetTransactionDetailReply::set_partnerid(const char* value) {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  partnerid_->assign(value);
}
inline void GetTransactionDetailReply::set_partnerid(const char* value, size_t size) {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  partnerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTransactionDetailReply::mutable_partnerid() {
  set_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    partnerid_ = new ::std::string;
  }
  return partnerid_;
}
inline ::std::string* GetTransactionDetailReply::release_partnerid() {
  clear_has_partnerid();
  if (partnerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partnerid_;
    partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTransactionDetailReply::set_allocated_partnerid(::std::string* partnerid) {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (partnerid) {
    set_has_partnerid();
    partnerid_ = partnerid;
  } else {
    clear_has_partnerid();
    partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string partnerCode = 8;
inline bool GetTransactionDetailReply::has_partnercode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetTransactionDetailReply::set_has_partnercode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetTransactionDetailReply::clear_has_partnercode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetTransactionDetailReply::clear_partnercode() {
  if (partnercode_ != &::google::protobuf::internal::kEmptyString) {
    partnercode_->clear();
  }
  clear_has_partnercode();
}
inline const ::std::string& GetTransactionDetailReply::partnercode() const {
  return *partnercode_;
}
inline void GetTransactionDetailReply::set_partnercode(const ::std::string& value) {
  set_has_partnercode();
  if (partnercode_ == &::google::protobuf::internal::kEmptyString) {
    partnercode_ = new ::std::string;
  }
  partnercode_->assign(value);
}
inline void GetTransactionDetailReply::set_partnercode(const char* value) {
  set_has_partnercode();
  if (partnercode_ == &::google::protobuf::internal::kEmptyString) {
    partnercode_ = new ::std::string;
  }
  partnercode_->assign(value);
}
inline void GetTransactionDetailReply::set_partnercode(const char* value, size_t size) {
  set_has_partnercode();
  if (partnercode_ == &::google::protobuf::internal::kEmptyString) {
    partnercode_ = new ::std::string;
  }
  partnercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTransactionDetailReply::mutable_partnercode() {
  set_has_partnercode();
  if (partnercode_ == &::google::protobuf::internal::kEmptyString) {
    partnercode_ = new ::std::string;
  }
  return partnercode_;
}
inline ::std::string* GetTransactionDetailReply::release_partnercode() {
  clear_has_partnercode();
  if (partnercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partnercode_;
    partnercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTransactionDetailReply::set_allocated_partnercode(::std::string* partnercode) {
  if (partnercode_ != &::google::protobuf::internal::kEmptyString) {
    delete partnercode_;
  }
  if (partnercode) {
    set_has_partnercode();
    partnercode_ = partnercode;
  } else {
    clear_has_partnercode();
    partnercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string partnerName = 9;
inline bool GetTransactionDetailReply::has_partnername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetTransactionDetailReply::set_has_partnername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetTransactionDetailReply::clear_has_partnername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetTransactionDetailReply::clear_partnername() {
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    partnername_->clear();
  }
  clear_has_partnername();
}
inline const ::std::string& GetTransactionDetailReply::partnername() const {
  return *partnername_;
}
inline void GetTransactionDetailReply::set_partnername(const ::std::string& value) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(value);
}
inline void GetTransactionDetailReply::set_partnername(const char* value) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(value);
}
inline void GetTransactionDetailReply::set_partnername(const char* value, size_t size) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTransactionDetailReply::mutable_partnername() {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    partnername_ = new ::std::string;
  }
  return partnername_;
}
inline ::std::string* GetTransactionDetailReply::release_partnername() {
  clear_has_partnername();
  if (partnername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partnername_;
    partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTransactionDetailReply::set_allocated_partnername(::std::string* partnername) {
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    delete partnername_;
  }
  if (partnername) {
    set_has_partnername();
    partnername_ = partnername;
  } else {
    clear_has_partnername();
    partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string billId = 10;
inline bool GetTransactionDetailReply::has_billid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetTransactionDetailReply::set_has_billid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetTransactionDetailReply::clear_has_billid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetTransactionDetailReply::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& GetTransactionDetailReply::billid() const {
  return *billid_;
}
inline void GetTransactionDetailReply::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void GetTransactionDetailReply::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void GetTransactionDetailReply::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTransactionDetailReply::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* GetTransactionDetailReply::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTransactionDetailReply::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string comment = 11;
inline bool GetTransactionDetailReply::has_comment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetTransactionDetailReply::set_has_comment() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetTransactionDetailReply::clear_has_comment() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetTransactionDetailReply::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& GetTransactionDetailReply::comment() const {
  return *comment_;
}
inline void GetTransactionDetailReply::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void GetTransactionDetailReply::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void GetTransactionDetailReply::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTransactionDetailReply::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* GetTransactionDetailReply::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTransactionDetailReply::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string partnerPref = 12;
inline bool GetTransactionDetailReply::has_partnerpref() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetTransactionDetailReply::set_has_partnerpref() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetTransactionDetailReply::clear_has_partnerpref() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetTransactionDetailReply::clear_partnerpref() {
  if (partnerpref_ != &::google::protobuf::internal::kEmptyString) {
    partnerpref_->clear();
  }
  clear_has_partnerpref();
}
inline const ::std::string& GetTransactionDetailReply::partnerpref() const {
  return *partnerpref_;
}
inline void GetTransactionDetailReply::set_partnerpref(const ::std::string& value) {
  set_has_partnerpref();
  if (partnerpref_ == &::google::protobuf::internal::kEmptyString) {
    partnerpref_ = new ::std::string;
  }
  partnerpref_->assign(value);
}
inline void GetTransactionDetailReply::set_partnerpref(const char* value) {
  set_has_partnerpref();
  if (partnerpref_ == &::google::protobuf::internal::kEmptyString) {
    partnerpref_ = new ::std::string;
  }
  partnerpref_->assign(value);
}
inline void GetTransactionDetailReply::set_partnerpref(const char* value, size_t size) {
  set_has_partnerpref();
  if (partnerpref_ == &::google::protobuf::internal::kEmptyString) {
    partnerpref_ = new ::std::string;
  }
  partnerpref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTransactionDetailReply::mutable_partnerpref() {
  set_has_partnerpref();
  if (partnerpref_ == &::google::protobuf::internal::kEmptyString) {
    partnerpref_ = new ::std::string;
  }
  return partnerpref_;
}
inline ::std::string* GetTransactionDetailReply::release_partnerpref() {
  clear_has_partnerpref();
  if (partnerpref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partnerpref_;
    partnerpref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTransactionDetailReply::set_allocated_partnerpref(::std::string* partnerpref) {
  if (partnerpref_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerpref_;
  }
  if (partnerpref) {
    set_has_partnerpref();
    partnerpref_ = partnerpref;
  } else {
    clear_has_partnerpref();
    partnerpref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 errorCode = 13;
inline bool GetTransactionDetailReply::has_errorcode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetTransactionDetailReply::set_has_errorcode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetTransactionDetailReply::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetTransactionDetailReply::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 GetTransactionDetailReply::errorcode() const {
  return errorcode_;
}
inline void GetTransactionDetailReply::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// Topup

// required uint32 phoneNumber = 1;
inline bool Topup::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Topup::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Topup::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Topup::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 Topup::phonenumber() const {
  return phonenumber_;
}
inline void Topup::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool Topup::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Topup::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Topup::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Topup::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& Topup::pin() const {
  return *pin_;
}
inline void Topup::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Topup::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Topup::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Topup::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* Topup::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Topup::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 topupPhoneNumber = 3;
inline bool Topup::has_topupphonenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Topup::set_has_topupphonenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Topup::clear_has_topupphonenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Topup::clear_topupphonenumber() {
  topupphonenumber_ = 0u;
  clear_has_topupphonenumber();
}
inline ::google::protobuf::uint32 Topup::topupphonenumber() const {
  return topupphonenumber_;
}
inline void Topup::set_topupphonenumber(::google::protobuf::uint32 value) {
  set_has_topupphonenumber();
  topupphonenumber_ = value;
}

// required uint64 amount = 4;
inline bool Topup::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Topup::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Topup::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Topup::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 Topup::amount() const {
  return amount_;
}
inline void Topup::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// TopupReply

// required uint32 phoneNumber = 1;
inline bool TopupReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopupReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopupReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopupReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TopupReply::phonenumber() const {
  return phonenumber_;
}
inline void TopupReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.TopupReply.Result result = 2;
inline bool TopupReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopupReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopupReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopupReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::TopupReply_Result TopupReply::result() const {
  return static_cast< ::com::mservice::momo::msg::TopupReply_Result >(result_);
}
inline void TopupReply::set_result(::com::mservice::momo::msg::TopupReply_Result value) {
  assert(::com::mservice::momo::msg::TopupReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool TopupReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopupReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopupReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopupReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& TopupReply::transactionid() const {
  return *transactionid_;
}
inline void TopupReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void TopupReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void TopupReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopupReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* TopupReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopupReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TopupGame

// required uint32 phoneNumber = 1;
inline bool TopupGame::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopupGame::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopupGame::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopupGame::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TopupGame::phonenumber() const {
  return phonenumber_;
}
inline void TopupGame::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool TopupGame::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopupGame::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopupGame::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopupGame::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& TopupGame::pin() const {
  return *pin_;
}
inline void TopupGame::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void TopupGame::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void TopupGame::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopupGame::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* TopupGame::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopupGame::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string providerId = 3;
inline bool TopupGame::has_providerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopupGame::set_has_providerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopupGame::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopupGame::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& TopupGame::providerid() const {
  return *providerid_;
}
inline void TopupGame::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void TopupGame::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void TopupGame::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopupGame::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* TopupGame::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopupGame::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string gameAccount = 4;
inline bool TopupGame::has_gameaccount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopupGame::set_has_gameaccount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopupGame::clear_has_gameaccount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopupGame::clear_gameaccount() {
  if (gameaccount_ != &::google::protobuf::internal::kEmptyString) {
    gameaccount_->clear();
  }
  clear_has_gameaccount();
}
inline const ::std::string& TopupGame::gameaccount() const {
  return *gameaccount_;
}
inline void TopupGame::set_gameaccount(const ::std::string& value) {
  set_has_gameaccount();
  if (gameaccount_ == &::google::protobuf::internal::kEmptyString) {
    gameaccount_ = new ::std::string;
  }
  gameaccount_->assign(value);
}
inline void TopupGame::set_gameaccount(const char* value) {
  set_has_gameaccount();
  if (gameaccount_ == &::google::protobuf::internal::kEmptyString) {
    gameaccount_ = new ::std::string;
  }
  gameaccount_->assign(value);
}
inline void TopupGame::set_gameaccount(const char* value, size_t size) {
  set_has_gameaccount();
  if (gameaccount_ == &::google::protobuf::internal::kEmptyString) {
    gameaccount_ = new ::std::string;
  }
  gameaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopupGame::mutable_gameaccount() {
  set_has_gameaccount();
  if (gameaccount_ == &::google::protobuf::internal::kEmptyString) {
    gameaccount_ = new ::std::string;
  }
  return gameaccount_;
}
inline ::std::string* TopupGame::release_gameaccount() {
  clear_has_gameaccount();
  if (gameaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameaccount_;
    gameaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopupGame::set_allocated_gameaccount(::std::string* gameaccount) {
  if (gameaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete gameaccount_;
  }
  if (gameaccount) {
    set_has_gameaccount();
    gameaccount_ = gameaccount;
  } else {
    clear_has_gameaccount();
    gameaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 5;
inline bool TopupGame::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopupGame::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopupGame::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopupGame::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TopupGame::amount() const {
  return amount_;
}
inline void TopupGame::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// TopupGameReply

// required uint32 phoneNumber = 1;
inline bool TopupGameReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopupGameReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopupGameReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopupGameReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TopupGameReply::phonenumber() const {
  return phonenumber_;
}
inline void TopupGameReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.TopupGameReply.TopupGameResult result = 2;
inline bool TopupGameReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopupGameReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopupGameReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopupGameReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::TopupGameReply_TopupGameResult TopupGameReply::result() const {
  return static_cast< ::com::mservice::momo::msg::TopupGameReply_TopupGameResult >(result_);
}
inline void TopupGameReply::set_result(::com::mservice::momo::msg::TopupGameReply_TopupGameResult value) {
  assert(::com::mservice::momo::msg::TopupGameReply_TopupGameResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool TopupGameReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopupGameReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopupGameReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopupGameReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& TopupGameReply::transactionid() const {
  return *transactionid_;
}
inline void TopupGameReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void TopupGameReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void TopupGameReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopupGameReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* TopupGameReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopupGameReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TransferM2m

// required uint32 phoneNumber = 1;
inline bool TransferM2m::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferM2m::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferM2m::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferM2m::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TransferM2m::phonenumber() const {
  return phonenumber_;
}
inline void TransferM2m::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool TransferM2m::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferM2m::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferM2m::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferM2m::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& TransferM2m::pin() const {
  return *pin_;
}
inline void TransferM2m::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void TransferM2m::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void TransferM2m::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2m::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* TransferM2m::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2m::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 receiverPhoneNumber = 3;
inline bool TransferM2m::has_receiverphonenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferM2m::set_has_receiverphonenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferM2m::clear_has_receiverphonenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferM2m::clear_receiverphonenumber() {
  receiverphonenumber_ = 0u;
  clear_has_receiverphonenumber();
}
inline ::google::protobuf::uint32 TransferM2m::receiverphonenumber() const {
  return receiverphonenumber_;
}
inline void TransferM2m::set_receiverphonenumber(::google::protobuf::uint32 value) {
  set_has_receiverphonenumber();
  receiverphonenumber_ = value;
}

// required uint64 amount = 4;
inline bool TransferM2m::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransferM2m::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransferM2m::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransferM2m::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TransferM2m::amount() const {
  return amount_;
}
inline void TransferM2m::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required string comment = 5;
inline bool TransferM2m::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransferM2m::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransferM2m::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransferM2m::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TransferM2m::comment() const {
  return *comment_;
}
inline void TransferM2m::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void TransferM2m::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void TransferM2m::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2m::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* TransferM2m::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2m::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TransferM2mReply

// required uint32 phoneNumber = 1;
inline bool TransferM2mReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferM2mReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferM2mReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferM2mReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TransferM2mReply::phonenumber() const {
  return phonenumber_;
}
inline void TransferM2mReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.TransferM2mReply.Result result = 2;
inline bool TransferM2mReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferM2mReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferM2mReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferM2mReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::TransferM2mReply_Result TransferM2mReply::result() const {
  return static_cast< ::com::mservice::momo::msg::TransferM2mReply_Result >(result_);
}
inline void TransferM2mReply::set_result(::com::mservice::momo::msg::TransferM2mReply_Result value) {
  assert(::com::mservice::momo::msg::TransferM2mReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool TransferM2mReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferM2mReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferM2mReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferM2mReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& TransferM2mReply::transactionid() const {
  return *transactionid_;
}
inline void TransferM2mReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void TransferM2mReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void TransferM2mReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2mReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* TransferM2mReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2mReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TransferM2c

// required uint32 phoneNumber = 1;
inline bool TransferM2c::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferM2c::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferM2c::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferM2c::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TransferM2c::phonenumber() const {
  return phonenumber_;
}
inline void TransferM2c::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool TransferM2c::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferM2c::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferM2c::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferM2c::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& TransferM2c::pin() const {
  return *pin_;
}
inline void TransferM2c::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void TransferM2c::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void TransferM2c::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2c::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* TransferM2c::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2c::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string receiverName = 3;
inline bool TransferM2c::has_receivername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferM2c::set_has_receivername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferM2c::clear_has_receivername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferM2c::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& TransferM2c::receivername() const {
  return *receivername_;
}
inline void TransferM2c::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
}
inline void TransferM2c::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
}
inline void TransferM2c::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2c::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  return receivername_;
}
inline ::std::string* TransferM2c::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2c::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string receiverCardId = 4;
inline bool TransferM2c::has_receivercardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransferM2c::set_has_receivercardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransferM2c::clear_has_receivercardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransferM2c::clear_receivercardid() {
  if (receivercardid_ != &::google::protobuf::internal::kEmptyString) {
    receivercardid_->clear();
  }
  clear_has_receivercardid();
}
inline const ::std::string& TransferM2c::receivercardid() const {
  return *receivercardid_;
}
inline void TransferM2c::set_receivercardid(const ::std::string& value) {
  set_has_receivercardid();
  if (receivercardid_ == &::google::protobuf::internal::kEmptyString) {
    receivercardid_ = new ::std::string;
  }
  receivercardid_->assign(value);
}
inline void TransferM2c::set_receivercardid(const char* value) {
  set_has_receivercardid();
  if (receivercardid_ == &::google::protobuf::internal::kEmptyString) {
    receivercardid_ = new ::std::string;
  }
  receivercardid_->assign(value);
}
inline void TransferM2c::set_receivercardid(const char* value, size_t size) {
  set_has_receivercardid();
  if (receivercardid_ == &::google::protobuf::internal::kEmptyString) {
    receivercardid_ = new ::std::string;
  }
  receivercardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2c::mutable_receivercardid() {
  set_has_receivercardid();
  if (receivercardid_ == &::google::protobuf::internal::kEmptyString) {
    receivercardid_ = new ::std::string;
  }
  return receivercardid_;
}
inline ::std::string* TransferM2c::release_receivercardid() {
  clear_has_receivercardid();
  if (receivercardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receivercardid_;
    receivercardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2c::set_allocated_receivercardid(::std::string* receivercardid) {
  if (receivercardid_ != &::google::protobuf::internal::kEmptyString) {
    delete receivercardid_;
  }
  if (receivercardid) {
    set_has_receivercardid();
    receivercardid_ = receivercardid;
  } else {
    clear_has_receivercardid();
    receivercardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 receiverPhoneNumber = 5;
inline bool TransferM2c::has_receiverphonenumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransferM2c::set_has_receiverphonenumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransferM2c::clear_has_receiverphonenumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransferM2c::clear_receiverphonenumber() {
  receiverphonenumber_ = 0u;
  clear_has_receiverphonenumber();
}
inline ::google::protobuf::uint32 TransferM2c::receiverphonenumber() const {
  return receiverphonenumber_;
}
inline void TransferM2c::set_receiverphonenumber(::google::protobuf::uint32 value) {
  set_has_receiverphonenumber();
  receiverphonenumber_ = value;
}

// required uint64 amount = 6;
inline bool TransferM2c::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransferM2c::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransferM2c::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransferM2c::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TransferM2c::amount() const {
  return amount_;
}
inline void TransferM2c::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required string comment = 7;
inline bool TransferM2c::has_comment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransferM2c::set_has_comment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransferM2c::clear_has_comment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransferM2c::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TransferM2c::comment() const {
  return *comment_;
}
inline void TransferM2c::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void TransferM2c::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void TransferM2c::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferM2c::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* TransferM2c::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferM2c::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TransferM2cReply

// required uint32 phoneNumber = 1;
inline bool TransferM2cReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferM2cReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferM2cReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferM2cReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 TransferM2cReply::phonenumber() const {
  return phonenumber_;
}
inline void TransferM2cReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.TransferM2cReply.Result result = 2;
inline bool TransferM2cReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferM2cReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferM2cReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferM2cReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::TransferM2cReply_Result TransferM2cReply::result() const {
  return static_cast< ::com::mservice::momo::msg::TransferM2cReply_Result >(result_);
}
inline void TransferM2cReply::set_result(::com::mservice::momo::msg::TransferM2cReply_Result value) {
  assert(::com::mservice::momo::msg::TransferM2cReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// DepositWithdrawAtPlace

// required uint32 phoneNumber = 1;
inline bool DepositWithdrawAtPlace::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepositWithdrawAtPlace::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepositWithdrawAtPlace::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepositWithdrawAtPlace::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 DepositWithdrawAtPlace::phonenumber() const {
  return phonenumber_;
}
inline void DepositWithdrawAtPlace::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string address = 2;
inline bool DepositWithdrawAtPlace::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepositWithdrawAtPlace::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepositWithdrawAtPlace::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepositWithdrawAtPlace::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& DepositWithdrawAtPlace::address() const {
  return *address_;
}
inline void DepositWithdrawAtPlace::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void DepositWithdrawAtPlace::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void DepositWithdrawAtPlace::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DepositWithdrawAtPlace::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* DepositWithdrawAtPlace::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DepositWithdrawAtPlace::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 3;
inline bool DepositWithdrawAtPlace::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DepositWithdrawAtPlace::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DepositWithdrawAtPlace::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DepositWithdrawAtPlace::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 DepositWithdrawAtPlace::amount() const {
  return amount_;
}
inline void DepositWithdrawAtPlace::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required uint32 inOut = 4;
inline bool DepositWithdrawAtPlace::has_inout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DepositWithdrawAtPlace::set_has_inout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DepositWithdrawAtPlace::clear_has_inout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DepositWithdrawAtPlace::clear_inout() {
  inout_ = 0u;
  clear_has_inout();
}
inline ::google::protobuf::uint32 DepositWithdrawAtPlace::inout() const {
  return inout_;
}
inline void DepositWithdrawAtPlace::set_inout(::google::protobuf::uint32 value) {
  set_has_inout();
  inout_ = value;
}

// required string maTinh = 5;
inline bool DepositWithdrawAtPlace::has_matinh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DepositWithdrawAtPlace::set_has_matinh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DepositWithdrawAtPlace::clear_has_matinh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DepositWithdrawAtPlace::clear_matinh() {
  if (matinh_ != &::google::protobuf::internal::kEmptyString) {
    matinh_->clear();
  }
  clear_has_matinh();
}
inline const ::std::string& DepositWithdrawAtPlace::matinh() const {
  return *matinh_;
}
inline void DepositWithdrawAtPlace::set_matinh(const ::std::string& value) {
  set_has_matinh();
  if (matinh_ == &::google::protobuf::internal::kEmptyString) {
    matinh_ = new ::std::string;
  }
  matinh_->assign(value);
}
inline void DepositWithdrawAtPlace::set_matinh(const char* value) {
  set_has_matinh();
  if (matinh_ == &::google::protobuf::internal::kEmptyString) {
    matinh_ = new ::std::string;
  }
  matinh_->assign(value);
}
inline void DepositWithdrawAtPlace::set_matinh(const char* value, size_t size) {
  set_has_matinh();
  if (matinh_ == &::google::protobuf::internal::kEmptyString) {
    matinh_ = new ::std::string;
  }
  matinh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DepositWithdrawAtPlace::mutable_matinh() {
  set_has_matinh();
  if (matinh_ == &::google::protobuf::internal::kEmptyString) {
    matinh_ = new ::std::string;
  }
  return matinh_;
}
inline ::std::string* DepositWithdrawAtPlace::release_matinh() {
  clear_has_matinh();
  if (matinh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matinh_;
    matinh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DepositWithdrawAtPlace::set_allocated_matinh(::std::string* matinh) {
  if (matinh_ != &::google::protobuf::internal::kEmptyString) {
    delete matinh_;
  }
  if (matinh) {
    set_has_matinh();
    matinh_ = matinh;
  } else {
    clear_has_matinh();
    matinh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string maHuyen = 6;
inline bool DepositWithdrawAtPlace::has_mahuyen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DepositWithdrawAtPlace::set_has_mahuyen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DepositWithdrawAtPlace::clear_has_mahuyen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DepositWithdrawAtPlace::clear_mahuyen() {
  if (mahuyen_ != &::google::protobuf::internal::kEmptyString) {
    mahuyen_->clear();
  }
  clear_has_mahuyen();
}
inline const ::std::string& DepositWithdrawAtPlace::mahuyen() const {
  return *mahuyen_;
}
inline void DepositWithdrawAtPlace::set_mahuyen(const ::std::string& value) {
  set_has_mahuyen();
  if (mahuyen_ == &::google::protobuf::internal::kEmptyString) {
    mahuyen_ = new ::std::string;
  }
  mahuyen_->assign(value);
}
inline void DepositWithdrawAtPlace::set_mahuyen(const char* value) {
  set_has_mahuyen();
  if (mahuyen_ == &::google::protobuf::internal::kEmptyString) {
    mahuyen_ = new ::std::string;
  }
  mahuyen_->assign(value);
}
inline void DepositWithdrawAtPlace::set_mahuyen(const char* value, size_t size) {
  set_has_mahuyen();
  if (mahuyen_ == &::google::protobuf::internal::kEmptyString) {
    mahuyen_ = new ::std::string;
  }
  mahuyen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DepositWithdrawAtPlace::mutable_mahuyen() {
  set_has_mahuyen();
  if (mahuyen_ == &::google::protobuf::internal::kEmptyString) {
    mahuyen_ = new ::std::string;
  }
  return mahuyen_;
}
inline ::std::string* DepositWithdrawAtPlace::release_mahuyen() {
  clear_has_mahuyen();
  if (mahuyen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mahuyen_;
    mahuyen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DepositWithdrawAtPlace::set_allocated_mahuyen(::std::string* mahuyen) {
  if (mahuyen_ != &::google::protobuf::internal::kEmptyString) {
    delete mahuyen_;
  }
  if (mahuyen) {
    set_has_mahuyen();
    mahuyen_ = mahuyen;
  } else {
    clear_has_mahuyen();
    mahuyen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DepositWithdrawAtPlaceReply

// required uint32 phoneNumber = 1;
inline bool DepositWithdrawAtPlaceReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepositWithdrawAtPlaceReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepositWithdrawAtPlaceReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepositWithdrawAtPlaceReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 DepositWithdrawAtPlaceReply::phonenumber() const {
  return phonenumber_;
}
inline void DepositWithdrawAtPlaceReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.DepositWithdrawAtPlaceReply.Result result = 2;
inline bool DepositWithdrawAtPlaceReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepositWithdrawAtPlaceReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepositWithdrawAtPlaceReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepositWithdrawAtPlaceReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply::result() const {
  return static_cast< ::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result >(result_);
}
inline void DepositWithdrawAtPlaceReply::set_result(::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result value) {
  assert(::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// BillDetail

// optional string billId = 1;
inline bool BillDetail::has_billid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BillDetail::set_has_billid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BillDetail::clear_has_billid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BillDetail::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& BillDetail::billid() const {
  return *billid_;
}
inline void BillDetail::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void BillDetail::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void BillDetail::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BillDetail::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* BillDetail::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BillDetail::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 2;
inline bool BillDetail::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BillDetail::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BillDetail::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BillDetail::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 BillDetail::amount() const {
  return amount_;
}
inline void BillDetail::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 startDate = 3;
inline bool BillDetail::has_startdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BillDetail::set_has_startdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BillDetail::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BillDetail::clear_startdate() {
  startdate_ = GOOGLE_ULONGLONG(0);
  clear_has_startdate();
}
inline ::google::protobuf::uint64 BillDetail::startdate() const {
  return startdate_;
}
inline void BillDetail::set_startdate(::google::protobuf::uint64 value) {
  set_has_startdate();
  startdate_ = value;
}

// optional uint64 endDate = 4;
inline bool BillDetail::has_enddate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BillDetail::set_has_enddate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BillDetail::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BillDetail::clear_enddate() {
  enddate_ = GOOGLE_ULONGLONG(0);
  clear_has_enddate();
}
inline ::google::protobuf::uint64 BillDetail::enddate() const {
  return enddate_;
}
inline void BillDetail::set_enddate(::google::protobuf::uint64 value) {
  set_has_enddate();
  enddate_ = value;
}

// optional string providerId = 5;
inline bool BillDetail::has_providerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BillDetail::set_has_providerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BillDetail::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BillDetail::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& BillDetail::providerid() const {
  return *providerid_;
}
inline void BillDetail::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void BillDetail::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void BillDetail::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BillDetail::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* BillDetail::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BillDetail::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetBillInfo

// required uint32 phoneNumber = 1;
inline bool GetBillInfo::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBillInfo::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBillInfo::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBillInfo::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetBillInfo::phonenumber() const {
  return phonenumber_;
}
inline void GetBillInfo::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool GetBillInfo::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBillInfo::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBillInfo::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBillInfo::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& GetBillInfo::pin() const {
  return *pin_;
}
inline void GetBillInfo::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void GetBillInfo::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void GetBillInfo::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBillInfo::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* GetBillInfo::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBillInfo::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string providerId = 3;
inline bool GetBillInfo::has_providerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBillInfo::set_has_providerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBillInfo::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBillInfo::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& GetBillInfo::providerid() const {
  return *providerid_;
}
inline void GetBillInfo::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void GetBillInfo::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void GetBillInfo::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBillInfo::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* GetBillInfo::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBillInfo::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billId = 4;
inline bool GetBillInfo::has_billid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetBillInfo::set_has_billid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetBillInfo::clear_has_billid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetBillInfo::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& GetBillInfo::billid() const {
  return *billid_;
}
inline void GetBillInfo::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void GetBillInfo::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void GetBillInfo::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBillInfo::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* GetBillInfo::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBillInfo::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetBillInfoReply

// required uint32 phoneNumber = 1;
inline bool GetBillInfoReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBillInfoReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBillInfoReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBillInfoReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetBillInfoReply::phonenumber() const {
  return phonenumber_;
}
inline void GetBillInfoReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.GetBillInfoReply.Result result = 2;
inline bool GetBillInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBillInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBillInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBillInfoReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::GetBillInfoReply_Result GetBillInfoReply::result() const {
  return static_cast< ::com::mservice::momo::msg::GetBillInfoReply_Result >(result_);
}
inline void GetBillInfoReply::set_result(::com::mservice::momo::msg::GetBillInfoReply_Result value) {
  assert(::com::mservice::momo::msg::GetBillInfoReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .com.mservice.momo.msg.BillDetail billDetails = 3;
inline int GetBillInfoReply::billdetails_size() const {
  return billdetails_.size();
}
inline void GetBillInfoReply::clear_billdetails() {
  billdetails_.Clear();
}
inline const ::com::mservice::momo::msg::BillDetail& GetBillInfoReply::billdetails(int index) const {
  return billdetails_.Get(index);
}
inline ::com::mservice::momo::msg::BillDetail* GetBillInfoReply::mutable_billdetails(int index) {
  return billdetails_.Mutable(index);
}
inline ::com::mservice::momo::msg::BillDetail* GetBillInfoReply::add_billdetails() {
  return billdetails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >&
GetBillInfoReply::billdetails() const {
  return billdetails_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >*
GetBillInfoReply::mutable_billdetails() {
  return &billdetails_;
}

// optional string agentName = 4;
inline bool GetBillInfoReply::has_agentname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetBillInfoReply::set_has_agentname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetBillInfoReply::clear_has_agentname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetBillInfoReply::clear_agentname() {
  if (agentname_ != &::google::protobuf::internal::kEmptyString) {
    agentname_->clear();
  }
  clear_has_agentname();
}
inline const ::std::string& GetBillInfoReply::agentname() const {
  return *agentname_;
}
inline void GetBillInfoReply::set_agentname(const ::std::string& value) {
  set_has_agentname();
  if (agentname_ == &::google::protobuf::internal::kEmptyString) {
    agentname_ = new ::std::string;
  }
  agentname_->assign(value);
}
inline void GetBillInfoReply::set_agentname(const char* value) {
  set_has_agentname();
  if (agentname_ == &::google::protobuf::internal::kEmptyString) {
    agentname_ = new ::std::string;
  }
  agentname_->assign(value);
}
inline void GetBillInfoReply::set_agentname(const char* value, size_t size) {
  set_has_agentname();
  if (agentname_ == &::google::protobuf::internal::kEmptyString) {
    agentname_ = new ::std::string;
  }
  agentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBillInfoReply::mutable_agentname() {
  set_has_agentname();
  if (agentname_ == &::google::protobuf::internal::kEmptyString) {
    agentname_ = new ::std::string;
  }
  return agentname_;
}
inline ::std::string* GetBillInfoReply::release_agentname() {
  clear_has_agentname();
  if (agentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = agentname_;
    agentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBillInfoReply::set_allocated_agentname(::std::string* agentname) {
  if (agentname_ != &::google::protobuf::internal::kEmptyString) {
    delete agentname_;
  }
  if (agentname) {
    set_has_agentname();
    agentname_ = agentname;
  } else {
    clear_has_agentname();
    agentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string agentPhone = 5;
inline bool GetBillInfoReply::has_agentphone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetBillInfoReply::set_has_agentphone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetBillInfoReply::clear_has_agentphone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetBillInfoReply::clear_agentphone() {
  if (agentphone_ != &::google::protobuf::internal::kEmptyString) {
    agentphone_->clear();
  }
  clear_has_agentphone();
}
inline const ::std::string& GetBillInfoReply::agentphone() const {
  return *agentphone_;
}
inline void GetBillInfoReply::set_agentphone(const ::std::string& value) {
  set_has_agentphone();
  if (agentphone_ == &::google::protobuf::internal::kEmptyString) {
    agentphone_ = new ::std::string;
  }
  agentphone_->assign(value);
}
inline void GetBillInfoReply::set_agentphone(const char* value) {
  set_has_agentphone();
  if (agentphone_ == &::google::protobuf::internal::kEmptyString) {
    agentphone_ = new ::std::string;
  }
  agentphone_->assign(value);
}
inline void GetBillInfoReply::set_agentphone(const char* value, size_t size) {
  set_has_agentphone();
  if (agentphone_ == &::google::protobuf::internal::kEmptyString) {
    agentphone_ = new ::std::string;
  }
  agentphone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBillInfoReply::mutable_agentphone() {
  set_has_agentphone();
  if (agentphone_ == &::google::protobuf::internal::kEmptyString) {
    agentphone_ = new ::std::string;
  }
  return agentphone_;
}
inline ::std::string* GetBillInfoReply::release_agentphone() {
  clear_has_agentphone();
  if (agentphone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = agentphone_;
    agentphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBillInfoReply::set_allocated_agentphone(::std::string* agentphone) {
  if (agentphone_ != &::google::protobuf::internal::kEmptyString) {
    delete agentphone_;
  }
  if (agentphone) {
    set_has_agentphone();
    agentphone_ = agentphone;
  } else {
    clear_has_agentphone();
    agentphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string agentAddress = 6;
inline bool GetBillInfoReply::has_agentaddress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetBillInfoReply::set_has_agentaddress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetBillInfoReply::clear_has_agentaddress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetBillInfoReply::clear_agentaddress() {
  if (agentaddress_ != &::google::protobuf::internal::kEmptyString) {
    agentaddress_->clear();
  }
  clear_has_agentaddress();
}
inline const ::std::string& GetBillInfoReply::agentaddress() const {
  return *agentaddress_;
}
inline void GetBillInfoReply::set_agentaddress(const ::std::string& value) {
  set_has_agentaddress();
  if (agentaddress_ == &::google::protobuf::internal::kEmptyString) {
    agentaddress_ = new ::std::string;
  }
  agentaddress_->assign(value);
}
inline void GetBillInfoReply::set_agentaddress(const char* value) {
  set_has_agentaddress();
  if (agentaddress_ == &::google::protobuf::internal::kEmptyString) {
    agentaddress_ = new ::std::string;
  }
  agentaddress_->assign(value);
}
inline void GetBillInfoReply::set_agentaddress(const char* value, size_t size) {
  set_has_agentaddress();
  if (agentaddress_ == &::google::protobuf::internal::kEmptyString) {
    agentaddress_ = new ::std::string;
  }
  agentaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBillInfoReply::mutable_agentaddress() {
  set_has_agentaddress();
  if (agentaddress_ == &::google::protobuf::internal::kEmptyString) {
    agentaddress_ = new ::std::string;
  }
  return agentaddress_;
}
inline ::std::string* GetBillInfoReply::release_agentaddress() {
  clear_has_agentaddress();
  if (agentaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = agentaddress_;
    agentaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBillInfoReply::set_allocated_agentaddress(::std::string* agentaddress) {
  if (agentaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete agentaddress_;
  }
  if (agentaddress) {
    set_has_agentaddress();
    agentaddress_ = agentaddress;
  } else {
    clear_has_agentaddress();
    agentaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PayBill

// required uint32 phoneNumber = 1;
inline bool PayBill::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayBill::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayBill::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayBill::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 PayBill::phonenumber() const {
  return phonenumber_;
}
inline void PayBill::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool PayBill::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayBill::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayBill::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayBill::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& PayBill::pin() const {
  return *pin_;
}
inline void PayBill::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void PayBill::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void PayBill::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayBill::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* PayBill::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayBill::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string providerId = 3;
inline bool PayBill::has_providerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayBill::set_has_providerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayBill::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayBill::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& PayBill::providerid() const {
  return *providerid_;
}
inline void PayBill::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void PayBill::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void PayBill::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayBill::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* PayBill::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayBill::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billId = 4;
inline bool PayBill::has_billid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayBill::set_has_billid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayBill::clear_has_billid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayBill::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& PayBill::billid() const {
  return *billid_;
}
inline void PayBill::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void PayBill::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void PayBill::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayBill::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* PayBill::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayBill::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 5;
inline bool PayBill::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PayBill::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PayBill::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PayBill::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 PayBill::amount() const {
  return amount_;
}
inline void PayBill::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint32 fromSource = 6;
inline bool PayBill::has_fromsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PayBill::set_has_fromsource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PayBill::clear_has_fromsource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PayBill::clear_fromsource() {
  fromsource_ = 0u;
  clear_has_fromsource();
}
inline ::google::protobuf::uint32 PayBill::fromsource() const {
  return fromsource_;
}
inline void PayBill::set_fromsource(::google::protobuf::uint32 value) {
  set_has_fromsource();
  fromsource_ = value;
}

// -------------------------------------------------------------------

// PayBillReply

// required uint32 phoneNumber = 1;
inline bool PayBillReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayBillReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayBillReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayBillReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 PayBillReply::phonenumber() const {
  return phonenumber_;
}
inline void PayBillReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.PayBillReply.Result result = 2;
inline bool PayBillReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayBillReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayBillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayBillReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::PayBillReply_Result PayBillReply::result() const {
  return static_cast< ::com::mservice::momo::msg::PayBillReply_Result >(result_);
}
inline void PayBillReply::set_result(::com::mservice::momo::msg::PayBillReply_Result value) {
  assert(::com::mservice::momo::msg::PayBillReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool PayBillReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayBillReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayBillReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayBillReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& PayBillReply::transactionid() const {
  return *transactionid_;
}
inline void PayBillReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void PayBillReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void PayBillReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayBillReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* PayBillReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayBillReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Bill

// required uint32 phoneNumber = 1;
inline bool Bill::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bill::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bill::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bill::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 Bill::phonenumber() const {
  return phonenumber_;
}
inline void Bill::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string providerId = 3;
inline bool Bill::has_providerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bill::set_has_providerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bill::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bill::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& Bill::providerid() const {
  return *providerid_;
}
inline void Bill::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void Bill::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void Bill::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bill::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* Bill::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bill::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billId = 4;
inline bool Bill::has_billid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bill::set_has_billid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bill::clear_has_billid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bill::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& Bill::billid() const {
  return *billid_;
}
inline void Bill::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void Bill::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void Bill::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bill::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* Bill::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bill::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SaveBill

// required uint32 phoneNumber = 1;
inline bool SaveBill::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveBill::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveBill::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveBill::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 SaveBill::phonenumber() const {
  return phonenumber_;
}
inline void SaveBill::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool SaveBill::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveBill::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveBill::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveBill::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& SaveBill::pin() const {
  return *pin_;
}
inline void SaveBill::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void SaveBill::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void SaveBill::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaveBill::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* SaveBill::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaveBill::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string providerId = 3;
inline bool SaveBill::has_providerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveBill::set_has_providerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveBill::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveBill::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& SaveBill::providerid() const {
  return *providerid_;
}
inline void SaveBill::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void SaveBill::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void SaveBill::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaveBill::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* SaveBill::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaveBill::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billId = 4;
inline bool SaveBill::has_billid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveBill::set_has_billid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveBill::clear_has_billid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveBill::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& SaveBill::billid() const {
  return *billid_;
}
inline void SaveBill::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void SaveBill::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void SaveBill::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaveBill::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* SaveBill::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaveBill::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SaveBillReply

// required uint32 phoneNumber = 1;
inline bool SaveBillReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveBillReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveBillReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveBillReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 SaveBillReply::phonenumber() const {
  return phonenumber_;
}
inline void SaveBillReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.SaveBillReply.Result result = 2;
inline bool SaveBillReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveBillReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveBillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveBillReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::SaveBillReply_Result SaveBillReply::result() const {
  return static_cast< ::com::mservice::momo::msg::SaveBillReply_Result >(result_);
}
inline void SaveBillReply::set_result(::com::mservice::momo::msg::SaveBillReply_Result value) {
  assert(::com::mservice::momo::msg::SaveBillReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetSavedBill

// required uint32 phoneNumber = 1;
inline bool GetSavedBill::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSavedBill::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSavedBill::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSavedBill::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetSavedBill::phonenumber() const {
  return phonenumber_;
}
inline void GetSavedBill::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// -------------------------------------------------------------------

// GetSavedBillReply

// required uint32 phoneNumber = 1;
inline bool GetSavedBillReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSavedBillReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSavedBillReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSavedBillReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetSavedBillReply::phonenumber() const {
  return phonenumber_;
}
inline void GetSavedBillReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// repeated .com.mservice.momo.msg.BillDetail billDetails = 2;
inline int GetSavedBillReply::billdetails_size() const {
  return billdetails_.size();
}
inline void GetSavedBillReply::clear_billdetails() {
  billdetails_.Clear();
}
inline const ::com::mservice::momo::msg::BillDetail& GetSavedBillReply::billdetails(int index) const {
  return billdetails_.Get(index);
}
inline ::com::mservice::momo::msg::BillDetail* GetSavedBillReply::mutable_billdetails(int index) {
  return billdetails_.Mutable(index);
}
inline ::com::mservice::momo::msg::BillDetail* GetSavedBillReply::add_billdetails() {
  return billdetails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >&
GetSavedBillReply::billdetails() const {
  return billdetails_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::BillDetail >*
GetSavedBillReply::mutable_billdetails() {
  return &billdetails_;
}

// -------------------------------------------------------------------

// RemoveSavedBill

// required uint32 phoneNumber = 1;
inline bool RemoveSavedBill::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveSavedBill::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveSavedBill::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveSavedBill::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 RemoveSavedBill::phonenumber() const {
  return phonenumber_;
}
inline void RemoveSavedBill::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool RemoveSavedBill::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveSavedBill::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveSavedBill::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveSavedBill::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& RemoveSavedBill::pin() const {
  return *pin_;
}
inline void RemoveSavedBill::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void RemoveSavedBill::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void RemoveSavedBill::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveSavedBill::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* RemoveSavedBill::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveSavedBill::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string providerId = 3;
inline bool RemoveSavedBill::has_providerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveSavedBill::set_has_providerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveSavedBill::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveSavedBill::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& RemoveSavedBill::providerid() const {
  return *providerid_;
}
inline void RemoveSavedBill::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void RemoveSavedBill::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void RemoveSavedBill::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveSavedBill::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* RemoveSavedBill::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveSavedBill::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billId = 4;
inline bool RemoveSavedBill::has_billid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoveSavedBill::set_has_billid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoveSavedBill::clear_has_billid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoveSavedBill::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& RemoveSavedBill::billid() const {
  return *billid_;
}
inline void RemoveSavedBill::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void RemoveSavedBill::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void RemoveSavedBill::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveSavedBill::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* RemoveSavedBill::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveSavedBill::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RemoveSavedBillReply

// required uint32 phoneNumber = 1;
inline bool RemoveSavedBillReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveSavedBillReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveSavedBillReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveSavedBillReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 RemoveSavedBillReply::phonenumber() const {
  return phonenumber_;
}
inline void RemoveSavedBillReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 2;
inline bool RemoveSavedBillReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveSavedBillReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveSavedBillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveSavedBillReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::RemoveSavedBillReply_Result RemoveSavedBillReply::result() const {
  return static_cast< ::com::mservice::momo::msg::RemoveSavedBillReply_Result >(result_);
}
inline void RemoveSavedBillReply::set_result(::com::mservice::momo::msg::RemoveSavedBillReply_Result value) {
  assert(::com::mservice::momo::msg::RemoveSavedBillReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// BankIn

// required uint32 phoneNumber = 1;
inline bool BankIn::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankIn::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankIn::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankIn::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BankIn::phonenumber() const {
  return phonenumber_;
}
inline void BankIn::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool BankIn::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankIn::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankIn::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankIn::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& BankIn::pin() const {
  return *pin_;
}
inline void BankIn::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void BankIn::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void BankIn::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankIn::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* BankIn::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankIn::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string bankCode = 3;
inline bool BankIn::has_bankcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankIn::set_has_bankcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankIn::clear_has_bankcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankIn::clear_bankcode() {
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    bankcode_->clear();
  }
  clear_has_bankcode();
}
inline const ::std::string& BankIn::bankcode() const {
  return *bankcode_;
}
inline void BankIn::set_bankcode(const ::std::string& value) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(value);
}
inline void BankIn::set_bankcode(const char* value) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(value);
}
inline void BankIn::set_bankcode(const char* value, size_t size) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankIn::mutable_bankcode() {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  return bankcode_;
}
inline ::std::string* BankIn::release_bankcode() {
  clear_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankcode_;
    bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankIn::set_allocated_bankcode(::std::string* bankcode) {
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcode_;
  }
  if (bankcode) {
    set_has_bankcode();
    bankcode_ = bankcode;
  } else {
    clear_has_bankcode();
    bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 4;
inline bool BankIn::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankIn::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankIn::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankIn::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 BankIn::amount() const {
  return amount_;
}
inline void BankIn::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// BankInReply

// required uint32 phoneNumber = 1;
inline bool BankInReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankInReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankInReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankInReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BankInReply::phonenumber() const {
  return phonenumber_;
}
inline void BankInReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.BankInReply.Result result = 2;
inline bool BankInReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankInReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankInReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankInReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::BankInReply_Result BankInReply::result() const {
  return static_cast< ::com::mservice::momo::msg::BankInReply_Result >(result_);
}
inline void BankInReply::set_result(::com::mservice::momo::msg::BankInReply_Result value) {
  assert(::com::mservice::momo::msg::BankInReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool BankInReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankInReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankInReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankInReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& BankInReply::transactionid() const {
  return *transactionid_;
}
inline void BankInReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void BankInReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void BankInReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankInReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* BankInReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankInReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BankOut

// required uint32 phoneNumber = 1;
inline bool BankOut::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankOut::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankOut::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankOut::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BankOut::phonenumber() const {
  return phonenumber_;
}
inline void BankOut::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool BankOut::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankOut::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankOut::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankOut::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& BankOut::pin() const {
  return *pin_;
}
inline void BankOut::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void BankOut::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void BankOut::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOut::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* BankOut::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOut::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string bankCode = 3;
inline bool BankOut::has_bankcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankOut::set_has_bankcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankOut::clear_has_bankcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankOut::clear_bankcode() {
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    bankcode_->clear();
  }
  clear_has_bankcode();
}
inline const ::std::string& BankOut::bankcode() const {
  return *bankcode_;
}
inline void BankOut::set_bankcode(const ::std::string& value) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(value);
}
inline void BankOut::set_bankcode(const char* value) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(value);
}
inline void BankOut::set_bankcode(const char* value, size_t size) {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  bankcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOut::mutable_bankcode() {
  set_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    bankcode_ = new ::std::string;
  }
  return bankcode_;
}
inline ::std::string* BankOut::release_bankcode() {
  clear_has_bankcode();
  if (bankcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankcode_;
    bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOut::set_allocated_bankcode(::std::string* bankcode) {
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcode_;
  }
  if (bankcode) {
    set_has_bankcode();
    bankcode_ = bankcode;
  } else {
    clear_has_bankcode();
    bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 4;
inline bool BankOut::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankOut::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankOut::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankOut::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 BankOut::amount() const {
  return amount_;
}
inline void BankOut::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// BankOutReply

// required uint32 phoneNumber = 1;
inline bool BankOutReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankOutReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankOutReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankOutReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BankOutReply::phonenumber() const {
  return phonenumber_;
}
inline void BankOutReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.BankOutReply.Result result = 2;
inline bool BankOutReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankOutReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankOutReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankOutReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::BankOutReply_Result BankOutReply::result() const {
  return static_cast< ::com::mservice::momo::msg::BankOutReply_Result >(result_);
}
inline void BankOutReply::set_result(::com::mservice::momo::msg::BankOutReply_Result value) {
  assert(::com::mservice::momo::msg::BankOutReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool BankOutReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankOutReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankOutReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankOutReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& BankOutReply::transactionid() const {
  return *transactionid_;
}
inline void BankOutReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void BankOutReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void BankOutReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* BankOutReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BanknetToMomo

// required uint32 phoneNumber = 1;
inline bool BanknetToMomo::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BanknetToMomo::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BanknetToMomo::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BanknetToMomo::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BanknetToMomo::phonenumber() const {
  return phonenumber_;
}
inline void BanknetToMomo::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool BanknetToMomo::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BanknetToMomo::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BanknetToMomo::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BanknetToMomo::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& BanknetToMomo::pin() const {
  return *pin_;
}
inline void BanknetToMomo::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void BanknetToMomo::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void BanknetToMomo::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BanknetToMomo::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* BanknetToMomo::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BanknetToMomo::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string bankId = 3;
inline bool BanknetToMomo::has_bankid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BanknetToMomo::set_has_bankid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BanknetToMomo::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BanknetToMomo::clear_bankid() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    bankid_->clear();
  }
  clear_has_bankid();
}
inline const ::std::string& BanknetToMomo::bankid() const {
  return *bankid_;
}
inline void BanknetToMomo::set_bankid(const ::std::string& value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void BanknetToMomo::set_bankid(const char* value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void BanknetToMomo::set_bankid(const char* value, size_t size) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BanknetToMomo::mutable_bankid() {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  return bankid_;
}
inline ::std::string* BanknetToMomo::release_bankid() {
  clear_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankid_;
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BanknetToMomo::set_allocated_bankid(::std::string* bankid) {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (bankid) {
    set_has_bankid();
    bankid_ = bankid;
  } else {
    clear_has_bankid();
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 4;
inline bool BanknetToMomo::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BanknetToMomo::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BanknetToMomo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BanknetToMomo::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 BanknetToMomo::amount() const {
  return amount_;
}
inline void BanknetToMomo::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required string cardHolderName = 5;
inline bool BanknetToMomo::has_cardholdername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BanknetToMomo::set_has_cardholdername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BanknetToMomo::clear_has_cardholdername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BanknetToMomo::clear_cardholdername() {
  if (cardholdername_ != &::google::protobuf::internal::kEmptyString) {
    cardholdername_->clear();
  }
  clear_has_cardholdername();
}
inline const ::std::string& BanknetToMomo::cardholdername() const {
  return *cardholdername_;
}
inline void BanknetToMomo::set_cardholdername(const ::std::string& value) {
  set_has_cardholdername();
  if (cardholdername_ == &::google::protobuf::internal::kEmptyString) {
    cardholdername_ = new ::std::string;
  }
  cardholdername_->assign(value);
}
inline void BanknetToMomo::set_cardholdername(const char* value) {
  set_has_cardholdername();
  if (cardholdername_ == &::google::protobuf::internal::kEmptyString) {
    cardholdername_ = new ::std::string;
  }
  cardholdername_->assign(value);
}
inline void BanknetToMomo::set_cardholdername(const char* value, size_t size) {
  set_has_cardholdername();
  if (cardholdername_ == &::google::protobuf::internal::kEmptyString) {
    cardholdername_ = new ::std::string;
  }
  cardholdername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BanknetToMomo::mutable_cardholdername() {
  set_has_cardholdername();
  if (cardholdername_ == &::google::protobuf::internal::kEmptyString) {
    cardholdername_ = new ::std::string;
  }
  return cardholdername_;
}
inline ::std::string* BanknetToMomo::release_cardholdername() {
  clear_has_cardholdername();
  if (cardholdername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardholdername_;
    cardholdername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BanknetToMomo::set_allocated_cardholdername(::std::string* cardholdername) {
  if (cardholdername_ != &::google::protobuf::internal::kEmptyString) {
    delete cardholdername_;
  }
  if (cardholdername) {
    set_has_cardholdername();
    cardholdername_ = cardholdername;
  } else {
    clear_has_cardholdername();
    cardholdername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cardHolderNumber = 6;
inline bool BanknetToMomo::has_cardholdernumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BanknetToMomo::set_has_cardholdernumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BanknetToMomo::clear_has_cardholdernumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BanknetToMomo::clear_cardholdernumber() {
  if (cardholdernumber_ != &::google::protobuf::internal::kEmptyString) {
    cardholdernumber_->clear();
  }
  clear_has_cardholdernumber();
}
inline const ::std::string& BanknetToMomo::cardholdernumber() const {
  return *cardholdernumber_;
}
inline void BanknetToMomo::set_cardholdernumber(const ::std::string& value) {
  set_has_cardholdernumber();
  if (cardholdernumber_ == &::google::protobuf::internal::kEmptyString) {
    cardholdernumber_ = new ::std::string;
  }
  cardholdernumber_->assign(value);
}
inline void BanknetToMomo::set_cardholdernumber(const char* value) {
  set_has_cardholdernumber();
  if (cardholdernumber_ == &::google::protobuf::internal::kEmptyString) {
    cardholdernumber_ = new ::std::string;
  }
  cardholdernumber_->assign(value);
}
inline void BanknetToMomo::set_cardholdernumber(const char* value, size_t size) {
  set_has_cardholdernumber();
  if (cardholdernumber_ == &::google::protobuf::internal::kEmptyString) {
    cardholdernumber_ = new ::std::string;
  }
  cardholdernumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BanknetToMomo::mutable_cardholdernumber() {
  set_has_cardholdernumber();
  if (cardholdernumber_ == &::google::protobuf::internal::kEmptyString) {
    cardholdernumber_ = new ::std::string;
  }
  return cardholdernumber_;
}
inline ::std::string* BanknetToMomo::release_cardholdernumber() {
  clear_has_cardholdernumber();
  if (cardholdernumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardholdernumber_;
    cardholdernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BanknetToMomo::set_allocated_cardholdernumber(::std::string* cardholdernumber) {
  if (cardholdernumber_ != &::google::protobuf::internal::kEmptyString) {
    delete cardholdernumber_;
  }
  if (cardholdernumber) {
    set_has_cardholdernumber();
    cardholdernumber_ = cardholdernumber;
  } else {
    clear_has_cardholdernumber();
    cardholdernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 cardHolderMonth = 7;
inline bool BanknetToMomo::has_cardholdermonth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BanknetToMomo::set_has_cardholdermonth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BanknetToMomo::clear_has_cardholdermonth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BanknetToMomo::clear_cardholdermonth() {
  cardholdermonth_ = 0u;
  clear_has_cardholdermonth();
}
inline ::google::protobuf::uint32 BanknetToMomo::cardholdermonth() const {
  return cardholdermonth_;
}
inline void BanknetToMomo::set_cardholdermonth(::google::protobuf::uint32 value) {
  set_has_cardholdermonth();
  cardholdermonth_ = value;
}

// required uint32 cardHolderYear = 8;
inline bool BanknetToMomo::has_cardholderyear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BanknetToMomo::set_has_cardholderyear() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BanknetToMomo::clear_has_cardholderyear() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BanknetToMomo::clear_cardholderyear() {
  cardholderyear_ = 0u;
  clear_has_cardholderyear();
}
inline ::google::protobuf::uint32 BanknetToMomo::cardholderyear() const {
  return cardholderyear_;
}
inline void BanknetToMomo::set_cardholderyear(::google::protobuf::uint32 value) {
  set_has_cardholderyear();
  cardholderyear_ = value;
}

// -------------------------------------------------------------------

// BanknetToMomoReply

// required uint32 phoneNumber = 1;
inline bool BanknetToMomoReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BanknetToMomoReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BanknetToMomoReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BanknetToMomoReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BanknetToMomoReply::phonenumber() const {
  return phonenumber_;
}
inline void BanknetToMomoReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.BanknetToMomoReply.Result result = 2;
inline bool BanknetToMomoReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BanknetToMomoReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BanknetToMomoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BanknetToMomoReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::BanknetToMomoReply_Result BanknetToMomoReply::result() const {
  return static_cast< ::com::mservice::momo::msg::BanknetToMomoReply_Result >(result_);
}
inline void BanknetToMomoReply::set_result(::com::mservice::momo::msg::BanknetToMomoReply_Result value) {
  assert(::com::mservice::momo::msg::BanknetToMomoReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// required string transactionId = 3;
inline bool BanknetToMomoReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BanknetToMomoReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BanknetToMomoReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BanknetToMomoReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& BanknetToMomoReply::transactionid() const {
  return *transactionid_;
}
inline void BanknetToMomoReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void BanknetToMomoReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void BanknetToMomoReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BanknetToMomoReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* BanknetToMomoReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BanknetToMomoReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string merchantTransactionId = 4;
inline bool BanknetToMomoReply::has_merchanttransactionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BanknetToMomoReply::set_has_merchanttransactionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BanknetToMomoReply::clear_has_merchanttransactionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BanknetToMomoReply::clear_merchanttransactionid() {
  if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_->clear();
  }
  clear_has_merchanttransactionid();
}
inline const ::std::string& BanknetToMomoReply::merchanttransactionid() const {
  return *merchanttransactionid_;
}
inline void BanknetToMomoReply::set_merchanttransactionid(const ::std::string& value) {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  merchanttransactionid_->assign(value);
}
inline void BanknetToMomoReply::set_merchanttransactionid(const char* value) {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  merchanttransactionid_->assign(value);
}
inline void BanknetToMomoReply::set_merchanttransactionid(const char* value, size_t size) {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  merchanttransactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BanknetToMomoReply::mutable_merchanttransactionid() {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  return merchanttransactionid_;
}
inline ::std::string* BanknetToMomoReply::release_merchanttransactionid() {
  clear_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = merchanttransactionid_;
    merchanttransactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BanknetToMomoReply::set_allocated_merchanttransactionid(::std::string* merchanttransactionid) {
  if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete merchanttransactionid_;
  }
  if (merchanttransactionid) {
    set_has_merchanttransactionid();
    merchanttransactionid_ = merchanttransactionid;
  } else {
    clear_has_merchanttransactionid();
    merchanttransactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 banketError = 5;
inline bool BanknetToMomoReply::has_banketerror() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BanknetToMomoReply::set_has_banketerror() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BanknetToMomoReply::clear_has_banketerror() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BanknetToMomoReply::clear_banketerror() {
  banketerror_ = 0u;
  clear_has_banketerror();
}
inline ::google::protobuf::uint32 BanknetToMomoReply::banketerror() const {
  return banketerror_;
}
inline void BanknetToMomoReply::set_banketerror(::google::protobuf::uint32 value) {
  set_has_banketerror();
  banketerror_ = value;
}

// -------------------------------------------------------------------

// VerifyBanknetOtp

// required uint32 phoneNumber = 1;
inline bool VerifyBanknetOtp::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyBanknetOtp::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyBanknetOtp::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyBanknetOtp::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 VerifyBanknetOtp::phonenumber() const {
  return phonenumber_;
}
inline void VerifyBanknetOtp::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required uint64 amount = 2;
inline bool VerifyBanknetOtp::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyBanknetOtp::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyBanknetOtp::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyBanknetOtp::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 VerifyBanknetOtp::amount() const {
  return amount_;
}
inline void VerifyBanknetOtp::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required string transactionId = 3;
inline bool VerifyBanknetOtp::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyBanknetOtp::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyBanknetOtp::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyBanknetOtp::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& VerifyBanknetOtp::transactionid() const {
  return *transactionid_;
}
inline void VerifyBanknetOtp::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void VerifyBanknetOtp::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void VerifyBanknetOtp::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyBanknetOtp::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* VerifyBanknetOtp::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyBanknetOtp::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string merchantTransactionId = 4;
inline bool VerifyBanknetOtp::has_merchanttransactionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyBanknetOtp::set_has_merchanttransactionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyBanknetOtp::clear_has_merchanttransactionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyBanknetOtp::clear_merchanttransactionid() {
  if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_->clear();
  }
  clear_has_merchanttransactionid();
}
inline const ::std::string& VerifyBanknetOtp::merchanttransactionid() const {
  return *merchanttransactionid_;
}
inline void VerifyBanknetOtp::set_merchanttransactionid(const ::std::string& value) {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  merchanttransactionid_->assign(value);
}
inline void VerifyBanknetOtp::set_merchanttransactionid(const char* value) {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  merchanttransactionid_->assign(value);
}
inline void VerifyBanknetOtp::set_merchanttransactionid(const char* value, size_t size) {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  merchanttransactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyBanknetOtp::mutable_merchanttransactionid() {
  set_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    merchanttransactionid_ = new ::std::string;
  }
  return merchanttransactionid_;
}
inline ::std::string* VerifyBanknetOtp::release_merchanttransactionid() {
  clear_has_merchanttransactionid();
  if (merchanttransactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = merchanttransactionid_;
    merchanttransactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyBanknetOtp::set_allocated_merchanttransactionid(::std::string* merchanttransactionid) {
  if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete merchanttransactionid_;
  }
  if (merchanttransactionid) {
    set_has_merchanttransactionid();
    merchanttransactionid_ = merchanttransactionid;
  } else {
    clear_has_merchanttransactionid();
    merchanttransactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string otp = 5;
inline bool VerifyBanknetOtp::has_otp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyBanknetOtp::set_has_otp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyBanknetOtp::clear_has_otp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyBanknetOtp::clear_otp() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    otp_->clear();
  }
  clear_has_otp();
}
inline const ::std::string& VerifyBanknetOtp::otp() const {
  return *otp_;
}
inline void VerifyBanknetOtp::set_otp(const ::std::string& value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void VerifyBanknetOtp::set_otp(const char* value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void VerifyBanknetOtp::set_otp(const char* value, size_t size) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyBanknetOtp::mutable_otp() {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  return otp_;
}
inline ::std::string* VerifyBanknetOtp::release_otp() {
  clear_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otp_;
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyBanknetOtp::set_allocated_otp(::std::string* otp) {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (otp) {
    set_has_otp();
    otp_ = otp;
  } else {
    clear_has_otp();
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string bankId = 6;
inline bool VerifyBanknetOtp::has_bankid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VerifyBanknetOtp::set_has_bankid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VerifyBanknetOtp::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VerifyBanknetOtp::clear_bankid() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    bankid_->clear();
  }
  clear_has_bankid();
}
inline const ::std::string& VerifyBanknetOtp::bankid() const {
  return *bankid_;
}
inline void VerifyBanknetOtp::set_bankid(const ::std::string& value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void VerifyBanknetOtp::set_bankid(const char* value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void VerifyBanknetOtp::set_bankid(const char* value, size_t size) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyBanknetOtp::mutable_bankid() {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  return bankid_;
}
inline ::std::string* VerifyBanknetOtp::release_bankid() {
  clear_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankid_;
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyBanknetOtp::set_allocated_bankid(::std::string* bankid) {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (bankid) {
    set_has_bankid();
    bankid_ = bankid;
  } else {
    clear_has_bankid();
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VerifyBanknetOtpReply

// required uint32 phoneNumber = 1;
inline bool VerifyBanknetOtpReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyBanknetOtpReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyBanknetOtpReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyBanknetOtpReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 VerifyBanknetOtpReply::phonenumber() const {
  return phonenumber_;
}
inline void VerifyBanknetOtpReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required uint32 result = 2;
inline bool VerifyBanknetOtpReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyBanknetOtpReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyBanknetOtpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyBanknetOtpReply::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 VerifyBanknetOtpReply::result() const {
  return result_;
}
inline void VerifyBanknetOtpReply::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Location

// optional double longitude = 1;
inline bool Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Location::longitude() const {
  return longitude_;
}
inline void Location::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// optional double latitude = 2;
inline bool Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Location::latitude() const {
  return latitude_;
}
inline void Location::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// -------------------------------------------------------------------

// StoreInfo

// optional string name = 3;
inline bool StoreInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StoreInfo::name() const {
  return *name_;
}
inline void StoreInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StoreInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StoreInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StoreInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ownerName = 1;
inline bool StoreInfo::has_ownername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreInfo::set_has_ownername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreInfo::clear_has_ownername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreInfo::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& StoreInfo::ownername() const {
  return *ownername_;
}
inline void StoreInfo::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void StoreInfo::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void StoreInfo::set_ownername(const char* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreInfo::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* StoreInfo::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreInfo::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ownerPhone = 2;
inline bool StoreInfo::has_ownerphone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreInfo::set_has_ownerphone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreInfo::clear_has_ownerphone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreInfo::clear_ownerphone() {
  if (ownerphone_ != &::google::protobuf::internal::kEmptyString) {
    ownerphone_->clear();
  }
  clear_has_ownerphone();
}
inline const ::std::string& StoreInfo::ownerphone() const {
  return *ownerphone_;
}
inline void StoreInfo::set_ownerphone(const ::std::string& value) {
  set_has_ownerphone();
  if (ownerphone_ == &::google::protobuf::internal::kEmptyString) {
    ownerphone_ = new ::std::string;
  }
  ownerphone_->assign(value);
}
inline void StoreInfo::set_ownerphone(const char* value) {
  set_has_ownerphone();
  if (ownerphone_ == &::google::protobuf::internal::kEmptyString) {
    ownerphone_ = new ::std::string;
  }
  ownerphone_->assign(value);
}
inline void StoreInfo::set_ownerphone(const char* value, size_t size) {
  set_has_ownerphone();
  if (ownerphone_ == &::google::protobuf::internal::kEmptyString) {
    ownerphone_ = new ::std::string;
  }
  ownerphone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreInfo::mutable_ownerphone() {
  set_has_ownerphone();
  if (ownerphone_ == &::google::protobuf::internal::kEmptyString) {
    ownerphone_ = new ::std::string;
  }
  return ownerphone_;
}
inline ::std::string* StoreInfo::release_ownerphone() {
  clear_has_ownerphone();
  if (ownerphone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownerphone_;
    ownerphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreInfo::set_allocated_ownerphone(::std::string* ownerphone) {
  if (ownerphone_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerphone_;
  }
  if (ownerphone) {
    set_has_ownerphone();
    ownerphone_ = ownerphone;
  } else {
    clear_has_ownerphone();
    ownerphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.mservice.momo.msg.Location location = 4;
inline bool StoreInfo::has_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreInfo::set_has_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreInfo::clear_location() {
  if (location_ != NULL) location_->::com::mservice::momo::msg::Location::Clear();
  clear_has_location();
}
inline const ::com::mservice::momo::msg::Location& StoreInfo::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::com::mservice::momo::msg::Location* StoreInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::com::mservice::momo::msg::Location;
  return location_;
}
inline ::com::mservice::momo::msg::Location* StoreInfo::release_location() {
  clear_has_location();
  ::com::mservice::momo::msg::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void StoreInfo::set_allocated_location(::com::mservice::momo::msg::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// optional string address = 5;
inline bool StoreInfo::has_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoreInfo::set_has_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoreInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoreInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& StoreInfo::address() const {
  return *address_;
}
inline void StoreInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void StoreInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void StoreInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* StoreInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 districtId = 6;
inline bool StoreInfo::has_districtid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoreInfo::set_has_districtid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StoreInfo::clear_has_districtid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StoreInfo::clear_districtid() {
  districtid_ = 0u;
  clear_has_districtid();
}
inline ::google::protobuf::uint32 StoreInfo::districtid() const {
  return districtid_;
}
inline void StoreInfo::set_districtid(::google::protobuf::uint32 value) {
  set_has_districtid();
  districtid_ = value;
}

// optional uint32 cityId = 7;
inline bool StoreInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StoreInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StoreInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StoreInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 StoreInfo::cityid() const {
  return cityid_;
}
inline void StoreInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional uint32 areaId = 8;
inline bool StoreInfo::has_areaid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StoreInfo::set_has_areaid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StoreInfo::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StoreInfo::clear_areaid() {
  areaid_ = 0u;
  clear_has_areaid();
}
inline ::google::protobuf::uint32 StoreInfo::areaid() const {
  return areaid_;
}
inline void StoreInfo::set_areaid(::google::protobuf::uint32 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional string street = 9;
inline bool StoreInfo::has_street() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StoreInfo::set_has_street() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StoreInfo::clear_has_street() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StoreInfo::clear_street() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    street_->clear();
  }
  clear_has_street();
}
inline const ::std::string& StoreInfo::street() const {
  return *street_;
}
inline void StoreInfo::set_street(const ::std::string& value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void StoreInfo::set_street(const char* value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void StoreInfo::set_street(const char* value, size_t size) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreInfo::mutable_street() {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  return street_;
}
inline ::std::string* StoreInfo::release_street() {
  clear_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = street_;
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreInfo::set_allocated_street(::std::string* street) {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (street) {
    set_has_street();
    street_ = street;
  } else {
    clear_has_street();
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wardName = 10;
inline bool StoreInfo::has_wardname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StoreInfo::set_has_wardname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StoreInfo::clear_has_wardname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StoreInfo::clear_wardname() {
  if (wardname_ != &::google::protobuf::internal::kEmptyString) {
    wardname_->clear();
  }
  clear_has_wardname();
}
inline const ::std::string& StoreInfo::wardname() const {
  return *wardname_;
}
inline void StoreInfo::set_wardname(const ::std::string& value) {
  set_has_wardname();
  if (wardname_ == &::google::protobuf::internal::kEmptyString) {
    wardname_ = new ::std::string;
  }
  wardname_->assign(value);
}
inline void StoreInfo::set_wardname(const char* value) {
  set_has_wardname();
  if (wardname_ == &::google::protobuf::internal::kEmptyString) {
    wardname_ = new ::std::string;
  }
  wardname_->assign(value);
}
inline void StoreInfo::set_wardname(const char* value, size_t size) {
  set_has_wardname();
  if (wardname_ == &::google::protobuf::internal::kEmptyString) {
    wardname_ = new ::std::string;
  }
  wardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreInfo::mutable_wardname() {
  set_has_wardname();
  if (wardname_ == &::google::protobuf::internal::kEmptyString) {
    wardname_ = new ::std::string;
  }
  return wardname_;
}
inline ::std::string* StoreInfo::release_wardname() {
  clear_has_wardname();
  if (wardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wardname_;
    wardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreInfo::set_allocated_wardname(::std::string* wardname) {
  if (wardname_ != &::google::protobuf::internal::kEmptyString) {
    delete wardname_;
  }
  if (wardname) {
    set_has_wardname();
    wardname_ = wardname;
  } else {
    clear_has_wardname();
    wardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetStoreAround

// required double longitude = 1;
inline bool GetStoreAround::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStoreAround::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStoreAround::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStoreAround::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double GetStoreAround::longitude() const {
  return longitude_;
}
inline void GetStoreAround::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// required double latitude = 2;
inline bool GetStoreAround::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetStoreAround::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetStoreAround::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetStoreAround::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double GetStoreAround::latitude() const {
  return latitude_;
}
inline void GetStoreAround::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// optional uint32 cityId = 3;
inline bool GetStoreAround::has_cityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetStoreAround::set_has_cityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetStoreAround::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetStoreAround::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 GetStoreAround::cityid() const {
  return cityid_;
}
inline void GetStoreAround::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional uint32 districtId = 4;
inline bool GetStoreAround::has_districtid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetStoreAround::set_has_districtid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetStoreAround::clear_has_districtid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetStoreAround::clear_districtid() {
  districtid_ = 0u;
  clear_has_districtid();
}
inline ::google::protobuf::uint32 GetStoreAround::districtid() const {
  return districtid_;
}
inline void GetStoreAround::set_districtid(::google::protobuf::uint32 value) {
  set_has_districtid();
  districtid_ = value;
}

// optional uint32 limit = 5;
inline bool GetStoreAround::has_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetStoreAround::set_has_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetStoreAround::clear_has_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetStoreAround::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 GetStoreAround::limit() const {
  return limit_;
}
inline void GetStoreAround::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
}

// -------------------------------------------------------------------

// GetStoreAroundReply

// repeated .com.mservice.momo.msg.StoreInfo stores = 1;
inline int GetStoreAroundReply::stores_size() const {
  return stores_.size();
}
inline void GetStoreAroundReply::clear_stores() {
  stores_.Clear();
}
inline const ::com::mservice::momo::msg::StoreInfo& GetStoreAroundReply::stores(int index) const {
  return stores_.Get(index);
}
inline ::com::mservice::momo::msg::StoreInfo* GetStoreAroundReply::mutable_stores(int index) {
  return stores_.Mutable(index);
}
inline ::com::mservice::momo::msg::StoreInfo* GetStoreAroundReply::add_stores() {
  return stores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >&
GetStoreAroundReply::stores() const {
  return stores_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >*
GetStoreAroundReply::mutable_stores() {
  return &stores_;
}

// -------------------------------------------------------------------

// GetStoreByCode

// required uint32 cid = 1;
inline bool GetStoreByCode::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStoreByCode::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStoreByCode::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStoreByCode::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 GetStoreByCode::cid() const {
  return cid_;
}
inline void GetStoreByCode::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 did = 2;
inline bool GetStoreByCode::has_did() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetStoreByCode::set_has_did() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetStoreByCode::clear_has_did() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetStoreByCode::clear_did() {
  did_ = 0u;
  clear_has_did();
}
inline ::google::protobuf::uint32 GetStoreByCode::did() const {
  return did_;
}
inline void GetStoreByCode::set_did(::google::protobuf::uint32 value) {
  set_has_did();
  did_ = value;
}

// required uint32 pageSize = 3;
inline bool GetStoreByCode::has_pagesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetStoreByCode::set_has_pagesize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetStoreByCode::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetStoreByCode::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 GetStoreByCode::pagesize() const {
  return pagesize_;
}
inline void GetStoreByCode::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// required uint32 pageNum = 4;
inline bool GetStoreByCode::has_pagenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetStoreByCode::set_has_pagenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetStoreByCode::clear_has_pagenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetStoreByCode::clear_pagenum() {
  pagenum_ = 0u;
  clear_has_pagenum();
}
inline ::google::protobuf::uint32 GetStoreByCode::pagenum() const {
  return pagenum_;
}
inline void GetStoreByCode::set_pagenum(::google::protobuf::uint32 value) {
  set_has_pagenum();
  pagenum_ = value;
}

// -------------------------------------------------------------------

// GetStoreByCodeReply

// required uint64 pageCount = 1;
inline bool GetStoreByCodeReply::has_pagecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStoreByCodeReply::set_has_pagecount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStoreByCodeReply::clear_has_pagecount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStoreByCodeReply::clear_pagecount() {
  pagecount_ = GOOGLE_ULONGLONG(0);
  clear_has_pagecount();
}
inline ::google::protobuf::uint64 GetStoreByCodeReply::pagecount() const {
  return pagecount_;
}
inline void GetStoreByCodeReply::set_pagecount(::google::protobuf::uint64 value) {
  set_has_pagecount();
  pagecount_ = value;
}

// repeated .com.mservice.momo.msg.StoreInfo stores = 2;
inline int GetStoreByCodeReply::stores_size() const {
  return stores_.size();
}
inline void GetStoreByCodeReply::clear_stores() {
  stores_.Clear();
}
inline const ::com::mservice::momo::msg::StoreInfo& GetStoreByCodeReply::stores(int index) const {
  return stores_.Get(index);
}
inline ::com::mservice::momo::msg::StoreInfo* GetStoreByCodeReply::mutable_stores(int index) {
  return stores_.Mutable(index);
}
inline ::com::mservice::momo::msg::StoreInfo* GetStoreByCodeReply::add_stores() {
  return stores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >&
GetStoreByCodeReply::stores() const {
  return stores_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::StoreInfo >*
GetStoreByCodeReply::mutable_stores() {
  return &stores_;
}

// -------------------------------------------------------------------

// KeyValueData

// required .com.mservice.momo.msg.KeyValueData.CommandType commandType = 1;
inline bool KeyValueData::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValueData::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValueData::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValueData::clear_commandtype() {
  commandtype_ = 0;
  clear_has_commandtype();
}
inline ::com::mservice::momo::msg::KeyValueData_CommandType KeyValueData::commandtype() const {
  return static_cast< ::com::mservice::momo::msg::KeyValueData_CommandType >(commandtype_);
}
inline void KeyValueData::set_commandtype(::com::mservice::momo::msg::KeyValueData_CommandType value) {
  assert(::com::mservice::momo::msg::KeyValueData_CommandType_IsValid(value));
  set_has_commandtype();
  commandtype_ = value;
}

// required string key = 2;
inline bool KeyValueData::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValueData::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValueData::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValueData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValueData::key() const {
  return *key_;
}
inline void KeyValueData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValueData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValueData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValueData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValueData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValueData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 3;
inline bool KeyValueData::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyValueData::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeyValueData::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeyValueData::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValueData::value() const {
  return *value_;
}
inline void KeyValueData::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValueData::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValueData::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValueData::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KeyValueData::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValueData::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeyValueDataReply

// required .com.mservice.momo.msg.KeyValueDataReply.Result result = 1;
inline bool KeyValueDataReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValueDataReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValueDataReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValueDataReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::KeyValueDataReply_Result KeyValueDataReply::result() const {
  return static_cast< ::com::mservice::momo::msg::KeyValueDataReply_Result >(result_);
}
inline void KeyValueDataReply::set_result(::com::mservice::momo::msg::KeyValueDataReply_Result value) {
  assert(::com::mservice::momo::msg::KeyValueDataReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string value = 2;
inline bool KeyValueDataReply::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValueDataReply::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValueDataReply::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValueDataReply::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValueDataReply::value() const {
  return *value_;
}
inline void KeyValueDataReply::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValueDataReply::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValueDataReply::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValueDataReply::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KeyValueDataReply::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValueDataReply::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetAvatarUploadToken

// required uint32 phoneNumber = 1;
inline bool GetAvatarUploadToken::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAvatarUploadToken::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAvatarUploadToken::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAvatarUploadToken::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetAvatarUploadToken::phonenumber() const {
  return phonenumber_;
}
inline void GetAvatarUploadToken::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// -------------------------------------------------------------------

// GetAvatarUploadTokenReply

// required uint32 phoneNumber = 1;
inline bool GetAvatarUploadTokenReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAvatarUploadTokenReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAvatarUploadTokenReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAvatarUploadTokenReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 GetAvatarUploadTokenReply::phonenumber() const {
  return phonenumber_;
}
inline void GetAvatarUploadTokenReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string token = 2;
inline bool GetAvatarUploadTokenReply::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAvatarUploadTokenReply::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAvatarUploadTokenReply::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAvatarUploadTokenReply::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& GetAvatarUploadTokenReply::token() const {
  return *token_;
}
inline void GetAvatarUploadTokenReply::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void GetAvatarUploadTokenReply::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void GetAvatarUploadTokenReply::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAvatarUploadTokenReply::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* GetAvatarUploadTokenReply::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAvatarUploadTokenReply::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Pay123MuaOrder

// required uint32 phoneNumber = 1;
inline bool Pay123MuaOrder::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pay123MuaOrder::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pay123MuaOrder::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pay123MuaOrder::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 Pay123MuaOrder::phonenumber() const {
  return phonenumber_;
}
inline void Pay123MuaOrder::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string pin = 2;
inline bool Pay123MuaOrder::has_pin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pay123MuaOrder::set_has_pin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pay123MuaOrder::clear_has_pin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pay123MuaOrder::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& Pay123MuaOrder::pin() const {
  return *pin_;
}
inline void Pay123MuaOrder::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Pay123MuaOrder::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Pay123MuaOrder::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pay123MuaOrder::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* Pay123MuaOrder::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pay123MuaOrder::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 receiverPhoneNumber = 3;
inline bool Pay123MuaOrder::has_receiverphonenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pay123MuaOrder::set_has_receiverphonenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pay123MuaOrder::clear_has_receiverphonenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pay123MuaOrder::clear_receiverphonenumber() {
  receiverphonenumber_ = 0u;
  clear_has_receiverphonenumber();
}
inline ::google::protobuf::uint32 Pay123MuaOrder::receiverphonenumber() const {
  return receiverphonenumber_;
}
inline void Pay123MuaOrder::set_receiverphonenumber(::google::protobuf::uint32 value) {
  set_has_receiverphonenumber();
  receiverphonenumber_ = value;
}

// required uint64 amount = 4;
inline bool Pay123MuaOrder::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pay123MuaOrder::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pay123MuaOrder::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pay123MuaOrder::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 Pay123MuaOrder::amount() const {
  return amount_;
}
inline void Pay123MuaOrder::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required string comment = 5;
inline bool Pay123MuaOrder::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pay123MuaOrder::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pay123MuaOrder::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pay123MuaOrder::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Pay123MuaOrder::comment() const {
  return *comment_;
}
inline void Pay123MuaOrder::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Pay123MuaOrder::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Pay123MuaOrder::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pay123MuaOrder::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Pay123MuaOrder::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pay123MuaOrder::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string orderId = 6;
inline bool Pay123MuaOrder::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pay123MuaOrder::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pay123MuaOrder::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pay123MuaOrder::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& Pay123MuaOrder::orderid() const {
  return *orderid_;
}
inline void Pay123MuaOrder::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Pay123MuaOrder::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Pay123MuaOrder::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pay123MuaOrder::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* Pay123MuaOrder::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pay123MuaOrder::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Pay123MuaOrderReply

// required uint32 phoneNumber = 1;
inline bool Pay123MuaOrderReply::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pay123MuaOrderReply::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pay123MuaOrderReply::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pay123MuaOrderReply::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 Pay123MuaOrderReply::phonenumber() const {
  return phonenumber_;
}
inline void Pay123MuaOrderReply::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required .com.mservice.momo.msg.Pay123MuaOrderReply.Result result = 2;
inline bool Pay123MuaOrderReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pay123MuaOrderReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pay123MuaOrderReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pay123MuaOrderReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::Pay123MuaOrderReply_Result Pay123MuaOrderReply::result() const {
  return static_cast< ::com::mservice::momo::msg::Pay123MuaOrderReply_Result >(result_);
}
inline void Pay123MuaOrderReply::set_result(::com::mservice::momo::msg::Pay123MuaOrderReply_Result value) {
  assert(::com::mservice::momo::msg::Pay123MuaOrderReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 3;
inline bool Pay123MuaOrderReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pay123MuaOrderReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pay123MuaOrderReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pay123MuaOrderReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& Pay123MuaOrderReply::transactionid() const {
  return *transactionid_;
}
inline void Pay123MuaOrderReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void Pay123MuaOrderReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void Pay123MuaOrderReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pay123MuaOrderReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* Pay123MuaOrderReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pay123MuaOrderReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TransactionFee

// optional double dynamicFee = 1;
inline bool TransactionFee::has_dynamicfee() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionFee::set_has_dynamicfee() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionFee::clear_has_dynamicfee() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionFee::clear_dynamicfee() {
  dynamicfee_ = 0;
  clear_has_dynamicfee();
}
inline double TransactionFee::dynamicfee() const {
  return dynamicfee_;
}
inline void TransactionFee::set_dynamicfee(double value) {
  set_has_dynamicfee();
  dynamicfee_ = value;
}

// optional uint32 staticFee = 2;
inline bool TransactionFee::has_staticfee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionFee::set_has_staticfee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionFee::clear_has_staticfee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionFee::clear_staticfee() {
  staticfee_ = 0u;
  clear_has_staticfee();
}
inline ::google::protobuf::uint32 TransactionFee::staticfee() const {
  return staticfee_;
}
inline void TransactionFee::set_staticfee(::google::protobuf::uint32 value) {
  set_has_staticfee();
  staticfee_ = value;
}

// optional string bankId = 3;
inline bool TransactionFee::has_bankid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionFee::set_has_bankid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransactionFee::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransactionFee::clear_bankid() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    bankid_->clear();
  }
  clear_has_bankid();
}
inline const ::std::string& TransactionFee::bankid() const {
  return *bankid_;
}
inline void TransactionFee::set_bankid(const ::std::string& value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void TransactionFee::set_bankid(const char* value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void TransactionFee::set_bankid(const char* value, size_t size) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransactionFee::mutable_bankid() {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  return bankid_;
}
inline ::std::string* TransactionFee::release_bankid() {
  clear_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankid_;
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransactionFee::set_allocated_bankid(::std::string* bankid) {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (bankid) {
    set_has_bankid();
    bankid_ = bankid;
  } else {
    clear_has_bankid();
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 transType = 4;
inline bool TransactionFee::has_transtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionFee::set_has_transtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransactionFee::clear_has_transtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransactionFee::clear_transtype() {
  transtype_ = 0u;
  clear_has_transtype();
}
inline ::google::protobuf::uint32 TransactionFee::transtype() const {
  return transtype_;
}
inline void TransactionFee::set_transtype(::google::protobuf::uint32 value) {
  set_has_transtype();
  transtype_ = value;
}

// optional uint32 channel = 5;
inline bool TransactionFee::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionFee::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransactionFee::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransactionFee::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TransactionFee::channel() const {
  return channel_;
}
inline void TransactionFee::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint32 ioCity = 6;
inline bool TransactionFee::has_iocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransactionFee::set_has_iocity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransactionFee::clear_has_iocity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransactionFee::clear_iocity() {
  iocity_ = 0u;
  clear_has_iocity();
}
inline ::google::protobuf::uint32 TransactionFee::iocity() const {
  return iocity_;
}
inline void TransactionFee::set_iocity(::google::protobuf::uint32 value) {
  set_has_iocity();
  iocity_ = value;
}

// -------------------------------------------------------------------

// GetTransactionFee

// -------------------------------------------------------------------

// GetTransactionFeeReply

// repeated .com.mservice.momo.msg.TransactionFee transactionFees = 1;
inline int GetTransactionFeeReply::transactionfees_size() const {
  return transactionfees_.size();
}
inline void GetTransactionFeeReply::clear_transactionfees() {
  transactionfees_.Clear();
}
inline const ::com::mservice::momo::msg::TransactionFee& GetTransactionFeeReply::transactionfees(int index) const {
  return transactionfees_.Get(index);
}
inline ::com::mservice::momo::msg::TransactionFee* GetTransactionFeeReply::mutable_transactionfees(int index) {
  return transactionfees_.Mutable(index);
}
inline ::com::mservice::momo::msg::TransactionFee* GetTransactionFeeReply::add_transactionfees() {
  return transactionfees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::TransactionFee >&
GetTransactionFeeReply::transactionfees() const {
  return transactionfees_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mservice::momo::msg::TransactionFee >*
GetTransactionFeeReply::mutable_transactionfees() {
  return &transactionfees_;
}

// -------------------------------------------------------------------

// PayAirlineTicket

// required uint32 phoneNumber = 1;
inline bool PayAirlineTicket::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayAirlineTicket::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayAirlineTicket::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayAirlineTicket::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 PayAirlineTicket::phonenumber() const {
  return phonenumber_;
}
inline void PayAirlineTicket::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string providerId = 2;
inline bool PayAirlineTicket::has_providerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayAirlineTicket::set_has_providerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayAirlineTicket::clear_has_providerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayAirlineTicket::clear_providerid() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    providerid_->clear();
  }
  clear_has_providerid();
}
inline const ::std::string& PayAirlineTicket::providerid() const {
  return *providerid_;
}
inline void PayAirlineTicket::set_providerid(const ::std::string& value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void PayAirlineTicket::set_providerid(const char* value) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(value);
}
inline void PayAirlineTicket::set_providerid(const char* value, size_t size) {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  providerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayAirlineTicket::mutable_providerid() {
  set_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    providerid_ = new ::std::string;
  }
  return providerid_;
}
inline ::std::string* PayAirlineTicket::release_providerid() {
  clear_has_providerid();
  if (providerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providerid_;
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayAirlineTicket::set_allocated_providerid(::std::string* providerid) {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (providerid) {
    set_has_providerid();
    providerid_ = providerid;
  } else {
    clear_has_providerid();
    providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billId = 3;
inline bool PayAirlineTicket::has_billid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayAirlineTicket::set_has_billid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayAirlineTicket::clear_has_billid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayAirlineTicket::clear_billid() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    billid_->clear();
  }
  clear_has_billid();
}
inline const ::std::string& PayAirlineTicket::billid() const {
  return *billid_;
}
inline void PayAirlineTicket::set_billid(const ::std::string& value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void PayAirlineTicket::set_billid(const char* value) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(value);
}
inline void PayAirlineTicket::set_billid(const char* value, size_t size) {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  billid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayAirlineTicket::mutable_billid() {
  set_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    billid_ = new ::std::string;
  }
  return billid_;
}
inline ::std::string* PayAirlineTicket::release_billid() {
  clear_has_billid();
  if (billid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billid_;
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayAirlineTicket::set_allocated_billid(::std::string* billid) {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (billid) {
    set_has_billid();
    billid_ = billid;
  } else {
    clear_has_billid();
    billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 4;
inline bool PayAirlineTicket::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayAirlineTicket::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayAirlineTicket::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayAirlineTicket::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 PayAirlineTicket::amount() const {
  return amount_;
}
inline void PayAirlineTicket::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// PayAirlineTicketReply

// optional .com.mservice.momo.msg.PayAirlineTicketReply.Result result = 1;
inline bool PayAirlineTicketReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayAirlineTicketReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayAirlineTicketReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayAirlineTicketReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::PayAirlineTicketReply_Result PayAirlineTicketReply::result() const {
  return static_cast< ::com::mservice::momo::msg::PayAirlineTicketReply_Result >(result_);
}
inline void PayAirlineTicketReply::set_result(::com::mservice::momo::msg::PayAirlineTicketReply_Result value) {
  assert(::com::mservice::momo::msg::PayAirlineTicketReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint64 transactionId = 2;
inline bool PayAirlineTicketReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayAirlineTicketReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayAirlineTicketReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayAirlineTicketReply::clear_transactionid() {
  transactionid_ = GOOGLE_ULONGLONG(0);
  clear_has_transactionid();
}
inline ::google::protobuf::uint64 PayAirlineTicketReply::transactionid() const {
  return transactionid_;
}
inline void PayAirlineTicketReply::set_transactionid(::google::protobuf::uint64 value) {
  set_has_transactionid();
  transactionid_ = value;
}

// -------------------------------------------------------------------

// WithdrawByAgent

// required uint32 phoneNumber = 1;
inline bool WithdrawByAgent::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WithdrawByAgent::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WithdrawByAgent::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WithdrawByAgent::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 WithdrawByAgent::phonenumber() const {
  return phonenumber_;
}
inline void WithdrawByAgent::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required uint32 agentPhone = 2;
inline bool WithdrawByAgent::has_agentphone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WithdrawByAgent::set_has_agentphone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WithdrawByAgent::clear_has_agentphone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WithdrawByAgent::clear_agentphone() {
  agentphone_ = 0u;
  clear_has_agentphone();
}
inline ::google::protobuf::uint32 WithdrawByAgent::agentphone() const {
  return agentphone_;
}
inline void WithdrawByAgent::set_agentphone(::google::protobuf::uint32 value) {
  set_has_agentphone();
  agentphone_ = value;
}

// required uint64 amount = 3;
inline bool WithdrawByAgent::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WithdrawByAgent::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WithdrawByAgent::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WithdrawByAgent::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 WithdrawByAgent::amount() const {
  return amount_;
}
inline void WithdrawByAgent::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional string comment = 4;
inline bool WithdrawByAgent::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WithdrawByAgent::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WithdrawByAgent::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WithdrawByAgent::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& WithdrawByAgent::comment() const {
  return *comment_;
}
inline void WithdrawByAgent::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void WithdrawByAgent::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void WithdrawByAgent::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WithdrawByAgent::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* WithdrawByAgent::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WithdrawByAgent::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WithdrawByAgentReply

// optional .com.mservice.momo.msg.WithdrawByAgentReply.Result result = 1;
inline bool WithdrawByAgentReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WithdrawByAgentReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WithdrawByAgentReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WithdrawByAgentReply::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::com::mservice::momo::msg::WithdrawByAgentReply_Result WithdrawByAgentReply::result() const {
  return static_cast< ::com::mservice::momo::msg::WithdrawByAgentReply_Result >(result_);
}
inline void WithdrawByAgentReply::set_result(::com::mservice::momo::msg::WithdrawByAgentReply_Result value) {
  assert(::com::mservice::momo::msg::WithdrawByAgentReply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string transactionId = 2;
inline bool WithdrawByAgentReply::has_transactionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WithdrawByAgentReply::set_has_transactionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WithdrawByAgentReply::clear_has_transactionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WithdrawByAgentReply::clear_transactionid() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    transactionid_->clear();
  }
  clear_has_transactionid();
}
inline const ::std::string& WithdrawByAgentReply::transactionid() const {
  return *transactionid_;
}
inline void WithdrawByAgentReply::set_transactionid(const ::std::string& value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void WithdrawByAgentReply::set_transactionid(const char* value) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(value);
}
inline void WithdrawByAgentReply::set_transactionid(const char* value, size_t size) {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  transactionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WithdrawByAgentReply::mutable_transactionid() {
  set_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    transactionid_ = new ::std::string;
  }
  return transactionid_;
}
inline ::std::string* WithdrawByAgentReply::release_transactionid() {
  clear_has_transactionid();
  if (transactionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactionid_;
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WithdrawByAgentReply::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (transactionid) {
    set_has_transactionid();
    transactionid_ = transactionid;
  } else {
    clear_has_transactionid();
    transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendSms

// required uint32 phoneNumber = 1;
inline bool SendSms::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendSms::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendSms::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendSms::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 SendSms::phonenumber() const {
  return phonenumber_;
}
inline void SendSms::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string content = 2;
inline bool SendSms::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendSms::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendSms::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendSms::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SendSms::content() const {
  return *content_;
}
inline void SendSms::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SendSms::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SendSms::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendSms::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SendSms::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendSms::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendSmsReply

// -------------------------------------------------------------------

// BankOutManual

// required uint32 phoneNumber = 1;
inline bool BankOutManual::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankOutManual::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankOutManual::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankOutManual::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 BankOutManual::phonenumber() const {
  return phonenumber_;
}
inline void BankOutManual::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// required string bankId = 2;
inline bool BankOutManual::has_bankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankOutManual::set_has_bankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankOutManual::clear_has_bankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankOutManual::clear_bankid() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    bankid_->clear();
  }
  clear_has_bankid();
}
inline const ::std::string& BankOutManual::bankid() const {
  return *bankid_;
}
inline void BankOutManual::set_bankid(const ::std::string& value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void BankOutManual::set_bankid(const char* value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
}
inline void BankOutManual::set_bankid(const char* value, size_t size) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutManual::mutable_bankid() {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    bankid_ = new ::std::string;
  }
  return bankid_;
}
inline ::std::string* BankOutManual::release_bankid() {
  clear_has_bankid();
  if (bankid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankid_;
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutManual::set_allocated_bankid(::std::string* bankid) {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (bankid) {
    set_has_bankid();
    bankid_ = bankid;
  } else {
    clear_has_bankid();
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string holderNumber = 3;
inline bool BankOutManual::has_holdernumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankOutManual::set_has_holdernumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankOutManual::clear_has_holdernumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankOutManual::clear_holdernumber() {
  if (holdernumber_ != &::google::protobuf::internal::kEmptyString) {
    holdernumber_->clear();
  }
  clear_has_holdernumber();
}
inline const ::std::string& BankOutManual::holdernumber() const {
  return *holdernumber_;
}
inline void BankOutManual::set_holdernumber(const ::std::string& value) {
  set_has_holdernumber();
  if (holdernumber_ == &::google::protobuf::internal::kEmptyString) {
    holdernumber_ = new ::std::string;
  }
  holdernumber_->assign(value);
}
inline void BankOutManual::set_holdernumber(const char* value) {
  set_has_holdernumber();
  if (holdernumber_ == &::google::protobuf::internal::kEmptyString) {
    holdernumber_ = new ::std::string;
  }
  holdernumber_->assign(value);
}
inline void BankOutManual::set_holdernumber(const char* value, size_t size) {
  set_has_holdernumber();
  if (holdernumber_ == &::google::protobuf::internal::kEmptyString) {
    holdernumber_ = new ::std::string;
  }
  holdernumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutManual::mutable_holdernumber() {
  set_has_holdernumber();
  if (holdernumber_ == &::google::protobuf::internal::kEmptyString) {
    holdernumber_ = new ::std::string;
  }
  return holdernumber_;
}
inline ::std::string* BankOutManual::release_holdernumber() {
  clear_has_holdernumber();
  if (holdernumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = holdernumber_;
    holdernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutManual::set_allocated_holdernumber(::std::string* holdernumber) {
  if (holdernumber_ != &::google::protobuf::internal::kEmptyString) {
    delete holdernumber_;
  }
  if (holdernumber) {
    set_has_holdernumber();
    holdernumber_ = holdernumber;
  } else {
    clear_has_holdernumber();
    holdernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 amount = 4;
inline bool BankOutManual::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankOutManual::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankOutManual::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankOutManual::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 BankOutManual::amount() const {
  return amount_;
}
inline void BankOutManual::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// required string holderName = 5;
inline bool BankOutManual::has_holdername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BankOutManual::set_has_holdername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BankOutManual::clear_has_holdername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BankOutManual::clear_holdername() {
  if (holdername_ != &::google::protobuf::internal::kEmptyString) {
    holdername_->clear();
  }
  clear_has_holdername();
}
inline const ::std::string& BankOutManual::holdername() const {
  return *holdername_;
}
inline void BankOutManual::set_holdername(const ::std::string& value) {
  set_has_holdername();
  if (holdername_ == &::google::protobuf::internal::kEmptyString) {
    holdername_ = new ::std::string;
  }
  holdername_->assign(value);
}
inline void BankOutManual::set_holdername(const char* value) {
  set_has_holdername();
  if (holdername_ == &::google::protobuf::internal::kEmptyString) {
    holdername_ = new ::std::string;
  }
  holdername_->assign(value);
}
inline void BankOutManual::set_holdername(const char* value, size_t size) {
  set_has_holdername();
  if (holdername_ == &::google::protobuf::internal::kEmptyString) {
    holdername_ = new ::std::string;
  }
  holdername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutManual::mutable_holdername() {
  set_has_holdername();
  if (holdername_ == &::google::protobuf::internal::kEmptyString) {
    holdername_ = new ::std::string;
  }
  return holdername_;
}
inline ::std::string* BankOutManual::release_holdername() {
  clear_has_holdername();
  if (holdername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = holdername_;
    holdername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutManual::set_allocated_holdername(::std::string* holdername) {
  if (holdername_ != &::google::protobuf::internal::kEmptyString) {
    delete holdername_;
  }
  if (holdername) {
    set_has_holdername();
    holdername_ = holdername;
  } else {
    clear_has_holdername();
    holdername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string bankName = 6;
inline bool BankOutManual::has_bankname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BankOutManual::set_has_bankname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BankOutManual::clear_has_bankname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BankOutManual::clear_bankname() {
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    bankname_->clear();
  }
  clear_has_bankname();
}
inline const ::std::string& BankOutManual::bankname() const {
  return *bankname_;
}
inline void BankOutManual::set_bankname(const ::std::string& value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
}
inline void BankOutManual::set_bankname(const char* value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
}
inline void BankOutManual::set_bankname(const char* value, size_t size) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutManual::mutable_bankname() {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    bankname_ = new ::std::string;
  }
  return bankname_;
}
inline ::std::string* BankOutManual::release_bankname() {
  clear_has_bankname();
  if (bankname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankname_;
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutManual::set_allocated_bankname(::std::string* bankname) {
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankname_;
  }
  if (bankname) {
    set_has_bankname();
    bankname_ = bankname;
  } else {
    clear_has_bankname();
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string comment = 7;
inline bool BankOutManual::has_comment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BankOutManual::set_has_comment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BankOutManual::clear_has_comment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BankOutManual::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& BankOutManual::comment() const {
  return *comment_;
}
inline void BankOutManual::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void BankOutManual::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void BankOutManual::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutManual::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* BankOutManual::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutManual::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 inOutCity = 8;
inline bool BankOutManual::has_inoutcity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BankOutManual::set_has_inoutcity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BankOutManual::clear_has_inoutcity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BankOutManual::clear_inoutcity() {
  inoutcity_ = 0;
  clear_has_inoutcity();
}
inline ::google::protobuf::int32 BankOutManual::inoutcity() const {
  return inoutcity_;
}
inline void BankOutManual::set_inoutcity(::google::protobuf::int32 value) {
  set_has_inoutcity();
  inoutcity_ = value;
}

// optional string bankBranch = 9;
inline bool BankOutManual::has_bankbranch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BankOutManual::set_has_bankbranch() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BankOutManual::clear_has_bankbranch() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BankOutManual::clear_bankbranch() {
  if (bankbranch_ != &::google::protobuf::internal::kEmptyString) {
    bankbranch_->clear();
  }
  clear_has_bankbranch();
}
inline const ::std::string& BankOutManual::bankbranch() const {
  return *bankbranch_;
}
inline void BankOutManual::set_bankbranch(const ::std::string& value) {
  set_has_bankbranch();
  if (bankbranch_ == &::google::protobuf::internal::kEmptyString) {
    bankbranch_ = new ::std::string;
  }
  bankbranch_->assign(value);
}
inline void BankOutManual::set_bankbranch(const char* value) {
  set_has_bankbranch();
  if (bankbranch_ == &::google::protobuf::internal::kEmptyString) {
    bankbranch_ = new ::std::string;
  }
  bankbranch_->assign(value);
}
inline void BankOutManual::set_bankbranch(const char* value, size_t size) {
  set_has_bankbranch();
  if (bankbranch_ == &::google::protobuf::internal::kEmptyString) {
    bankbranch_ = new ::std::string;
  }
  bankbranch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BankOutManual::mutable_bankbranch() {
  set_has_bankbranch();
  if (bankbranch_ == &::google::protobuf::internal::kEmptyString) {
    bankbranch_ = new ::std::string;
  }
  return bankbranch_;
}
inline ::std::string* BankOutManual::release_bankbranch() {
  clear_has_bankbranch();
  if (bankbranch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankbranch_;
    bankbranch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BankOutManual::set_allocated_bankbranch(::std::string* bankbranch) {
  if (bankbranch_ != &::google::protobuf::internal::kEmptyString) {
    delete bankbranch_;
  }
  if (bankbranch) {
    set_has_bankbranch();
    bankbranch_ = bankbranch;
  } else {
    clear_has_bankbranch();
    bankbranch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BankOutManualReply

// required uint32 error = 1;
inline bool BankOutManualReply::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankOutManualReply::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankOutManualReply::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankOutManualReply::clear_error() {
  error_ = 0u;
  clear_has_error();
}
inline ::google::protobuf::uint32 BankOutManualReply::error() const {
  return error_;
}
inline void BankOutManualReply::set_error(::google::protobuf::uint32 value) {
  set_has_error();
  error_ = value;
}

// required uint64 tranId = 2;
inline bool BankOutManualReply::has_tranid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankOutManualReply::set_has_tranid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankOutManualReply::clear_has_tranid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankOutManualReply::clear_tranid() {
  tranid_ = GOOGLE_ULONGLONG(0);
  clear_has_tranid();
}
inline ::google::protobuf::uint64 BankOutManualReply::tranid() const {
  return tranid_;
}
inline void BankOutManualReply::set_tranid(::google::protobuf::uint64 value) {
  set_has_tranid();
  tranid_ = value;
}

// -------------------------------------------------------------------

// IsMomoer

// required uint32 phoneNumber = 1;
inline bool IsMomoer::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsMomoer::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsMomoer::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsMomoer::clear_phonenumber() {
  phonenumber_ = 0u;
  clear_has_phonenumber();
}
inline ::google::protobuf::uint32 IsMomoer::phonenumber() const {
  return phonenumber_;
}
inline void IsMomoer::set_phonenumber(::google::protobuf::uint32 value) {
  set_has_phonenumber();
  phonenumber_ = value;
}

// -------------------------------------------------------------------

// IsMomoerReply

// required bool isMomoer = 1;
inline bool IsMomoerReply::has_ismomoer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsMomoerReply::set_has_ismomoer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsMomoerReply::clear_has_ismomoer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsMomoerReply::clear_ismomoer() {
  ismomoer_ = false;
  clear_has_ismomoer();
}
inline bool IsMomoerReply::ismomoer() const {
  return ismomoer_;
}
inline void IsMomoerReply::set_ismomoer(bool value) {
  set_has_ismomoer();
  ismomoer_ = value;
}

// -------------------------------------------------------------------

// CountAgentTran

// required uint32 phone = 1;
inline bool CountAgentTran::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountAgentTran::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountAgentTran::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountAgentTran::clear_phone() {
  phone_ = 0u;
  clear_has_phone();
}
inline ::google::protobuf::uint32 CountAgentTran::phone() const {
  return phone_;
}
inline void CountAgentTran::set_phone(::google::protobuf::uint32 value) {
  set_has_phone();
  phone_ = value;
}

// -------------------------------------------------------------------

// CountAgentTranReply

// required uint64 counter = 1;
inline bool CountAgentTranReply::has_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountAgentTranReply::set_has_counter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountAgentTranReply::clear_has_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountAgentTranReply::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
inline ::google::protobuf::uint64 CountAgentTranReply::counter() const {
  return counter_;
}
inline void CountAgentTranReply::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
}

// -------------------------------------------------------------------

// GetServiceLayout

// -------------------------------------------------------------------

// GetServicelayoutReply

// -------------------------------------------------------------------

// CompeleteTran

// required int32 tranType = 1;
inline bool CompeleteTran::has_trantype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompeleteTran::set_has_trantype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompeleteTran::clear_has_trantype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompeleteTran::clear_trantype() {
  trantype_ = 0;
  clear_has_trantype();
}
inline ::google::protobuf::int32 CompeleteTran::trantype() const {
  return trantype_;
}
inline void CompeleteTran::set_trantype(::google::protobuf::int32 value) {
  set_has_trantype();
  trantype_ = value;
}

// required string otp = 2;
inline bool CompeleteTran::has_otp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompeleteTran::set_has_otp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompeleteTran::clear_has_otp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompeleteTran::clear_otp() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    otp_->clear();
  }
  clear_has_otp();
}
inline const ::std::string& CompeleteTran::otp() const {
  return *otp_;
}
inline void CompeleteTran::set_otp(const ::std::string& value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void CompeleteTran::set_otp(const char* value) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(value);
}
inline void CompeleteTran::set_otp(const char* value, size_t size) {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  otp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompeleteTran::mutable_otp() {
  set_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    otp_ = new ::std::string;
  }
  return otp_;
}
inline ::std::string* CompeleteTran::release_otp() {
  clear_has_otp();
  if (otp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otp_;
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CompeleteTran::set_allocated_otp(::std::string* otp) {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (otp) {
    set_has_otp();
    otp_ = otp;
  } else {
    clear_has_otp();
    otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MakeTranReply

// required int32 error = 1;
inline bool MakeTranReply::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MakeTranReply::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MakeTranReply::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MakeTranReply::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 MakeTranReply::error() const {
  return error_;
}
inline void MakeTranReply::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace momo
}  // namespace mservice
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::VerifyOtpReply_ResultCode>() {
  return ::com::mservice::momo::msg::VerifyOtpReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::RegisterReply_ResultCode>() {
  return ::com::mservice::momo::msg::RegisterReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::IsPinCorrectReply_ResultCode>() {
  return ::com::mservice::momo::msg::IsPinCorrectReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::ChangePinReply_ResultCode>() {
  return ::com::mservice::momo::msg::ChangePinReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode>() {
  return ::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::ModifyArticle_Command>() {
  return ::com::mservice::momo::msg::ModifyArticle_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::ModifyArticleReply_ResultCode>() {
  return ::com::mservice::momo::msg::ModifyArticleReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::ModifyBankAccount_Command>() {
  return ::com::mservice::momo::msg::ModifyBankAccount_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode>() {
  return ::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::TopupReply_Result>() {
  return ::com::mservice::momo::msg::TopupReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::TopupGameReply_TopupGameResult>() {
  return ::com::mservice::momo::msg::TopupGameReply_TopupGameResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::TransferM2mReply_Result>() {
  return ::com::mservice::momo::msg::TransferM2mReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::TransferM2cReply_Result>() {
  return ::com::mservice::momo::msg::TransferM2cReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result>() {
  return ::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::GetBillInfoReply_Result>() {
  return ::com::mservice::momo::msg::GetBillInfoReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::PayBillReply_Result>() {
  return ::com::mservice::momo::msg::PayBillReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::SaveBillReply_Result>() {
  return ::com::mservice::momo::msg::SaveBillReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::RemoveSavedBillReply_Result>() {
  return ::com::mservice::momo::msg::RemoveSavedBillReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::BankInReply_Result>() {
  return ::com::mservice::momo::msg::BankInReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::BankOutReply_Result>() {
  return ::com::mservice::momo::msg::BankOutReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::BanknetToMomoReply_Result>() {
  return ::com::mservice::momo::msg::BanknetToMomoReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::KeyValueData_CommandType>() {
  return ::com::mservice::momo::msg::KeyValueData_CommandType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::KeyValueDataReply_Result>() {
  return ::com::mservice::momo::msg::KeyValueDataReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::Pay123MuaOrderReply_Result>() {
  return ::com::mservice::momo::msg::Pay123MuaOrderReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::PayAirlineTicketReply_Result>() {
  return ::com::mservice::momo::msg::PayAirlineTicketReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::WithdrawByAgentReply_Result>() {
  return ::com::mservice::momo::msg::WithdrawByAgentReply_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::CommandType>() {
  return ::com::mservice::momo::msg::CommandType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::MoneyResource>() {
  return ::com::mservice::momo::msg::MoneyResource_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::TransactionStatus>() {
  return ::com::mservice::momo::msg::TransactionStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mservice::momo::msg::TransactionType>() {
  return ::com::mservice::momo::msg::TransactionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CmdModels_2eproto__INCLUDED
