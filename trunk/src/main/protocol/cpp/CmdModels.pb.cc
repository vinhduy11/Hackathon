// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mservice {
namespace momo {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendOtp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendOtp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendOtpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendOtpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyOtp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyOtp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyOtpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyOtpReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VerifyOtpReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetAgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsPinCorrect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsPinCorrect_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsPinCorrectReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsPinCorrectReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IsPinCorrectReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangePin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePinReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePinReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangePinReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpdateAgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateAgentInfoReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Article_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Article_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyArticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyArticle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyArticle_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModifyArticleReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyArticleReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyArticleReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetArticlePage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetArticlePage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetArticlePageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetArticlePageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBankAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBankAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyBankAccount_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModifyBankAccountReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBankAccountReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyBankAccountReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetAgentBankAccounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAgentBankAccounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAgentBankAccountsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAgentBankAccountsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTransactionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTransactionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTransactionDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTransactionDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTransactionDetailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTransactionDetailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topup_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopupReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TopupReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TopupGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopupGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopupGameReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopupGameReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TopupGameReply_TopupGameResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransferM2m_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferM2m_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferM2mReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferM2mReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransferM2mReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransferM2c_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferM2c_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferM2cReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferM2cReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransferM2cReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DepositWithdrawAtPlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepositWithdrawAtPlace_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepositWithdrawAtPlaceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepositWithdrawAtPlaceReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DepositWithdrawAtPlaceReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BillDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBillInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBillInfoReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetBillInfoReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PayBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayBillReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayBillReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PayBillReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Bill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveBillReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveBillReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SaveBillReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetSavedBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSavedBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSavedBillReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSavedBillReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSavedBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSavedBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSavedBillReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSavedBillReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RemoveSavedBillReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BankIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankInReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankInReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BankInReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BankOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankOutReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankOutReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BankOutReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BanknetToMomo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanknetToMomo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanknetToMomoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanknetToMomoReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BanknetToMomoReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VerifyBanknetOtp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyBanknetOtp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyBanknetOtpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyBanknetOtpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreAround_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreAround_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreAroundReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreAroundReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreByCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreByCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreByCodeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreByCodeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValueData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyValueData_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KeyValueDataReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueDataReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyValueDataReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetAvatarUploadToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAvatarUploadToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAvatarUploadTokenReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAvatarUploadTokenReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pay123MuaOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pay123MuaOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pay123MuaOrderReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pay123MuaOrderReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Pay123MuaOrderReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransactionFee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionFee_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTransactionFee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTransactionFee_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTransactionFeeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTransactionFeeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayAirlineTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayAirlineTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayAirlineTicketReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayAirlineTicketReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PayAirlineTicketReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WithdrawByAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithdrawByAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* WithdrawByAgentReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithdrawByAgentReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WithdrawByAgentReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SendSms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSms_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSmsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSmsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankOutManual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankOutManual_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankOutManualReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankOutManualReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsMomoer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsMomoer_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsMomoerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsMomoerReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountAgentTran_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountAgentTran_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountAgentTranReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountAgentTranReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServicelayoutReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServicelayoutReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompeleteTran_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompeleteTran_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeTranReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeTranReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MoneyResource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransactionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdModels_2eproto() {
  protobuf_AddDesc_CmdModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdModels.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, description_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  SendOtp_descriptor_ = file->message_type(1);
  static const int SendOtp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtp, phonenumber_),
  };
  SendOtp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendOtp_descriptor_,
      SendOtp::default_instance_,
      SendOtp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendOtp));
  SendOtpReply_descriptor_ = file->message_type(2);
  static const int SendOtpReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtpReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtpReply, otp_),
  };
  SendOtpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendOtpReply_descriptor_,
      SendOtpReply::default_instance_,
      SendOtpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendOtpReply));
  VerifyOtp_descriptor_ = file->message_type(3);
  static const int VerifyOtp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtp, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtp, otp_),
  };
  VerifyOtp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyOtp_descriptor_,
      VerifyOtp::default_instance_,
      VerifyOtp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyOtp));
  VerifyOtpReply_descriptor_ = file->message_type(4);
  static const int VerifyOtpReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtpReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtpReply, result_),
  };
  VerifyOtpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyOtpReply_descriptor_,
      VerifyOtpReply::default_instance_,
      VerifyOtpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyOtpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyOtpReply));
  VerifyOtpReply_ResultCode_descriptor_ = VerifyOtpReply_descriptor_->enum_type(0);
  Register_descriptor_ = file->message_type(5);
  static const int Register_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, answer_),
  };
  Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register));
  RegisterReply_descriptor_ = file->message_type(6);
  static const int RegisterReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, result_),
  };
  RegisterReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterReply_descriptor_,
      RegisterReply::default_instance_,
      RegisterReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterReply));
  RegisterReply_ResultCode_descriptor_ = RegisterReply_descriptor_->enum_type(0);
  GetAgentInfo_descriptor_ = file->message_type(7);
  static const int GetAgentInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfo, phonenumber_),
  };
  GetAgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAgentInfo_descriptor_,
      GetAgentInfo::default_instance_,
      GetAgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAgentInfo));
  GetAgentInfoReply_descriptor_ = file->message_type(8);
  static const int GetAgentInfoReply_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, bankaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, bankcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, bankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, momo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, mload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, isnamedaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, createddate_),
  };
  GetAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAgentInfoReply_descriptor_,
      GetAgentInfoReply::default_instance_,
      GetAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAgentInfoReply));
  IsPinCorrect_descriptor_ = file->message_type(9);
  static const int IsPinCorrect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrect, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrect, pin_),
  };
  IsPinCorrect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsPinCorrect_descriptor_,
      IsPinCorrect::default_instance_,
      IsPinCorrect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsPinCorrect));
  IsPinCorrectReply_descriptor_ = file->message_type(10);
  static const int IsPinCorrectReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrectReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrectReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrectReply, locktill_),
  };
  IsPinCorrectReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsPinCorrectReply_descriptor_,
      IsPinCorrectReply::default_instance_,
      IsPinCorrectReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrectReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPinCorrectReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsPinCorrectReply));
  IsPinCorrectReply_ResultCode_descriptor_ = IsPinCorrectReply_descriptor_->enum_type(0);
  ChangePin_descriptor_ = file->message_type(11);
  static const int ChangePin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, oldpin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, newpin_),
  };
  ChangePin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePin_descriptor_,
      ChangePin::default_instance_,
      ChangePin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePin));
  ChangePinReply_descriptor_ = file->message_type(12);
  static const int ChangePinReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePinReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePinReply, result_),
  };
  ChangePinReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePinReply_descriptor_,
      ChangePinReply::default_instance_,
      ChangePinReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePinReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePinReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePinReply));
  ChangePinReply_ResultCode_descriptor_ = ChangePinReply_descriptor_->enum_type(0);
  UpdateAgentInfo_descriptor_ = file->message_type(13);
  static const int UpdateAgentInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, dob_),
  };
  UpdateAgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAgentInfo_descriptor_,
      UpdateAgentInfo::default_instance_,
      UpdateAgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAgentInfo));
  UpdateAgentInfoReply_descriptor_ = file->message_type(14);
  static const int UpdateAgentInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfoReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfoReply, result_),
  };
  UpdateAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAgentInfoReply_descriptor_,
      UpdateAgentInfoReply::default_instance_,
      UpdateAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAgentInfoReply));
  UpdateAgentInfoReply_ResultCode_descriptor_ = UpdateAgentInfoReply_descriptor_->enum_type(0);
  Article_descriptor_ = file->message_type(15);
  static const int Article_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, postdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, detail_),
  };
  Article_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Article_descriptor_,
      Article::default_instance_,
      Article_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Article));
  ModifyArticle_descriptor_ = file->message_type(16);
  static const int ModifyArticle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticle, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticle, article_),
  };
  ModifyArticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyArticle_descriptor_,
      ModifyArticle::default_instance_,
      ModifyArticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyArticle));
  ModifyArticle_Command_descriptor_ = ModifyArticle_descriptor_->enum_type(0);
  ModifyArticleReply_descriptor_ = file->message_type(17);
  static const int ModifyArticleReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticleReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticleReply, article_),
  };
  ModifyArticleReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyArticleReply_descriptor_,
      ModifyArticleReply::default_instance_,
      ModifyArticleReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticleReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyArticleReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyArticleReply));
  ModifyArticleReply_ResultCode_descriptor_ = ModifyArticleReply_descriptor_->enum_type(0);
  GetArticlePage_descriptor_ = file->message_type(18);
  static const int GetArticlePage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePage, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePage, pagenumber_),
  };
  GetArticlePage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetArticlePage_descriptor_,
      GetArticlePage::default_instance_,
      GetArticlePage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetArticlePage));
  GetArticlePageReply_descriptor_ = file->message_type(19);
  static const int GetArticlePageReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePageReply, pagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePageReply, articles_),
  };
  GetArticlePageReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetArticlePageReply_descriptor_,
      GetArticlePageReply::default_instance_,
      GetArticlePageReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePageReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArticlePageReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetArticlePageReply));
  BankAccount_descriptor_ = file->message_type(20);
  static const int BankAccount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, bankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, createddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, bankid_),
  };
  BankAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankAccount_descriptor_,
      BankAccount::default_instance_,
      BankAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankAccount));
  ModifyBankAccount_descriptor_ = file->message_type(21);
  static const int ModifyBankAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccount, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccount, account_),
  };
  ModifyBankAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBankAccount_descriptor_,
      ModifyBankAccount::default_instance_,
      ModifyBankAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBankAccount));
  ModifyBankAccount_Command_descriptor_ = ModifyBankAccount_descriptor_->enum_type(0);
  ModifyBankAccountReply_descriptor_ = file->message_type(22);
  static const int ModifyBankAccountReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccountReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccountReply, bankaccount_),
  };
  ModifyBankAccountReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBankAccountReply_descriptor_,
      ModifyBankAccountReply::default_instance_,
      ModifyBankAccountReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccountReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBankAccountReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBankAccountReply));
  ModifyBankAccountReply_ResultCode_descriptor_ = ModifyBankAccountReply_descriptor_->enum_type(0);
  GetAgentBankAccounts_descriptor_ = file->message_type(23);
  static const int GetAgentBankAccounts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentBankAccounts, phonenumber_),
  };
  GetAgentBankAccounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAgentBankAccounts_descriptor_,
      GetAgentBankAccounts::default_instance_,
      GetAgentBankAccounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentBankAccounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentBankAccounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAgentBankAccounts));
  GetAgentBankAccountsReply_descriptor_ = file->message_type(24);
  static const int GetAgentBankAccountsReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentBankAccountsReply, accounts_),
  };
  GetAgentBankAccountsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAgentBankAccountsReply_descriptor_,
      GetAgentBankAccountsReply::default_instance_,
      GetAgentBankAccountsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentBankAccountsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAgentBankAccountsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAgentBankAccountsReply));
  Transaction_descriptor_ = file->message_type(25);
  static const int Transaction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, partnername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, partnerid_),
  };
  Transaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transaction));
  GetTransaction_descriptor_ = file->message_type(26);
  static const int GetTransaction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, pagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, type_),
  };
  GetTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTransaction_descriptor_,
      GetTransaction::default_instance_,
      GetTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTransaction));
  GetTransactionReply_descriptor_ = file->message_type(27);
  static const int GetTransactionReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionReply, pagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionReply, transactions_),
  };
  GetTransactionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTransactionReply_descriptor_,
      GetTransactionReply::default_instance_,
      GetTransactionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTransactionReply));
  GetTransactionDetail_descriptor_ = file->message_type(28);
  static const int GetTransactionDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetail, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetail, transactionid_),
  };
  GetTransactionDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTransactionDetail_descriptor_,
      GetTransactionDetail::default_instance_,
      GetTransactionDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTransactionDetail));
  GetTransactionDetailReply_descriptor_ = file->message_type(29);
  static const int GetTransactionDetailReply_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, partnercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, partnername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, partnerpref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, errorcode_),
  };
  GetTransactionDetailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTransactionDetailReply_descriptor_,
      GetTransactionDetailReply::default_instance_,
      GetTransactionDetailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionDetailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTransactionDetailReply));
  Topup_descriptor_ = file->message_type(30);
  static const int Topup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topup, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topup, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topup, topupphonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topup, amount_),
  };
  Topup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Topup_descriptor_,
      Topup::default_instance_,
      Topup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Topup));
  TopupReply_descriptor_ = file->message_type(31);
  static const int TopupReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupReply, transactionid_),
  };
  TopupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopupReply_descriptor_,
      TopupReply::default_instance_,
      TopupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopupReply));
  TopupReply_Result_descriptor_ = TopupReply_descriptor_->enum_type(0);
  TopupGame_descriptor_ = file->message_type(32);
  static const int TopupGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, gameaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, amount_),
  };
  TopupGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopupGame_descriptor_,
      TopupGame::default_instance_,
      TopupGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopupGame));
  TopupGameReply_descriptor_ = file->message_type(33);
  static const int TopupGameReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGameReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGameReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGameReply, transactionid_),
  };
  TopupGameReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopupGameReply_descriptor_,
      TopupGameReply::default_instance_,
      TopupGameReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGameReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopupGameReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopupGameReply));
  TopupGameReply_TopupGameResult_descriptor_ = TopupGameReply_descriptor_->enum_type(0);
  TransferM2m_descriptor_ = file->message_type(34);
  static const int TransferM2m_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, receiverphonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, comment_),
  };
  TransferM2m_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferM2m_descriptor_,
      TransferM2m::default_instance_,
      TransferM2m_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2m, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferM2m));
  TransferM2mReply_descriptor_ = file->message_type(35);
  static const int TransferM2mReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2mReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2mReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2mReply, transactionid_),
  };
  TransferM2mReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferM2mReply_descriptor_,
      TransferM2mReply::default_instance_,
      TransferM2mReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2mReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2mReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferM2mReply));
  TransferM2mReply_Result_descriptor_ = TransferM2mReply_descriptor_->enum_type(0);
  TransferM2c_descriptor_ = file->message_type(36);
  static const int TransferM2c_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, receivername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, receivercardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, receiverphonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, comment_),
  };
  TransferM2c_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferM2c_descriptor_,
      TransferM2c::default_instance_,
      TransferM2c_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2c, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferM2c));
  TransferM2cReply_descriptor_ = file->message_type(37);
  static const int TransferM2cReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2cReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2cReply, result_),
  };
  TransferM2cReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferM2cReply_descriptor_,
      TransferM2cReply::default_instance_,
      TransferM2cReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2cReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferM2cReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferM2cReply));
  TransferM2cReply_Result_descriptor_ = TransferM2cReply_descriptor_->enum_type(0);
  DepositWithdrawAtPlace_descriptor_ = file->message_type(38);
  static const int DepositWithdrawAtPlace_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, inout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, matinh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, mahuyen_),
  };
  DepositWithdrawAtPlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepositWithdrawAtPlace_descriptor_,
      DepositWithdrawAtPlace::default_instance_,
      DepositWithdrawAtPlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepositWithdrawAtPlace));
  DepositWithdrawAtPlaceReply_descriptor_ = file->message_type(39);
  static const int DepositWithdrawAtPlaceReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlaceReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlaceReply, result_),
  };
  DepositWithdrawAtPlaceReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepositWithdrawAtPlaceReply_descriptor_,
      DepositWithdrawAtPlaceReply::default_instance_,
      DepositWithdrawAtPlaceReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlaceReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositWithdrawAtPlaceReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepositWithdrawAtPlaceReply));
  DepositWithdrawAtPlaceReply_Result_descriptor_ = DepositWithdrawAtPlaceReply_descriptor_->enum_type(0);
  BillDetail_descriptor_ = file->message_type(40);
  static const int BillDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, providerid_),
  };
  BillDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillDetail_descriptor_,
      BillDetail::default_instance_,
      BillDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillDetail));
  GetBillInfo_descriptor_ = file->message_type(41);
  static const int GetBillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, billid_),
  };
  GetBillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBillInfo_descriptor_,
      GetBillInfo::default_instance_,
      GetBillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBillInfo));
  GetBillInfoReply_descriptor_ = file->message_type(42);
  static const int GetBillInfoReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, billdetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, agentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, agentphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, agentaddress_),
  };
  GetBillInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBillInfoReply_descriptor_,
      GetBillInfoReply::default_instance_,
      GetBillInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBillInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBillInfoReply));
  GetBillInfoReply_Result_descriptor_ = GetBillInfoReply_descriptor_->enum_type(0);
  PayBill_descriptor_ = file->message_type(43);
  static const int PayBill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, fromsource_),
  };
  PayBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayBill_descriptor_,
      PayBill::default_instance_,
      PayBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayBill));
  PayBillReply_descriptor_ = file->message_type(44);
  static const int PayBillReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBillReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBillReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBillReply, transactionid_),
  };
  PayBillReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayBillReply_descriptor_,
      PayBillReply::default_instance_,
      PayBillReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBillReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayBillReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayBillReply));
  PayBillReply_Result_descriptor_ = PayBillReply_descriptor_->enum_type(0);
  Bill_descriptor_ = file->message_type(45);
  static const int Bill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bill, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bill, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bill, billid_),
  };
  Bill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bill_descriptor_,
      Bill::default_instance_,
      Bill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bill));
  SaveBill_descriptor_ = file->message_type(46);
  static const int SaveBill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBill, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBill, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBill, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBill, billid_),
  };
  SaveBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveBill_descriptor_,
      SaveBill::default_instance_,
      SaveBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveBill));
  SaveBillReply_descriptor_ = file->message_type(47);
  static const int SaveBillReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBillReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBillReply, result_),
  };
  SaveBillReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveBillReply_descriptor_,
      SaveBillReply::default_instance_,
      SaveBillReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBillReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBillReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveBillReply));
  SaveBillReply_Result_descriptor_ = SaveBillReply_descriptor_->enum_type(0);
  GetSavedBill_descriptor_ = file->message_type(48);
  static const int GetSavedBill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBill, phonenumber_),
  };
  GetSavedBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSavedBill_descriptor_,
      GetSavedBill::default_instance_,
      GetSavedBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSavedBill));
  GetSavedBillReply_descriptor_ = file->message_type(49);
  static const int GetSavedBillReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBillReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBillReply, billdetails_),
  };
  GetSavedBillReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSavedBillReply_descriptor_,
      GetSavedBillReply::default_instance_,
      GetSavedBillReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBillReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSavedBillReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSavedBillReply));
  RemoveSavedBill_descriptor_ = file->message_type(50);
  static const int RemoveSavedBill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBill, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBill, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBill, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBill, billid_),
  };
  RemoveSavedBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSavedBill_descriptor_,
      RemoveSavedBill::default_instance_,
      RemoveSavedBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSavedBill));
  RemoveSavedBillReply_descriptor_ = file->message_type(51);
  static const int RemoveSavedBillReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBillReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBillReply, result_),
  };
  RemoveSavedBillReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSavedBillReply_descriptor_,
      RemoveSavedBillReply::default_instance_,
      RemoveSavedBillReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBillReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSavedBillReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSavedBillReply));
  RemoveSavedBillReply_Result_descriptor_ = RemoveSavedBillReply_descriptor_->enum_type(0);
  BankIn_descriptor_ = file->message_type(52);
  static const int BankIn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, bankcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, amount_),
  };
  BankIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankIn_descriptor_,
      BankIn::default_instance_,
      BankIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankIn));
  BankInReply_descriptor_ = file->message_type(53);
  static const int BankInReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInReply, transactionid_),
  };
  BankInReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankInReply_descriptor_,
      BankInReply::default_instance_,
      BankInReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankInReply));
  BankInReply_Result_descriptor_ = BankInReply_descriptor_->enum_type(0);
  BankOut_descriptor_ = file->message_type(54);
  static const int BankOut_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, bankcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, amount_),
  };
  BankOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankOut_descriptor_,
      BankOut::default_instance_,
      BankOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankOut));
  BankOutReply_descriptor_ = file->message_type(55);
  static const int BankOutReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutReply, transactionid_),
  };
  BankOutReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankOutReply_descriptor_,
      BankOutReply::default_instance_,
      BankOutReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankOutReply));
  BankOutReply_Result_descriptor_ = BankOutReply_descriptor_->enum_type(0);
  BanknetToMomo_descriptor_ = file->message_type(56);
  static const int BanknetToMomo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, bankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, cardholdername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, cardholdernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, cardholdermonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, cardholderyear_),
  };
  BanknetToMomo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BanknetToMomo_descriptor_,
      BanknetToMomo::default_instance_,
      BanknetToMomo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BanknetToMomo));
  BanknetToMomoReply_descriptor_ = file->message_type(57);
  static const int BanknetToMomoReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, transactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, merchanttransactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, banketerror_),
  };
  BanknetToMomoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BanknetToMomoReply_descriptor_,
      BanknetToMomoReply::default_instance_,
      BanknetToMomoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanknetToMomoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BanknetToMomoReply));
  BanknetToMomoReply_Result_descriptor_ = BanknetToMomoReply_descriptor_->enum_type(0);
  VerifyBanknetOtp_descriptor_ = file->message_type(58);
  static const int VerifyBanknetOtp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, transactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, merchanttransactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, bankid_),
  };
  VerifyBanknetOtp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyBanknetOtp_descriptor_,
      VerifyBanknetOtp::default_instance_,
      VerifyBanknetOtp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyBanknetOtp));
  VerifyBanknetOtpReply_descriptor_ = file->message_type(59);
  static const int VerifyBanknetOtpReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtpReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtpReply, result_),
  };
  VerifyBanknetOtpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyBanknetOtpReply_descriptor_,
      VerifyBanknetOtpReply::default_instance_,
      VerifyBanknetOtpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyBanknetOtpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyBanknetOtpReply));
  Location_descriptor_ = file->message_type(60);
  static const int Location_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, latitude_),
  };
  Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location));
  StoreInfo_descriptor_ = file->message_type(61);
  static const int StoreInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, ownerphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, districtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, wardname_),
  };
  StoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreInfo_descriptor_,
      StoreInfo::default_instance_,
      StoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreInfo));
  GetStoreAround_descriptor_ = file->message_type(62);
  static const int GetStoreAround_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, districtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, limit_),
  };
  GetStoreAround_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreAround_descriptor_,
      GetStoreAround::default_instance_,
      GetStoreAround_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAround, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreAround));
  GetStoreAroundReply_descriptor_ = file->message_type(63);
  static const int GetStoreAroundReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAroundReply, stores_),
  };
  GetStoreAroundReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreAroundReply_descriptor_,
      GetStoreAroundReply::default_instance_,
      GetStoreAroundReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAroundReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreAroundReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreAroundReply));
  GetStoreByCode_descriptor_ = file->message_type(64);
  static const int GetStoreByCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCode, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCode, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCode, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCode, pagenum_),
  };
  GetStoreByCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreByCode_descriptor_,
      GetStoreByCode::default_instance_,
      GetStoreByCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreByCode));
  GetStoreByCodeReply_descriptor_ = file->message_type(65);
  static const int GetStoreByCodeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCodeReply, pagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCodeReply, stores_),
  };
  GetStoreByCodeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreByCodeReply_descriptor_,
      GetStoreByCodeReply::default_instance_,
      GetStoreByCodeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCodeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreByCodeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreByCodeReply));
  KeyValueData_descriptor_ = file->message_type(66);
  static const int KeyValueData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueData, commandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueData, value_),
  };
  KeyValueData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueData_descriptor_,
      KeyValueData::default_instance_,
      KeyValueData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueData));
  KeyValueData_CommandType_descriptor_ = KeyValueData_descriptor_->enum_type(0);
  KeyValueDataReply_descriptor_ = file->message_type(67);
  static const int KeyValueDataReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueDataReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueDataReply, value_),
  };
  KeyValueDataReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueDataReply_descriptor_,
      KeyValueDataReply::default_instance_,
      KeyValueDataReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueDataReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueDataReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueDataReply));
  KeyValueDataReply_Result_descriptor_ = KeyValueDataReply_descriptor_->enum_type(0);
  GetAvatarUploadToken_descriptor_ = file->message_type(68);
  static const int GetAvatarUploadToken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadToken, phonenumber_),
  };
  GetAvatarUploadToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAvatarUploadToken_descriptor_,
      GetAvatarUploadToken::default_instance_,
      GetAvatarUploadToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAvatarUploadToken));
  GetAvatarUploadTokenReply_descriptor_ = file->message_type(69);
  static const int GetAvatarUploadTokenReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadTokenReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadTokenReply, token_),
  };
  GetAvatarUploadTokenReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAvatarUploadTokenReply_descriptor_,
      GetAvatarUploadTokenReply::default_instance_,
      GetAvatarUploadTokenReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadTokenReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvatarUploadTokenReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAvatarUploadTokenReply));
  Pay123MuaOrder_descriptor_ = file->message_type(70);
  static const int Pay123MuaOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, receiverphonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, orderid_),
  };
  Pay123MuaOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pay123MuaOrder_descriptor_,
      Pay123MuaOrder::default_instance_,
      Pay123MuaOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pay123MuaOrder));
  Pay123MuaOrderReply_descriptor_ = file->message_type(71);
  static const int Pay123MuaOrderReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrderReply, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrderReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrderReply, transactionid_),
  };
  Pay123MuaOrderReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pay123MuaOrderReply_descriptor_,
      Pay123MuaOrderReply::default_instance_,
      Pay123MuaOrderReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrderReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay123MuaOrderReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pay123MuaOrderReply));
  Pay123MuaOrderReply_Result_descriptor_ = Pay123MuaOrderReply_descriptor_->enum_type(0);
  TransactionFee_descriptor_ = file->message_type(72);
  static const int TransactionFee_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, dynamicfee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, staticfee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, bankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, transtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, iocity_),
  };
  TransactionFee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionFee_descriptor_,
      TransactionFee::default_instance_,
      TransactionFee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionFee));
  GetTransactionFee_descriptor_ = file->message_type(73);
  static const int GetTransactionFee_offsets_[1] = {
  };
  GetTransactionFee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTransactionFee_descriptor_,
      GetTransactionFee::default_instance_,
      GetTransactionFee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionFee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionFee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTransactionFee));
  GetTransactionFeeReply_descriptor_ = file->message_type(74);
  static const int GetTransactionFeeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionFeeReply, transactionfees_),
  };
  GetTransactionFeeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTransactionFeeReply_descriptor_,
      GetTransactionFeeReply::default_instance_,
      GetTransactionFeeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionFeeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTransactionFeeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTransactionFeeReply));
  PayAirlineTicket_descriptor_ = file->message_type(75);
  static const int PayAirlineTicket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicket, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicket, providerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicket, billid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicket, amount_),
  };
  PayAirlineTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayAirlineTicket_descriptor_,
      PayAirlineTicket::default_instance_,
      PayAirlineTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayAirlineTicket));
  PayAirlineTicketReply_descriptor_ = file->message_type(76);
  static const int PayAirlineTicketReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicketReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicketReply, transactionid_),
  };
  PayAirlineTicketReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayAirlineTicketReply_descriptor_,
      PayAirlineTicketReply::default_instance_,
      PayAirlineTicketReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicketReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayAirlineTicketReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayAirlineTicketReply));
  PayAirlineTicketReply_Result_descriptor_ = PayAirlineTicketReply_descriptor_->enum_type(0);
  WithdrawByAgent_descriptor_ = file->message_type(77);
  static const int WithdrawByAgent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgent, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgent, agentphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgent, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgent, comment_),
  };
  WithdrawByAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithdrawByAgent_descriptor_,
      WithdrawByAgent::default_instance_,
      WithdrawByAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithdrawByAgent));
  WithdrawByAgentReply_descriptor_ = file->message_type(78);
  static const int WithdrawByAgentReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgentReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgentReply, transactionid_),
  };
  WithdrawByAgentReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithdrawByAgentReply_descriptor_,
      WithdrawByAgentReply::default_instance_,
      WithdrawByAgentReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgentReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawByAgentReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithdrawByAgentReply));
  WithdrawByAgentReply_Result_descriptor_ = WithdrawByAgentReply_descriptor_->enum_type(0);
  SendSms_descriptor_ = file->message_type(79);
  static const int SendSms_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, content_),
  };
  SendSms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSms_descriptor_,
      SendSms::default_instance_,
      SendSms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSms));
  SendSmsReply_descriptor_ = file->message_type(80);
  static const int SendSmsReply_offsets_[1] = {
  };
  SendSmsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSmsReply_descriptor_,
      SendSmsReply::default_instance_,
      SendSmsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSmsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSmsReply));
  BankOutManual_descriptor_ = file->message_type(81);
  static const int BankOutManual_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, bankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, holdernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, holdername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, bankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, inoutcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, bankbranch_),
  };
  BankOutManual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankOutManual_descriptor_,
      BankOutManual::default_instance_,
      BankOutManual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankOutManual));
  BankOutManualReply_descriptor_ = file->message_type(82);
  static const int BankOutManualReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManualReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManualReply, tranid_),
  };
  BankOutManualReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankOutManualReply_descriptor_,
      BankOutManualReply::default_instance_,
      BankOutManualReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManualReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankOutManualReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankOutManualReply));
  IsMomoer_descriptor_ = file->message_type(83);
  static const int IsMomoer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMomoer, phonenumber_),
  };
  IsMomoer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsMomoer_descriptor_,
      IsMomoer::default_instance_,
      IsMomoer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMomoer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMomoer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsMomoer));
  IsMomoerReply_descriptor_ = file->message_type(84);
  static const int IsMomoerReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMomoerReply, ismomoer_),
  };
  IsMomoerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsMomoerReply_descriptor_,
      IsMomoerReply::default_instance_,
      IsMomoerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMomoerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMomoerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsMomoerReply));
  CountAgentTran_descriptor_ = file->message_type(85);
  static const int CountAgentTran_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountAgentTran, phone_),
  };
  CountAgentTran_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountAgentTran_descriptor_,
      CountAgentTran::default_instance_,
      CountAgentTran_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountAgentTran, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountAgentTran, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountAgentTran));
  CountAgentTranReply_descriptor_ = file->message_type(86);
  static const int CountAgentTranReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountAgentTranReply, counter_),
  };
  CountAgentTranReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountAgentTranReply_descriptor_,
      CountAgentTranReply::default_instance_,
      CountAgentTranReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountAgentTranReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountAgentTranReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountAgentTranReply));
  GetServiceLayout_descriptor_ = file->message_type(87);
  static const int GetServiceLayout_offsets_[1] = {
  };
  GetServiceLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceLayout_descriptor_,
      GetServiceLayout::default_instance_,
      GetServiceLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceLayout));
  GetServicelayoutReply_descriptor_ = file->message_type(88);
  static const int GetServicelayoutReply_offsets_[1] = {
  };
  GetServicelayoutReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServicelayoutReply_descriptor_,
      GetServicelayoutReply::default_instance_,
      GetServicelayoutReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServicelayoutReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServicelayoutReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServicelayoutReply));
  CompeleteTran_descriptor_ = file->message_type(89);
  static const int CompeleteTran_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompeleteTran, trantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompeleteTran, otp_),
  };
  CompeleteTran_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompeleteTran_descriptor_,
      CompeleteTran::default_instance_,
      CompeleteTran_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompeleteTran, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompeleteTran, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompeleteTran));
  MakeTranReply_descriptor_ = file->message_type(90);
  static const int MakeTranReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeTranReply, error_),
  };
  MakeTranReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeTranReply_descriptor_,
      MakeTranReply::default_instance_,
      MakeTranReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeTranReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeTranReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeTranReply));
  CommandType_descriptor_ = file->enum_type(0);
  MoneyResource_descriptor_ = file->enum_type(1);
  TransactionStatus_descriptor_ = file->enum_type(2);
  TransactionType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendOtp_descriptor_, &SendOtp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendOtpReply_descriptor_, &SendOtpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyOtp_descriptor_, &VerifyOtp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyOtpReply_descriptor_, &VerifyOtpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterReply_descriptor_, &RegisterReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAgentInfo_descriptor_, &GetAgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAgentInfoReply_descriptor_, &GetAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsPinCorrect_descriptor_, &IsPinCorrect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsPinCorrectReply_descriptor_, &IsPinCorrectReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePin_descriptor_, &ChangePin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePinReply_descriptor_, &ChangePinReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAgentInfo_descriptor_, &UpdateAgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAgentInfoReply_descriptor_, &UpdateAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Article_descriptor_, &Article::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyArticle_descriptor_, &ModifyArticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyArticleReply_descriptor_, &ModifyArticleReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetArticlePage_descriptor_, &GetArticlePage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetArticlePageReply_descriptor_, &GetArticlePageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankAccount_descriptor_, &BankAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBankAccount_descriptor_, &ModifyBankAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBankAccountReply_descriptor_, &ModifyBankAccountReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAgentBankAccounts_descriptor_, &GetAgentBankAccounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAgentBankAccountsReply_descriptor_, &GetAgentBankAccountsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTransaction_descriptor_, &GetTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTransactionReply_descriptor_, &GetTransactionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTransactionDetail_descriptor_, &GetTransactionDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTransactionDetailReply_descriptor_, &GetTransactionDetailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Topup_descriptor_, &Topup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopupReply_descriptor_, &TopupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopupGame_descriptor_, &TopupGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopupGameReply_descriptor_, &TopupGameReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferM2m_descriptor_, &TransferM2m::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferM2mReply_descriptor_, &TransferM2mReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferM2c_descriptor_, &TransferM2c::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferM2cReply_descriptor_, &TransferM2cReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepositWithdrawAtPlace_descriptor_, &DepositWithdrawAtPlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepositWithdrawAtPlaceReply_descriptor_, &DepositWithdrawAtPlaceReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillDetail_descriptor_, &BillDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBillInfo_descriptor_, &GetBillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBillInfoReply_descriptor_, &GetBillInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayBill_descriptor_, &PayBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayBillReply_descriptor_, &PayBillReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bill_descriptor_, &Bill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveBill_descriptor_, &SaveBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveBillReply_descriptor_, &SaveBillReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSavedBill_descriptor_, &GetSavedBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSavedBillReply_descriptor_, &GetSavedBillReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSavedBill_descriptor_, &RemoveSavedBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSavedBillReply_descriptor_, &RemoveSavedBillReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankIn_descriptor_, &BankIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankInReply_descriptor_, &BankInReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankOut_descriptor_, &BankOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankOutReply_descriptor_, &BankOutReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BanknetToMomo_descriptor_, &BanknetToMomo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BanknetToMomoReply_descriptor_, &BanknetToMomoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyBanknetOtp_descriptor_, &VerifyBanknetOtp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyBanknetOtpReply_descriptor_, &VerifyBanknetOtpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreInfo_descriptor_, &StoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreAround_descriptor_, &GetStoreAround::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreAroundReply_descriptor_, &GetStoreAroundReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreByCode_descriptor_, &GetStoreByCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreByCodeReply_descriptor_, &GetStoreByCodeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueData_descriptor_, &KeyValueData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueDataReply_descriptor_, &KeyValueDataReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAvatarUploadToken_descriptor_, &GetAvatarUploadToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAvatarUploadTokenReply_descriptor_, &GetAvatarUploadTokenReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pay123MuaOrder_descriptor_, &Pay123MuaOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pay123MuaOrderReply_descriptor_, &Pay123MuaOrderReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionFee_descriptor_, &TransactionFee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTransactionFee_descriptor_, &GetTransactionFee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTransactionFeeReply_descriptor_, &GetTransactionFeeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayAirlineTicket_descriptor_, &PayAirlineTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayAirlineTicketReply_descriptor_, &PayAirlineTicketReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithdrawByAgent_descriptor_, &WithdrawByAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithdrawByAgentReply_descriptor_, &WithdrawByAgentReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSms_descriptor_, &SendSms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSmsReply_descriptor_, &SendSmsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankOutManual_descriptor_, &BankOutManual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankOutManualReply_descriptor_, &BankOutManualReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsMomoer_descriptor_, &IsMomoer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsMomoerReply_descriptor_, &IsMomoerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountAgentTran_descriptor_, &CountAgentTran::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountAgentTranReply_descriptor_, &CountAgentTranReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceLayout_descriptor_, &GetServiceLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServicelayoutReply_descriptor_, &GetServicelayoutReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompeleteTran_descriptor_, &CompeleteTran::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeTranReply_descriptor_, &MakeTranReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdModels_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete SendOtp::default_instance_;
  delete SendOtp_reflection_;
  delete SendOtpReply::default_instance_;
  delete SendOtpReply_reflection_;
  delete VerifyOtp::default_instance_;
  delete VerifyOtp_reflection_;
  delete VerifyOtpReply::default_instance_;
  delete VerifyOtpReply_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete RegisterReply::default_instance_;
  delete RegisterReply_reflection_;
  delete GetAgentInfo::default_instance_;
  delete GetAgentInfo_reflection_;
  delete GetAgentInfoReply::default_instance_;
  delete GetAgentInfoReply_reflection_;
  delete IsPinCorrect::default_instance_;
  delete IsPinCorrect_reflection_;
  delete IsPinCorrectReply::default_instance_;
  delete IsPinCorrectReply_reflection_;
  delete ChangePin::default_instance_;
  delete ChangePin_reflection_;
  delete ChangePinReply::default_instance_;
  delete ChangePinReply_reflection_;
  delete UpdateAgentInfo::default_instance_;
  delete UpdateAgentInfo_reflection_;
  delete UpdateAgentInfoReply::default_instance_;
  delete UpdateAgentInfoReply_reflection_;
  delete Article::default_instance_;
  delete Article_reflection_;
  delete ModifyArticle::default_instance_;
  delete ModifyArticle_reflection_;
  delete ModifyArticleReply::default_instance_;
  delete ModifyArticleReply_reflection_;
  delete GetArticlePage::default_instance_;
  delete GetArticlePage_reflection_;
  delete GetArticlePageReply::default_instance_;
  delete GetArticlePageReply_reflection_;
  delete BankAccount::default_instance_;
  delete BankAccount_reflection_;
  delete ModifyBankAccount::default_instance_;
  delete ModifyBankAccount_reflection_;
  delete ModifyBankAccountReply::default_instance_;
  delete ModifyBankAccountReply_reflection_;
  delete GetAgentBankAccounts::default_instance_;
  delete GetAgentBankAccounts_reflection_;
  delete GetAgentBankAccountsReply::default_instance_;
  delete GetAgentBankAccountsReply_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete GetTransaction::default_instance_;
  delete GetTransaction_reflection_;
  delete GetTransactionReply::default_instance_;
  delete GetTransactionReply_reflection_;
  delete GetTransactionDetail::default_instance_;
  delete GetTransactionDetail_reflection_;
  delete GetTransactionDetailReply::default_instance_;
  delete GetTransactionDetailReply_reflection_;
  delete Topup::default_instance_;
  delete Topup_reflection_;
  delete TopupReply::default_instance_;
  delete TopupReply_reflection_;
  delete TopupGame::default_instance_;
  delete TopupGame_reflection_;
  delete TopupGameReply::default_instance_;
  delete TopupGameReply_reflection_;
  delete TransferM2m::default_instance_;
  delete TransferM2m_reflection_;
  delete TransferM2mReply::default_instance_;
  delete TransferM2mReply_reflection_;
  delete TransferM2c::default_instance_;
  delete TransferM2c_reflection_;
  delete TransferM2cReply::default_instance_;
  delete TransferM2cReply_reflection_;
  delete DepositWithdrawAtPlace::default_instance_;
  delete DepositWithdrawAtPlace_reflection_;
  delete DepositWithdrawAtPlaceReply::default_instance_;
  delete DepositWithdrawAtPlaceReply_reflection_;
  delete BillDetail::default_instance_;
  delete BillDetail_reflection_;
  delete GetBillInfo::default_instance_;
  delete GetBillInfo_reflection_;
  delete GetBillInfoReply::default_instance_;
  delete GetBillInfoReply_reflection_;
  delete PayBill::default_instance_;
  delete PayBill_reflection_;
  delete PayBillReply::default_instance_;
  delete PayBillReply_reflection_;
  delete Bill::default_instance_;
  delete Bill_reflection_;
  delete SaveBill::default_instance_;
  delete SaveBill_reflection_;
  delete SaveBillReply::default_instance_;
  delete SaveBillReply_reflection_;
  delete GetSavedBill::default_instance_;
  delete GetSavedBill_reflection_;
  delete GetSavedBillReply::default_instance_;
  delete GetSavedBillReply_reflection_;
  delete RemoveSavedBill::default_instance_;
  delete RemoveSavedBill_reflection_;
  delete RemoveSavedBillReply::default_instance_;
  delete RemoveSavedBillReply_reflection_;
  delete BankIn::default_instance_;
  delete BankIn_reflection_;
  delete BankInReply::default_instance_;
  delete BankInReply_reflection_;
  delete BankOut::default_instance_;
  delete BankOut_reflection_;
  delete BankOutReply::default_instance_;
  delete BankOutReply_reflection_;
  delete BanknetToMomo::default_instance_;
  delete BanknetToMomo_reflection_;
  delete BanknetToMomoReply::default_instance_;
  delete BanknetToMomoReply_reflection_;
  delete VerifyBanknetOtp::default_instance_;
  delete VerifyBanknetOtp_reflection_;
  delete VerifyBanknetOtpReply::default_instance_;
  delete VerifyBanknetOtpReply_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete StoreInfo::default_instance_;
  delete StoreInfo_reflection_;
  delete GetStoreAround::default_instance_;
  delete GetStoreAround_reflection_;
  delete GetStoreAroundReply::default_instance_;
  delete GetStoreAroundReply_reflection_;
  delete GetStoreByCode::default_instance_;
  delete GetStoreByCode_reflection_;
  delete GetStoreByCodeReply::default_instance_;
  delete GetStoreByCodeReply_reflection_;
  delete KeyValueData::default_instance_;
  delete KeyValueData_reflection_;
  delete KeyValueDataReply::default_instance_;
  delete KeyValueDataReply_reflection_;
  delete GetAvatarUploadToken::default_instance_;
  delete GetAvatarUploadToken_reflection_;
  delete GetAvatarUploadTokenReply::default_instance_;
  delete GetAvatarUploadTokenReply_reflection_;
  delete Pay123MuaOrder::default_instance_;
  delete Pay123MuaOrder_reflection_;
  delete Pay123MuaOrderReply::default_instance_;
  delete Pay123MuaOrderReply_reflection_;
  delete TransactionFee::default_instance_;
  delete TransactionFee_reflection_;
  delete GetTransactionFee::default_instance_;
  delete GetTransactionFee_reflection_;
  delete GetTransactionFeeReply::default_instance_;
  delete GetTransactionFeeReply_reflection_;
  delete PayAirlineTicket::default_instance_;
  delete PayAirlineTicket_reflection_;
  delete PayAirlineTicketReply::default_instance_;
  delete PayAirlineTicketReply_reflection_;
  delete WithdrawByAgent::default_instance_;
  delete WithdrawByAgent_reflection_;
  delete WithdrawByAgentReply::default_instance_;
  delete WithdrawByAgentReply_reflection_;
  delete SendSms::default_instance_;
  delete SendSms_reflection_;
  delete SendSmsReply::default_instance_;
  delete SendSmsReply_reflection_;
  delete BankOutManual::default_instance_;
  delete BankOutManual_reflection_;
  delete BankOutManualReply::default_instance_;
  delete BankOutManualReply_reflection_;
  delete IsMomoer::default_instance_;
  delete IsMomoer_reflection_;
  delete IsMomoerReply::default_instance_;
  delete IsMomoerReply_reflection_;
  delete CountAgentTran::default_instance_;
  delete CountAgentTran_reflection_;
  delete CountAgentTranReply::default_instance_;
  delete CountAgentTranReply_reflection_;
  delete GetServiceLayout::default_instance_;
  delete GetServiceLayout_reflection_;
  delete GetServicelayoutReply::default_instance_;
  delete GetServicelayoutReply_reflection_;
  delete CompeleteTran::default_instance_;
  delete CompeleteTran_reflection_;
  delete MakeTranReply::default_instance_;
  delete MakeTranReply_reflection_;
}

void protobuf_AddDesc_CmdModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017CmdModels.proto\022\025com.mservice.momo.msg"
    "\"*\n\005Error\022\014\n\004code\030\001 \002(\021\022\023\n\013description\030\002"
    " \001(\t\"\036\n\007SendOtp\022\023\n\013phoneNumber\030\001 \002(\r\"0\n\014"
    "SendOtpReply\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003otp"
    "\030\002 \002(\t\"-\n\tVerifyOtp\022\023\n\013phoneNumber\030\001 \002(\r"
    "\022\013\n\003otp\030\002 \002(\t\"\242\001\n\016VerifyOtpReply\022\023\n\013phon"
    "eNumber\030\001 \002(\r\022@\n\006result\030\002 \002(\01620.com.mser"
    "vice.momo.msg.VerifyOtpReply.ResultCode\""
    "9\n\nResultCode\022\013\n\007SUCCESS\020\001\022\r\n\tNOT_MATCH\020"
    "\002\022\017\n\013OUT_OF_TIME\020\003\"{\n\010Register\022\023\n\013phoneN"
    "umber\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\016\n\006cardId\030\003 \002("
    "\t\022\013\n\003pin\030\004 \002(\t\022\r\n\005email\030\005 \001(\t\022\020\n\010questio"
    "n\030\006 \001(\t\022\016\n\006answer\030\007 \001(\t\"\224\001\n\rRegisterRepl"
    "y\022\023\n\013phoneNumber\030\001 \002(\r\022\?\n\006result\030\002 \002(\0162/"
    ".com.mservice.momo.msg.RegisterReply.Res"
    "ultCode\"-\n\nResultCode\022\013\n\007SUCCESS\020\001\022\022\n\016NU"
    "MBER_EXISTED\020\002\"#\n\014GetAgentInfo\022\023\n\013phoneN"
    "umber\030\001 \002(\r\"\313\002\n\021GetAgentInfoReply\022\023\n\013pho"
    "neNumber\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\016\n\006cardId\030\003"
    " \001(\t\022\013\n\003pin\030\004 \001(\t\022\r\n\005email\030\005 \001(\t\022\020\n\010ques"
    "tion\030\006 \001(\t\022\016\n\006answer\030\007 \001(\t\022\023\n\013bankAccoun"
    "t\030\010 \001(\t\022\020\n\010bankCode\030\t \001(\t\022\020\n\010bankName\030\n "
    "\001(\t\022\r\n\005point\030\013 \001(\004\022\014\n\004momo\030\014 \001(\004\022\r\n\005mloa"
    "d\030\r \001(\004\022\026\n\016isNamedAccount\030\016 \001(\010\022\020\n\010isAct"
    "ive\030\017 \001(\010\022\020\n\010birthday\030\020 \001(\t\022\017\n\007address\030\021"
    " \001(\t\022\023\n\013createdDate\030\022 \001(\004\"0\n\014IsPinCorrec"
    "t\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002 \001(\t\"\322\001\n\021"
    "IsPinCorrectReply\022\023\n\013phoneNumber\030\001 \002(\r\022C"
    "\n\006result\030\002 \002(\01623.com.mservice.momo.msg.I"
    "sPinCorrectReply.ResultCode\022\020\n\010locktill\030"
    "\003 \001(\004\"Q\n\nResultCode\022\013\n\007CORRECT\020\001\022\r\n\tINCO"
    "RRECT\020\002\022\020\n\014AUTH_EXPIRED\020\003\022\025\n\021AUTH_RETRY_"
    "EXCEED\020\004\"@\n\tChangePin\022\023\n\013phoneNumber\030\001 \002"
    "(\r\022\016\n\006oldPin\030\002 \002(\t\022\016\n\006newPin\030\003 \002(\t\"\326\001\n\016C"
    "hangePinReply\022\023\n\013phoneNumber\030\001 \002(\r\022@\n\006re"
    "sult\030\002 \002(\01620.com.mservice.momo.msg.Chang"
    "ePinReply.ResultCode\"m\n\nResultCode\022\013\n\007SU"
    "CCESS\020\001\022\021\n\rPIN_INCORRECT\020\002\022\020\n\014BAD_PASSWO"
    "RD\020\003\022\021\n\rSAME_PASSWORD\020\004\022\032\n\026PASSWORD_PREV"
    "IOUS_USED\020\005\"q\n\017UpdateAgentInfo\022\023\n\013phoneN"
    "umber\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007address\030\003 \001"
    "(\t\022\r\n\005email\030\004 \001(\t\022\016\n\006cardId\030\005 \001(\t\022\013\n\003dob"
    "\030\006 \001(\t\"\230\001\n\024UpdateAgentInfoReply\022\023\n\013phone"
    "Number\030\001 \002(\r\022F\n\006result\030\002 \002(\01626.com.mserv"
    "ice.momo.msg.UpdateAgentInfoReply.Result"
    "Code\"#\n\nResultCode\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020"
    "\002\"g\n\007Article\022\n\n\002id\030\001 \001(\t\022\016\n\006active\030\002 \001(\010"
    "\022\020\n\010postDate\030\003 \001(\004\022\r\n\005title\030\004 \001(\t\022\017\n\007sum"
    "mary\030\005 \001(\t\022\016\n\006detail\030\006 \001(\t\"\253\001\n\rModifyArt"
    "icle\022=\n\007command\030\001 \002(\0162,.com.mservice.mom"
    "o.msg.ModifyArticle.Command\022/\n\007article\030\002"
    " \002(\0132\036.com.mservice.momo.msg.Article\"*\n\007"
    "Command\022\007\n\003ADD\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELETE\020\003"
    "\"\265\001\n\022ModifyArticleReply\022D\n\006result\030\002 \002(\0162"
    "4.com.mservice.momo.msg.ModifyArticleRep"
    "ly.ResultCode\022/\n\007article\030\003 \001(\0132\036.com.mse"
    "rvice.momo.msg.Article\"(\n\nResultCode\022\013\n\007"
    "SUCCESS\020\001\022\r\n\tNOT_FOUND\020\002\"6\n\016GetArticlePa"
    "ge\022\020\n\010pageSize\030\001 \002(\r\022\022\n\npageNumber\030\002 \002(\r"
    "\"Z\n\023GetArticlePageReply\022\021\n\tpageCount\030\001 \002"
    "(\r\0220\n\010articles\030\002 \003(\0132\036.com.mservice.momo"
    ".msg.Article\"\177\n\013BankAccount\022\023\n\013phoneNumb"
    "er\030\002 \002(\r\022\021\n\taccountId\030\003 \002(\t\022\020\n\010bankName\030"
    "\004 \001(\t\022\021\n\townerName\030\005 \001(\t\022\023\n\013createdDate\030"
    "\006 \001(\004\022\016\n\006bankId\030\007 \001(\t\"\267\001\n\021ModifyBankAcco"
    "unt\022A\n\007command\030\001 \002(\01620.com.mservice.momo"
    ".msg.ModifyBankAccount.Command\0223\n\007accoun"
    "t\030\002 \002(\0132\".com.mservice.momo.msg.BankAcco"
    "unt\"*\n\007Command\022\007\n\003ADD\020\001\022\n\n\006UPDATE\020\002\022\n\n\006D"
    "ELETE\020\003\"\305\001\n\026ModifyBankAccountReply\022H\n\006re"
    "sult\030\002 \002(\01628.com.mservice.momo.msg.Modif"
    "yBankAccountReply.ResultCode\0227\n\013bankAcco"
    "unt\030\003 \001(\0132\".com.mservice.momo.msg.BankAc"
    "count\"(\n\nResultCode\022\013\n\007SUCCESS\020\001\022\r\n\tNOT_"
    "FOUND\020\002\"+\n\024GetAgentBankAccounts\022\023\n\013phone"
    "Number\030\001 \002(\r\"Q\n\031GetAgentBankAccountsRepl"
    "y\0224\n\010accounts\030\002 \003(\0132\".com.mservice.momo."
    "msg.BankAccount\"\317\001\n\013Transaction\022\n\n\002id\030\001 "
    "\001(\004\022\014\n\004time\030\002 \001(\004\022\016\n\006amount\030\003 \001(\004\022\023\n\013par"
    "tnerName\030\004 \001(\t\0224\n\004type\030\005 \001(\0162&.com.mserv"
    "ice.momo.msg.TransactionType\0228\n\006status\030\006"
    " \001(\0162(.com.mservice.momo.msg.Transaction"
    "Status\022\021\n\tpartnerId\030\007 \001(\t\"\337\001\n\016GetTransac"
    "tion\022\023\n\013phoneNumber\030\001 \002(\r\022\020\n\010pageSize\030\002 "
    "\002(\r\022\022\n\npageNumber\030\003 \002(\r\022\021\n\tstartTime\030\004 \001"
    "(\004\022\017\n\007endTime\030\005 \001(\004\0228\n\006status\030\006 \001(\0162(.co"
    "m.mservice.momo.msg.TransactionStatus\0224\n"
    "\004type\030\007 \003(\0162&.com.mservice.momo.msg.Tran"
    "sactionType\"w\n\023GetTransactionReply\022\023\n\013ph"
    "oneNumber\030\001 \002(\r\022\021\n\tpageCount\030\002 \002(\r\0228\n\014tr"
    "ansactions\030\003 \003(\0132\".com.mservice.momo.msg"
    ".Transaction\"B\n\024GetTransactionDetail\022\023\n\013"
    "phoneNumber\030\001 \002(\r\022\025\n\rtransactionId\030\002 \002(\004"
    "\"\320\002\n\031GetTransactionDetailReply\022\023\n\013phoneN"
    "umber\030\001 \002(\r\022\n\n\002id\030\002 \001(\004\022\014\n\004time\030\003 \001(\004\022\016\n"
    "\006amount\030\004 \001(\004\0224\n\004type\030\005 \001(\0162&.com.mservi"
    "ce.momo.msg.TransactionType\0228\n\006status\030\006 "
    "\001(\0162(.com.mservice.momo.msg.TransactionS"
    "tatus\022\021\n\tpartnerId\030\007 \001(\t\022\023\n\013partnerCode\030"
    "\010 \001(\t\022\023\n\013partnerName\030\t \001(\t\022\016\n\006billId\030\n \001"
    "(\t\022\017\n\007comment\030\013 \001(\t\022\023\n\013partnerPref\030\014 \001(\t"
    "\022\021\n\terrorCode\030\r \001(\r\"S\n\005Topup\022\023\n\013phoneNum"
    "ber\030\001 \002(\r\022\013\n\003pin\030\002 \002(\t\022\030\n\020topupPhoneNumb"
    "er\030\003 \002(\r\022\016\n\006amount\030\004 \002(\004\"\251\001\n\nTopupReply\022"
    "\023\n\013phoneNumber\030\001 \002(\r\0228\n\006result\030\002 \002(\0162(.c"
    "om.mservice.momo.msg.TopupReply.Result\022\025"
    "\n\rtransactionId\030\003 \001(\t\"5\n\006Result\022\013\n\007SUCCE"
    "SS\020\001\022\n\n\006FAILED\020\002\022\022\n\016LOGIN_REQUIRED\020\004\"f\n\t"
    "TopupGame\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002 "
    "\002(\t\022\022\n\nproviderId\030\003 \002(\t\022\023\n\013gameAccount\030\004"
    " \002(\t\022\016\n\006amount\030\005 \002(\004\"\257\001\n\016TopupGameReply\022"
    "\023\n\013phoneNumber\030\001 \002(\r\022E\n\006result\030\002 \002(\01625.c"
    "om.mservice.momo.msg.TopupGameReply.Topu"
    "pGameResult\022\025\n\rtransactionId\030\003 \001(\t\"*\n\017To"
    "pupGameResult\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\"m"
    "\n\013TransferM2m\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pi"
    "n\030\002 \002(\t\022\033\n\023receiverPhoneNumber\030\003 \002(\r\022\016\n\006"
    "amount\030\004 \002(\004\022\017\n\007comment\030\005 \002(\t\"\310\001\n\020Transf"
    "erM2mReply\022\023\n\013phoneNumber\030\001 \002(\r\022>\n\006resul"
    "t\030\002 \002(\0162..com.mservice.momo.msg.Transfer"
    "M2mReply.Result\022\025\n\rtransactionId\030\003 \001(\t\"H"
    "\n\006Result\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\022\021\n\rACC"
    "ESS_DENIED\020\003\022\022\n\016LOGIN_REQUIRED\020\004\"\233\001\n\013Tra"
    "nsferM2c\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002 \002"
    "(\t\022\024\n\014receiverName\030\003 \002(\t\022\026\n\016receiverCard"
    "Id\030\004 \002(\t\022\033\n\023receiverPhoneNumber\030\005 \002(\r\022\016\n"
    "\006amount\030\006 \002(\004\022\017\n\007comment\030\007 \002(\t\"\235\001\n\020Trans"
    "ferM2cReply\022\023\n\013phoneNumber\030\001 \002(\r\022>\n\006resu"
    "lt\030\002 \002(\0162..com.mservice.momo.msg.Transfe"
    "rM2cReply.Result\"4\n\006Result\022\013\n\007SUCCESS\020\001\022"
    "\n\n\006FAILED\020\002\022\021\n\rACCESS_DENIED\020\003\"~\n\026Deposi"
    "tWithdrawAtPlace\022\023\n\013phoneNumber\030\001 \002(\r\022\017\n"
    "\007address\030\002 \002(\t\022\016\n\006amount\030\003 \002(\004\022\r\n\005inOut\030"
    "\004 \002(\r\022\016\n\006maTinh\030\005 \002(\t\022\017\n\007maHuyen\030\006 \002(\t\"\236"
    "\001\n\033DepositWithdrawAtPlaceReply\022\023\n\013phoneN"
    "umber\030\001 \002(\r\022I\n\006result\030\002 \002(\01629.com.mservi"
    "ce.momo.msg.DepositWithdrawAtPlaceReply."
    "Result\"\037\n\006Result\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002\""
    "d\n\nBillDetail\022\016\n\006billId\030\001 \001(\t\022\016\n\006amount\030"
    "\002 \001(\004\022\021\n\tstartDate\030\003 \001(\004\022\017\n\007endDate\030\004 \001("
    "\004\022\022\n\nproviderId\030\005 \001(\t\"S\n\013GetBillInfo\022\023\n\013"
    "phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002 \002(\t\022\022\n\nprovid"
    "erId\030\003 \002(\t\022\016\n\006billId\030\004 \002(\t\"\233\002\n\020GetBillIn"
    "foReply\022\023\n\013phoneNumber\030\001 \002(\r\022>\n\006result\030\002"
    " \002(\0162..com.mservice.momo.msg.GetBillInfo"
    "Reply.Result\0226\n\013billDetails\030\003 \003(\0132!.com."
    "mservice.momo.msg.BillDetail\022\021\n\tagentNam"
    "e\030\004 \001(\t\022\022\n\nagentPhone\030\005 \001(\t\022\024\n\014agentAddr"
    "ess\030\006 \001(\t\"=\n\006Result\022\n\n\006SUCESS\020\001\022\023\n\017AGENT"
    "_NOT_FOUND\020\002\022\022\n\016BILL_NOT_FOUND\020\003\"s\n\007PayB"
    "ill\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002 \002(\t\022\022\n"
    "\nproviderId\030\003 \002(\t\022\016\n\006billId\030\004 \002(\t\022\016\n\006amo"
    "unt\030\005 \002(\004\022\022\n\nfromSource\030\006 \001(\r\"\312\001\n\014PayBil"
    "lReply\022\023\n\013phoneNumber\030\001 \002(\r\022:\n\006result\030\002 "
    "\002(\0162*.com.mservice.momo.msg.PayBillReply"
    ".Result\022\025\n\rtransactionId\030\003 \001(\t\"R\n\006Result"
    "\022\013\n\007SUCCESS\020\001\022\023\n\017AGENT_NOT_FOUND\020\002\022\022\n\016BI"
    "LL_NOT_FOUND\020\003\022\022\n\016UNKNOWN_SOURCE\020\004\"\?\n\004Bi"
    "ll\022\023\n\013phoneNumber\030\001 \002(\r\022\022\n\nproviderId\030\003 "
    "\002(\t\022\016\n\006billId\030\004 \002(\t\"P\n\010SaveBill\022\023\n\013phone"
    "Number\030\001 \002(\r\022\013\n\003pin\030\002 \002(\t\022\022\n\nproviderId\030"
    "\003 \002(\t\022\016\n\006billId\030\004 \002(\t\"\202\001\n\rSaveBillReply\022"
    "\023\n\013phoneNumber\030\001 \002(\r\022;\n\006result\030\002 \002(\0162+.c"
    "om.mservice.momo.msg.SaveBillReply.Resul"
    "t\"\037\n\006Result\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002\"#\n\014Ge"
    "tSavedBill\022\023\n\013phoneNumber\030\001 \002(\r\"`\n\021GetSa"
    "vedBillReply\022\023\n\013phoneNumber\030\001 \002(\r\0226\n\013bil"
    "lDetails\030\002 \003(\0132!.com.mservice.momo.msg.B"
    "illDetail\"W\n\017RemoveSavedBill\022\023\n\013phoneNum"
    "ber\030\001 \002(\r\022\013\n\003pin\030\002 \002(\t\022\022\n\nproviderId\030\003 \002"
    "(\t\022\016\n\006billId\030\004 \002(\t\"\220\001\n\024RemoveSavedBillRe"
    "ply\022\023\n\013phoneNumber\030\001 \002(\r\022B\n\006result\030\002 \002(\016"
    "22.com.mservice.momo.msg.RemoveSavedBill"
    "Reply.Result\"\037\n\006Result\022\013\n\007SUCCESS\020\001\022\010\n\004F"
    "AIL\020\002\"L\n\006BankIn\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003"
    "pin\030\002 \002(\t\022\020\n\010bankCode\030\003 \002(\t\022\016\n\006amount\030\004 "
    "\002(\004\"\227\001\n\013BankInReply\022\023\n\013phoneNumber\030\001 \002(\r"
    "\0229\n\006result\030\002 \002(\0162).com.mservice.momo.msg"
    ".BankInReply.Result\022\025\n\rtransactionId\030\003 \001"
    "(\t\"!\n\006Result\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\"M\n"
    "\007BankOut\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002 \002"
    "(\t\022\020\n\010bankCode\030\003 \002(\t\022\016\n\006amount\030\004 \002(\004\"\231\001\n"
    "\014BankOutReply\022\023\n\013phoneNumber\030\001 \002(\r\022:\n\006re"
    "sult\030\002 \002(\0162*.com.mservice.momo.msg.BankO"
    "utReply.Result\022\025\n\rtransactionId\030\003 \001(\t\"!\n"
    "\006Result\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\"\264\001\n\rBan"
    "knetToMomo\022\023\n\013phoneNumber\030\001 \002(\r\022\013\n\003pin\030\002"
    " \002(\t\022\016\n\006bankId\030\003 \002(\t\022\016\n\006amount\030\004 \002(\004\022\026\n\016"
    "cardHolderName\030\005 \002(\t\022\030\n\020cardHolderNumber"
    "\030\006 \002(\t\022\027\n\017cardHolderMonth\030\007 \002(\r\022\026\n\016cardH"
    "olderYear\030\010 \002(\r\"\331\001\n\022BanknetToMomoReply\022\023"
    "\n\013phoneNumber\030\001 \002(\r\022@\n\006result\030\002 \002(\01620.co"
    "m.mservice.momo.msg.BanknetToMomoReply.R"
    "esult\022\025\n\rtransactionId\030\003 \002(\t\022\035\n\025merchant"
    "TransactionId\030\004 \002(\t\022\023\n\013banketError\030\005 \001(\r"
    "\"!\n\006Result\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\"\212\001\n\020"
    "VerifyBanknetOtp\022\023\n\013phoneNumber\030\001 \002(\r\022\016\n"
    "\006amount\030\002 \002(\004\022\025\n\rtransactionId\030\003 \002(\t\022\035\n\025"
    "merchantTransactionId\030\004 \002(\t\022\013\n\003otp\030\005 \002(\t"
    "\022\016\n\006bankId\030\006 \002(\t\"<\n\025VerifyBanknetOtpRepl"
    "y\022\023\n\013phoneNumber\030\001 \002(\r\022\016\n\006result\030\002 \002(\r\"/"
    "\n\010Location\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitud"
    "e\030\002 \001(\001\"\332\001\n\tStoreInfo\022\014\n\004name\030\003 \001(\t\022\021\n\to"
    "wnerName\030\001 \001(\t\022\022\n\nownerPhone\030\002 \001(\t\0221\n\010lo"
    "cation\030\004 \001(\0132\037.com.mservice.momo.msg.Loc"
    "ation\022\017\n\007address\030\005 \001(\t\022\022\n\ndistrictId\030\006 \001"
    "(\r\022\016\n\006cityId\030\007 \001(\r\022\016\n\006areaId\030\010 \001(\r\022\016\n\006st"
    "reet\030\t \001(\t\022\020\n\010wardName\030\n \001(\t\"h\n\016GetStore"
    "Around\022\021\n\tlongitude\030\001 \002(\001\022\020\n\010latitude\030\002 "
    "\002(\001\022\016\n\006cityId\030\003 \001(\r\022\022\n\ndistrictId\030\004 \001(\r\022"
    "\r\n\005limit\030\005 \001(\r\"G\n\023GetStoreAroundReply\0220\n"
    "\006stores\030\001 \003(\0132 .com.mservice.momo.msg.St"
    "oreInfo\"M\n\016GetStoreByCode\022\013\n\003cid\030\001 \002(\r\022\013"
    "\n\003did\030\002 \001(\r\022\020\n\010pageSize\030\003 \002(\r\022\017\n\007pageNum"
    "\030\004 \002(\r\"Z\n\023GetStoreByCodeReply\022\021\n\tpageCou"
    "nt\030\001 \002(\004\0220\n\006stores\030\002 \003(\0132 .com.mservice."
    "momo.msg.StoreInfo\"\221\001\n\014KeyValueData\022D\n\013c"
    "ommandType\030\001 \002(\0162/.com.mservice.momo.msg"
    ".KeyValueData.CommandType\022\013\n\003key\030\002 \002(\t\022\r"
    "\n\005value\030\003 \001(\t\"\037\n\013CommandType\022\007\n\003GET\020\000\022\007\n"
    "\003PUT\020\001\"\206\001\n\021KeyValueDataReply\022\?\n\006result\030\001"
    " \002(\0162/.com.mservice.momo.msg.KeyValueDat"
    "aReply.Result\022\r\n\005value\030\002 \001(\t\"!\n\006Result\022\013"
    "\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\"+\n\024GetAvatarUplo"
    "adToken\022\023\n\013phoneNumber\030\001 \002(\r\"\?\n\031GetAvata"
    "rUploadTokenReply\022\023\n\013phoneNumber\030\001 \002(\r\022\r"
    "\n\005token\030\002 \002(\t\"\201\001\n\016Pay123MuaOrder\022\023\n\013phon"
    "eNumber\030\001 \002(\r\022\013\n\003pin\030\002 \002(\t\022\033\n\023receiverPh"
    "oneNumber\030\003 \002(\r\022\016\n\006amount\030\004 \002(\004\022\017\n\007comme"
    "nt\030\005 \002(\t\022\017\n\007orderId\030\006 \002(\t\"\272\001\n\023Pay123MuaO"
    "rderReply\022\023\n\013phoneNumber\030\001 \002(\r\022A\n\006result"
    "\030\002 \002(\01621.com.mservice.momo.msg.Pay123Mua"
    "OrderReply.Result\022\025\n\rtransactionId\030\003 \001(\t"
    "\"4\n\006Result\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\022\021\n\rA"
    "CCESS_DENIED\020\003\"{\n\016TransactionFee\022\022\n\ndyna"
    "micFee\030\001 \001(\001\022\021\n\tstaticFee\030\002 \001(\r\022\016\n\006bankI"
    "d\030\003 \001(\t\022\021\n\ttransType\030\004 \001(\r\022\017\n\007channel\030\005 "
    "\001(\r\022\016\n\006ioCity\030\006 \001(\r\"\023\n\021GetTransactionFee"
    "\"X\n\026GetTransactionFeeReply\022>\n\017transactio"
    "nFees\030\001 \003(\0132%.com.mservice.momo.msg.Tran"
    "sactionFee\"[\n\020PayAirlineTicket\022\023\n\013phoneN"
    "umber\030\001 \002(\r\022\022\n\nproviderId\030\002 \002(\t\022\016\n\006billI"
    "d\030\003 \002(\t\022\016\n\006amount\030\004 \002(\004\"\224\001\n\025PayAirlineTi"
    "cketReply\022C\n\006result\030\001 \001(\01623.com.mservice"
    ".momo.msg.PayAirlineTicketReply.Result\022\025"
    "\n\rtransactionId\030\002 \001(\004\"\037\n\006Result\022\013\n\007SUCCE"
    "SS\020\001\022\010\n\004FAIL\020\002\"[\n\017WithdrawByAgent\022\023\n\013pho"
    "neNumber\030\001 \002(\r\022\022\n\nagentPhone\030\002 \002(\r\022\016\n\006am"
    "ount\030\003 \002(\004\022\017\n\007comment\030\004 \001(\t\"\222\001\n\024Withdraw"
    "ByAgentReply\022B\n\006result\030\001 \001(\01622.com.mserv"
    "ice.momo.msg.WithdrawByAgentReply.Result"
    "\022\025\n\rtransactionId\030\002 \001(\t\"\037\n\006Result\022\013\n\007SUC"
    "CESS\020\001\022\010\n\004FAIL\020\002\"/\n\007SendSms\022\023\n\013phoneNumb"
    "er\030\001 \002(\r\022\017\n\007content\030\002 \002(\t\"\016\n\014SendSmsRepl"
    "y\"\270\001\n\rBankOutManual\022\023\n\013phoneNumber\030\001 \002(\r"
    "\022\016\n\006bankId\030\002 \002(\t\022\024\n\014holderNumber\030\003 \002(\t\022\016"
    "\n\006amount\030\004 \002(\004\022\022\n\nholderName\030\005 \002(\t\022\020\n\010ba"
    "nkName\030\006 \002(\t\022\017\n\007comment\030\007 \001(\t\022\021\n\tinOutCi"
    "ty\030\010 \002(\005\022\022\n\nbankBranch\030\t \001(\t\"3\n\022BankOutM"
    "anualReply\022\r\n\005error\030\001 \002(\r\022\016\n\006tranId\030\002 \002("
    "\004\"\037\n\010IsMomoer\022\023\n\013phoneNumber\030\001 \002(\r\"!\n\rIs"
    "MomoerReply\022\020\n\010isMomoer\030\001 \002(\010\"\037\n\016CountAg"
    "entTran\022\r\n\005phone\030\001 \002(\r\"&\n\023CountAgentTran"
    "Reply\022\017\n\007counter\030\001 \002(\004\"\022\n\020GetServiceLayo"
    "ut\"\027\n\025GetServicelayoutReply\".\n\rCompelete"
    "Tran\022\020\n\010tranType\030\001 \002(\005\022\013\n\003otp\030\002 \002(\t\"\036\n\rM"
    "akeTranReply\022\r\n\005error\030\001 \002(\005*\364\017\n\013CommandT"
    "ype\022\t\n\005ERROR\020\001\022\014\n\010SEND_OTP\020\002\022\022\n\016SEND_OTP"
    "_REPLY\020\003\022\016\n\nVERIFY_OTP\020\004\022\024\n\020VERIFY_OTP_R"
    "EPLY\020\005\022\014\n\010REGISTER\020\006\022\022\n\016REGISTER_REPLY\020\007"
    "\022\022\n\016GET_AGENT_INFO\020\010\022\030\n\024GET_AGENT_INFO_R"
    "EPLY\020\t\022\022\n\016IS_PIN_CORRECT\020\n\022\030\n\024IS_PIN_COR"
    "RECT_REPLY\020\013\022\016\n\nCHANGE_PIN\020\014\022\024\n\020CHANGE_P"
    "IN_REPLY\020\r\022\022\n\016MODIFY_ARTICLE\020\016\022\030\n\024MODIFY"
    "_ARTICLE_REPLY\020\017\022\024\n\020GET_ARTICLE_PAGE\020\020\022\032"
    "\n\026GET_ARTICLE_PAGE_REPLY\020\021\022\027\n\023MODIFY_BAN"
    "K_ACCOUNT\020\022\022\035\n\031MODIFY_BANK_ACCOUNT_REPLY"
    "\020\023\022\033\n\027GET_AGENT_BANK_ACCOUNTS\020\024\022!\n\035GET_A"
    "GENT_BANK_ACCOUNTS_REPLY\020\025\022\023\n\017GET_TRANSA"
    "CTION\020\026\022\031\n\025GET_TRANSACTION_REPLY\020\027\022\032\n\026GE"
    "T_TRANSACTION_DETAIL\020\030\022 \n\034GET_TRANSACTIO"
    "N_DETAIL_REPLY\020\031\022\t\n\005TOPUP\020\032\022\017\n\013TOPUP_REP"
    "LY\020\033\022\016\n\nTOPUP_GAME\020\034\022\024\n\020TOPUP_GAME_REPLY"
    "\020\035\022\020\n\014TRANSFER_M2M\020\036\022\026\n\022TRANSFER_M2M_REP"
    "LY\020\037\022\020\n\014TRANSFER_M2C\020 \022\026\n\022TRANSFER_M2C_R"
    "EPLY\020!\022\021\n\rGET_BILL_INFO\020\"\022\027\n\023GET_BILL_IN"
    "FO_REPLY\020#\022\014\n\010PAY_BILL\020$\022\022\n\016PAY_BILL_REP"
    "LY\020%\022\013\n\007BANK_IN\020&\022\021\n\rBANK_IN_REPLY\020\'\022\014\n\010"
    "BANK_OUT\020(\022\022\n\016BANK_OUT_REPLY\020)\022\024\n\020BANK_N"
    "ET_TO_MOMO\020*\022\032\n\026BANK_NET_TO_MOMO_REPLY\020+"
    "\022\026\n\022VERIFY_BANKNET_OTP\020,\022\034\n\030VERIFY_BANKN"
    "ET_OTP_REPLY\020-\022\024\n\020GET_STORE_AROUND\020.\022\032\n\026"
    "GET_STORE_AROUND_REPLY\020/\022\r\n\tSAVE_BILL\0200\022"
    "\023\n\017SAVE_BILL_REPLY\0201\022\022\n\016KEY_VALUE_DATA\0202"
    "\022\030\n\024KEY_VALUE_DATA_REPLY\0203\022\025\n\021GET_STORE_"
    "BY_CODE\0204\022\033\n\027GET_STORE_BY_CODE_REPLY\0205\022\024"
    "\n\020PAY_123MUA_ORDER\0206\022\032\n\026PAY_123MUA_ORDER"
    "_REPLY\0207\022\025\n\021UPDATE_AGENT_INFO\0208\022\033\n\027UPDAT"
    "E_AGENT_INFO_REPLY\0209\022\035\n\031DEPOSIT_WITHDRAW"
    "_AT_PLACE\020:\022#\n\037DEPOSIT_WITHDRAW_AT_PLACE"
    "_REPLY\020;\022\033\n\027GET_AVATAR_UPLOAD_TOKEN\020<\022!\n"
    "\035GET_AVATAR_UPLOAD_TOKEN_REPLY\020=\022\022\n\016GET_"
    "SAVED_BILL\020>\022\030\n\024GET_SAVED_BILL_REPLY\020\?\022\025"
    "\n\021REMOVE_SAVED_BILL\020@\022\033\n\027REMOVE_SAVED_BI"
    "LL_REPLY\020A\022\027\n\023GET_TRANSACTION_FEE\020B\022\035\n\031G"
    "ET_TRANSACTION_FEE_REPLY\020C\022\026\n\022PAY_AIRLIN"
    "E_TICKET\020D\022\034\n\030PAY_AIRLINE_TICKET_REPLY\020E"
    "\022\014\n\010SEND_SMS\020F\022\022\n\016SEND_SMS_REPLY\020G\022\025\n\021WI"
    "THDRAW_BY_AGENT\020H\022\033\n\027WITHDRAW_BY_AGENT_R"
    "EPLY\020I\022\023\n\017BANK_OUT_MANUAL\020J\022\031\n\025BANK_OUT_"
    "MANUAL_REPLY\020K\022\r\n\tIS_MOMOER\020L\022\023\n\017IS_MOMO"
    "ER_REPLY\020M\022\024\n\020COUNT_AGENT_TRAN\020N\022\032\n\026COUN"
    "T_AGENT_TRAN_REPLY\020O\022\r\n\tMAKE_TRAN\020P\022\023\n\017M"
    "AKE_TRAN_REPLY\020Q\022\026\n\022GET_SERVICE_LAYOUT\020R"
    "\022\034\n\030GET_SERVICE_LAYOUT_REPLY\020S\022\021\n\rCOMPLE"
    "TE_TRAN\020T\022\027\n\023COMPLETE_TRAN_REPLY\020U\022\013\n\007DO"
    "_TRAN\020V\022\021\n\rDO_TRAN_REPLY\020W\022\017\n\013GET_SERVIC"
    "E\020X\022\025\n\021GET_SERVICE_REPLY\020Y*^\n\rMoneyResou"
    "rce\022\010\n\004MOMO\020\001\022\016\n\nBANKLINKED\020\002\022\016\n\nMASTERC"
    "ARD\020\003\022\010\n\004VISA\020\004\022\031\n\025BANK_NET_2_VERIFY_OTP"
    "\020\005*\\\n\021TransactionStatus\022\013\n\007SUCCESS\020\001\022\n\n\006"
    "FAILED\020\002\022\013\n\007PROCESS\020\003\022\r\n\tCANCELLED\020\004\022\022\n\016"
    "UNKNOWN_STATUS\020d*\357\003\n\017TransactionType\022\020\n\014"
    "BANK_IN_TYPE\020\001\022\021\n\rBANK_OUT_TYPE\020\002\022\017\n\013TOP"
    "_UP_TYPE\020\003\022\024\n\020TOP_UP_GAME_TYPE\020\004\022\014\n\010M2C_"
    "TYPE\020\005\022\014\n\010M2M_TYPE\020\006\022\025\n\021PAY_ONE_BILL_TYP"
    "E\020\007\022\026\n\022QUICK_PAYMENT_TYPE\020\010\022\026\n\022QUICK_DEP"
    "OSIT_TYPE\020\t\022\031\n\025BANK_NET_TO_MOMO_TYPE\020\n\022\025"
    "\n\021WITHDRAW_TO_AGENT\020\r\022\033\n\027PAY_TELEPHONE_B"
    "ILL_TYPE\020\016\022\033\n\027PAY_AIRLINE_TICKET_TYPE\020\017\022"
    "\030\n\024BANK_OUT_MANUAL_TYPE\020\032\022\031\n\025DEPOSIT_AT_"
    "PLACE_TYPE\020\033\022\031\n\025WITHDRAW_AT_HOME_TYPE\020\034\022"
    "\016\n\nBONUS_TYPE\020\035\022\014\n\010FEE_TYPE\020\036\022\020\n\014PHIM123"
    "_TYPE\020\037\022\030\n\024PAY_NUOCCL_BILL_TYPE\020 \022\025\n\021PAY"
    "_AVG_BILL_TYPE\020!\022\020\n\014UNKNOWN_TYPE\020d", 13394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdModels.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  SendOtp::default_instance_ = new SendOtp();
  SendOtpReply::default_instance_ = new SendOtpReply();
  VerifyOtp::default_instance_ = new VerifyOtp();
  VerifyOtpReply::default_instance_ = new VerifyOtpReply();
  Register::default_instance_ = new Register();
  RegisterReply::default_instance_ = new RegisterReply();
  GetAgentInfo::default_instance_ = new GetAgentInfo();
  GetAgentInfoReply::default_instance_ = new GetAgentInfoReply();
  IsPinCorrect::default_instance_ = new IsPinCorrect();
  IsPinCorrectReply::default_instance_ = new IsPinCorrectReply();
  ChangePin::default_instance_ = new ChangePin();
  ChangePinReply::default_instance_ = new ChangePinReply();
  UpdateAgentInfo::default_instance_ = new UpdateAgentInfo();
  UpdateAgentInfoReply::default_instance_ = new UpdateAgentInfoReply();
  Article::default_instance_ = new Article();
  ModifyArticle::default_instance_ = new ModifyArticle();
  ModifyArticleReply::default_instance_ = new ModifyArticleReply();
  GetArticlePage::default_instance_ = new GetArticlePage();
  GetArticlePageReply::default_instance_ = new GetArticlePageReply();
  BankAccount::default_instance_ = new BankAccount();
  ModifyBankAccount::default_instance_ = new ModifyBankAccount();
  ModifyBankAccountReply::default_instance_ = new ModifyBankAccountReply();
  GetAgentBankAccounts::default_instance_ = new GetAgentBankAccounts();
  GetAgentBankAccountsReply::default_instance_ = new GetAgentBankAccountsReply();
  Transaction::default_instance_ = new Transaction();
  GetTransaction::default_instance_ = new GetTransaction();
  GetTransactionReply::default_instance_ = new GetTransactionReply();
  GetTransactionDetail::default_instance_ = new GetTransactionDetail();
  GetTransactionDetailReply::default_instance_ = new GetTransactionDetailReply();
  Topup::default_instance_ = new Topup();
  TopupReply::default_instance_ = new TopupReply();
  TopupGame::default_instance_ = new TopupGame();
  TopupGameReply::default_instance_ = new TopupGameReply();
  TransferM2m::default_instance_ = new TransferM2m();
  TransferM2mReply::default_instance_ = new TransferM2mReply();
  TransferM2c::default_instance_ = new TransferM2c();
  TransferM2cReply::default_instance_ = new TransferM2cReply();
  DepositWithdrawAtPlace::default_instance_ = new DepositWithdrawAtPlace();
  DepositWithdrawAtPlaceReply::default_instance_ = new DepositWithdrawAtPlaceReply();
  BillDetail::default_instance_ = new BillDetail();
  GetBillInfo::default_instance_ = new GetBillInfo();
  GetBillInfoReply::default_instance_ = new GetBillInfoReply();
  PayBill::default_instance_ = new PayBill();
  PayBillReply::default_instance_ = new PayBillReply();
  Bill::default_instance_ = new Bill();
  SaveBill::default_instance_ = new SaveBill();
  SaveBillReply::default_instance_ = new SaveBillReply();
  GetSavedBill::default_instance_ = new GetSavedBill();
  GetSavedBillReply::default_instance_ = new GetSavedBillReply();
  RemoveSavedBill::default_instance_ = new RemoveSavedBill();
  RemoveSavedBillReply::default_instance_ = new RemoveSavedBillReply();
  BankIn::default_instance_ = new BankIn();
  BankInReply::default_instance_ = new BankInReply();
  BankOut::default_instance_ = new BankOut();
  BankOutReply::default_instance_ = new BankOutReply();
  BanknetToMomo::default_instance_ = new BanknetToMomo();
  BanknetToMomoReply::default_instance_ = new BanknetToMomoReply();
  VerifyBanknetOtp::default_instance_ = new VerifyBanknetOtp();
  VerifyBanknetOtpReply::default_instance_ = new VerifyBanknetOtpReply();
  Location::default_instance_ = new Location();
  StoreInfo::default_instance_ = new StoreInfo();
  GetStoreAround::default_instance_ = new GetStoreAround();
  GetStoreAroundReply::default_instance_ = new GetStoreAroundReply();
  GetStoreByCode::default_instance_ = new GetStoreByCode();
  GetStoreByCodeReply::default_instance_ = new GetStoreByCodeReply();
  KeyValueData::default_instance_ = new KeyValueData();
  KeyValueDataReply::default_instance_ = new KeyValueDataReply();
  GetAvatarUploadToken::default_instance_ = new GetAvatarUploadToken();
  GetAvatarUploadTokenReply::default_instance_ = new GetAvatarUploadTokenReply();
  Pay123MuaOrder::default_instance_ = new Pay123MuaOrder();
  Pay123MuaOrderReply::default_instance_ = new Pay123MuaOrderReply();
  TransactionFee::default_instance_ = new TransactionFee();
  GetTransactionFee::default_instance_ = new GetTransactionFee();
  GetTransactionFeeReply::default_instance_ = new GetTransactionFeeReply();
  PayAirlineTicket::default_instance_ = new PayAirlineTicket();
  PayAirlineTicketReply::default_instance_ = new PayAirlineTicketReply();
  WithdrawByAgent::default_instance_ = new WithdrawByAgent();
  WithdrawByAgentReply::default_instance_ = new WithdrawByAgentReply();
  SendSms::default_instance_ = new SendSms();
  SendSmsReply::default_instance_ = new SendSmsReply();
  BankOutManual::default_instance_ = new BankOutManual();
  BankOutManualReply::default_instance_ = new BankOutManualReply();
  IsMomoer::default_instance_ = new IsMomoer();
  IsMomoerReply::default_instance_ = new IsMomoerReply();
  CountAgentTran::default_instance_ = new CountAgentTran();
  CountAgentTranReply::default_instance_ = new CountAgentTranReply();
  GetServiceLayout::default_instance_ = new GetServiceLayout();
  GetServicelayoutReply::default_instance_ = new GetServicelayoutReply();
  CompeleteTran::default_instance_ = new CompeleteTran();
  MakeTranReply::default_instance_ = new MakeTranReply();
  Error::default_instance_->InitAsDefaultInstance();
  SendOtp::default_instance_->InitAsDefaultInstance();
  SendOtpReply::default_instance_->InitAsDefaultInstance();
  VerifyOtp::default_instance_->InitAsDefaultInstance();
  VerifyOtpReply::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  RegisterReply::default_instance_->InitAsDefaultInstance();
  GetAgentInfo::default_instance_->InitAsDefaultInstance();
  GetAgentInfoReply::default_instance_->InitAsDefaultInstance();
  IsPinCorrect::default_instance_->InitAsDefaultInstance();
  IsPinCorrectReply::default_instance_->InitAsDefaultInstance();
  ChangePin::default_instance_->InitAsDefaultInstance();
  ChangePinReply::default_instance_->InitAsDefaultInstance();
  UpdateAgentInfo::default_instance_->InitAsDefaultInstance();
  UpdateAgentInfoReply::default_instance_->InitAsDefaultInstance();
  Article::default_instance_->InitAsDefaultInstance();
  ModifyArticle::default_instance_->InitAsDefaultInstance();
  ModifyArticleReply::default_instance_->InitAsDefaultInstance();
  GetArticlePage::default_instance_->InitAsDefaultInstance();
  GetArticlePageReply::default_instance_->InitAsDefaultInstance();
  BankAccount::default_instance_->InitAsDefaultInstance();
  ModifyBankAccount::default_instance_->InitAsDefaultInstance();
  ModifyBankAccountReply::default_instance_->InitAsDefaultInstance();
  GetAgentBankAccounts::default_instance_->InitAsDefaultInstance();
  GetAgentBankAccountsReply::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  GetTransaction::default_instance_->InitAsDefaultInstance();
  GetTransactionReply::default_instance_->InitAsDefaultInstance();
  GetTransactionDetail::default_instance_->InitAsDefaultInstance();
  GetTransactionDetailReply::default_instance_->InitAsDefaultInstance();
  Topup::default_instance_->InitAsDefaultInstance();
  TopupReply::default_instance_->InitAsDefaultInstance();
  TopupGame::default_instance_->InitAsDefaultInstance();
  TopupGameReply::default_instance_->InitAsDefaultInstance();
  TransferM2m::default_instance_->InitAsDefaultInstance();
  TransferM2mReply::default_instance_->InitAsDefaultInstance();
  TransferM2c::default_instance_->InitAsDefaultInstance();
  TransferM2cReply::default_instance_->InitAsDefaultInstance();
  DepositWithdrawAtPlace::default_instance_->InitAsDefaultInstance();
  DepositWithdrawAtPlaceReply::default_instance_->InitAsDefaultInstance();
  BillDetail::default_instance_->InitAsDefaultInstance();
  GetBillInfo::default_instance_->InitAsDefaultInstance();
  GetBillInfoReply::default_instance_->InitAsDefaultInstance();
  PayBill::default_instance_->InitAsDefaultInstance();
  PayBillReply::default_instance_->InitAsDefaultInstance();
  Bill::default_instance_->InitAsDefaultInstance();
  SaveBill::default_instance_->InitAsDefaultInstance();
  SaveBillReply::default_instance_->InitAsDefaultInstance();
  GetSavedBill::default_instance_->InitAsDefaultInstance();
  GetSavedBillReply::default_instance_->InitAsDefaultInstance();
  RemoveSavedBill::default_instance_->InitAsDefaultInstance();
  RemoveSavedBillReply::default_instance_->InitAsDefaultInstance();
  BankIn::default_instance_->InitAsDefaultInstance();
  BankInReply::default_instance_->InitAsDefaultInstance();
  BankOut::default_instance_->InitAsDefaultInstance();
  BankOutReply::default_instance_->InitAsDefaultInstance();
  BanknetToMomo::default_instance_->InitAsDefaultInstance();
  BanknetToMomoReply::default_instance_->InitAsDefaultInstance();
  VerifyBanknetOtp::default_instance_->InitAsDefaultInstance();
  VerifyBanknetOtpReply::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  StoreInfo::default_instance_->InitAsDefaultInstance();
  GetStoreAround::default_instance_->InitAsDefaultInstance();
  GetStoreAroundReply::default_instance_->InitAsDefaultInstance();
  GetStoreByCode::default_instance_->InitAsDefaultInstance();
  GetStoreByCodeReply::default_instance_->InitAsDefaultInstance();
  KeyValueData::default_instance_->InitAsDefaultInstance();
  KeyValueDataReply::default_instance_->InitAsDefaultInstance();
  GetAvatarUploadToken::default_instance_->InitAsDefaultInstance();
  GetAvatarUploadTokenReply::default_instance_->InitAsDefaultInstance();
  Pay123MuaOrder::default_instance_->InitAsDefaultInstance();
  Pay123MuaOrderReply::default_instance_->InitAsDefaultInstance();
  TransactionFee::default_instance_->InitAsDefaultInstance();
  GetTransactionFee::default_instance_->InitAsDefaultInstance();
  GetTransactionFeeReply::default_instance_->InitAsDefaultInstance();
  PayAirlineTicket::default_instance_->InitAsDefaultInstance();
  PayAirlineTicketReply::default_instance_->InitAsDefaultInstance();
  WithdrawByAgent::default_instance_->InitAsDefaultInstance();
  WithdrawByAgentReply::default_instance_->InitAsDefaultInstance();
  SendSms::default_instance_->InitAsDefaultInstance();
  SendSmsReply::default_instance_->InitAsDefaultInstance();
  BankOutManual::default_instance_->InitAsDefaultInstance();
  BankOutManualReply::default_instance_->InitAsDefaultInstance();
  IsMomoer::default_instance_->InitAsDefaultInstance();
  IsMomoerReply::default_instance_->InitAsDefaultInstance();
  CountAgentTran::default_instance_->InitAsDefaultInstance();
  CountAgentTranReply::default_instance_->InitAsDefaultInstance();
  GetServiceLayout::default_instance_->InitAsDefaultInstance();
  GetServicelayoutReply::default_instance_->InitAsDefaultInstance();
  CompeleteTran::default_instance_->InitAsDefaultInstance();
  MakeTranReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdModels_2eproto {
  StaticDescriptorInitializer_CmdModels_2eproto() {
    protobuf_AddDesc_CmdModels_2eproto();
  }
} static_descriptor_initializer_CmdModels_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MoneyResource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyResource_descriptor_;
}
bool MoneyResource_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatus_descriptor_;
}
bool TransactionStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransactionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionType_descriptor_;
}
bool TransactionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kCodeFieldNumber;
const int Error::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->code(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->code(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendOtp::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

SendOtp::SendOtp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendOtp::InitAsDefaultInstance() {
}

SendOtp::SendOtp(const SendOtp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendOtp::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendOtp::~SendOtp() {
  SharedDtor();
}

void SendOtp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendOtp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendOtp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendOtp_descriptor_;
}

const SendOtp& SendOtp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

SendOtp* SendOtp::default_instance_ = NULL;

SendOtp* SendOtp::New() const {
  return new SendOtp;
}

void SendOtp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendOtp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendOtp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendOtp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendOtp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendOtp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendOtp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendOtp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendOtp::MergeFrom(const SendOtp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendOtp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOtp::CopyFrom(const SendOtp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOtp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendOtp::Swap(SendOtp* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendOtp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendOtp_descriptor_;
  metadata.reflection = SendOtp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendOtpReply::kPhoneNumberFieldNumber;
const int SendOtpReply::kOtpFieldNumber;
#endif  // !_MSC_VER

SendOtpReply::SendOtpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendOtpReply::InitAsDefaultInstance() {
}

SendOtpReply::SendOtpReply(const SendOtpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendOtpReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendOtpReply::~SendOtpReply() {
  SharedDtor();
}

void SendOtpReply::SharedDtor() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (this != default_instance_) {
  }
}

void SendOtpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendOtpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendOtpReply_descriptor_;
}

const SendOtpReply& SendOtpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

SendOtpReply* SendOtpReply::default_instance_ = NULL;

SendOtpReply* SendOtpReply::New() const {
  return new SendOtpReply;
}

void SendOtpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendOtpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otp;
        break;
      }

      // required string otp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendOtpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->otp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendOtpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->otp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendOtpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string otp = 2;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendOtpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendOtpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendOtpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendOtpReply::MergeFrom(const SendOtpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendOtpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOtpReply::CopyFrom(const SendOtpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOtpReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendOtpReply::Swap(SendOtpReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(otp_, other->otp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendOtpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendOtpReply_descriptor_;
  metadata.reflection = SendOtpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyOtp::kPhoneNumberFieldNumber;
const int VerifyOtp::kOtpFieldNumber;
#endif  // !_MSC_VER

VerifyOtp::VerifyOtp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyOtp::InitAsDefaultInstance() {
}

VerifyOtp::VerifyOtp(const VerifyOtp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyOtp::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyOtp::~VerifyOtp() {
  SharedDtor();
}

void VerifyOtp::SharedDtor() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (this != default_instance_) {
  }
}

void VerifyOtp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyOtp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyOtp_descriptor_;
}

const VerifyOtp& VerifyOtp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

VerifyOtp* VerifyOtp::default_instance_ = NULL;

VerifyOtp* VerifyOtp::New() const {
  return new VerifyOtp;
}

void VerifyOtp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyOtp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otp;
        break;
      }

      // required string otp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyOtp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->otp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyOtp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->otp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyOtp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string otp = 2;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyOtp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyOtp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyOtp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyOtp::MergeFrom(const VerifyOtp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyOtp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyOtp::CopyFrom(const VerifyOtp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyOtp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VerifyOtp::Swap(VerifyOtp* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(otp_, other->otp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyOtp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyOtp_descriptor_;
  metadata.reflection = VerifyOtp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VerifyOtpReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyOtpReply_ResultCode_descriptor_;
}
bool VerifyOtpReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VerifyOtpReply_ResultCode VerifyOtpReply::SUCCESS;
const VerifyOtpReply_ResultCode VerifyOtpReply::NOT_MATCH;
const VerifyOtpReply_ResultCode VerifyOtpReply::OUT_OF_TIME;
const VerifyOtpReply_ResultCode VerifyOtpReply::ResultCode_MIN;
const VerifyOtpReply_ResultCode VerifyOtpReply::ResultCode_MAX;
const int VerifyOtpReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VerifyOtpReply::kPhoneNumberFieldNumber;
const int VerifyOtpReply::kResultFieldNumber;
#endif  // !_MSC_VER

VerifyOtpReply::VerifyOtpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyOtpReply::InitAsDefaultInstance() {
}

VerifyOtpReply::VerifyOtpReply(const VerifyOtpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyOtpReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyOtpReply::~VerifyOtpReply() {
  SharedDtor();
}

void VerifyOtpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyOtpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyOtpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyOtpReply_descriptor_;
}

const VerifyOtpReply& VerifyOtpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

VerifyOtpReply* VerifyOtpReply::default_instance_ = NULL;

VerifyOtpReply* VerifyOtpReply::New() const {
  return new VerifyOtpReply;
}

void VerifyOtpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyOtpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.VerifyOtpReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::VerifyOtpReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::VerifyOtpReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyOtpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.VerifyOtpReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyOtpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.VerifyOtpReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyOtpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.VerifyOtpReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyOtpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyOtpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyOtpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyOtpReply::MergeFrom(const VerifyOtpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyOtpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyOtpReply::CopyFrom(const VerifyOtpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyOtpReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VerifyOtpReply::Swap(VerifyOtpReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyOtpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyOtpReply_descriptor_;
  metadata.reflection = VerifyOtpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kPhoneNumberFieldNumber;
const int Register::kNameFieldNumber;
const int Register::kCardIdFieldNumber;
const int Register::kPinFieldNumber;
const int Register::kEmailFieldNumber;
const int Register::kQuestionFieldNumber;
const int Register::kAnswerFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::kEmptyString) {
        question_->clear();
      }
    }
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::kEmptyString) {
        answer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardId;
        break;
      }

      // required string cardId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pin;
        break;
      }

      // required string pin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_question;
        break;
      }

      // optional string question = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_answer;
        break;
      }

      // optional string answer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardid(), output);
  }

  // required string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pin(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email(), output);
  }

  // optional string question = 6;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->question(), output);
  }

  // optional string answer = 7;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardid(), target);
  }

  // required string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pin(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional string question = 6;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->question(), target);
  }

  // optional string answer = 7;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string cardId = 3;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

    // required string pin = 4;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string question = 6;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string answer = 7;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(name_, other->name_);
    std::swap(cardid_, other->cardid_);
    std::swap(pin_, other->pin_);
    std::swap(email_, other->email_);
    std::swap(question_, other->question_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegisterReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterReply_ResultCode_descriptor_;
}
bool RegisterReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegisterReply_ResultCode RegisterReply::SUCCESS;
const RegisterReply_ResultCode RegisterReply::NUMBER_EXISTED;
const RegisterReply_ResultCode RegisterReply::ResultCode_MIN;
const RegisterReply_ResultCode RegisterReply::ResultCode_MAX;
const int RegisterReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegisterReply::kPhoneNumberFieldNumber;
const int RegisterReply::kResultFieldNumber;
#endif  // !_MSC_VER

RegisterReply::RegisterReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterReply::InitAsDefaultInstance() {
}

RegisterReply::RegisterReply(const RegisterReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterReply::~RegisterReply() {
  SharedDtor();
}

void RegisterReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterReply_descriptor_;
}

const RegisterReply& RegisterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

RegisterReply* RegisterReply::default_instance_ = NULL;

RegisterReply* RegisterReply::New() const {
  return new RegisterReply;
}

void RegisterReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.RegisterReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::RegisterReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::RegisterReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.RegisterReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.RegisterReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.RegisterReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterReply::MergeFrom(const RegisterReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterReply::CopyFrom(const RegisterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegisterReply::Swap(RegisterReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterReply_descriptor_;
  metadata.reflection = RegisterReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAgentInfo::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

GetAgentInfo::GetAgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAgentInfo::InitAsDefaultInstance() {
}

GetAgentInfo::GetAgentInfo(const GetAgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAgentInfo::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAgentInfo::~GetAgentInfo() {
  SharedDtor();
}

void GetAgentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAgentInfo_descriptor_;
}

const GetAgentInfo& GetAgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetAgentInfo* GetAgentInfo::default_instance_ = NULL;

GetAgentInfo* GetAgentInfo::New() const {
  return new GetAgentInfo;
}

void GetAgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAgentInfo::MergeFrom(const GetAgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentInfo::CopyFrom(const GetAgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAgentInfo::Swap(GetAgentInfo* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAgentInfo_descriptor_;
  metadata.reflection = GetAgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAgentInfoReply::kPhoneNumberFieldNumber;
const int GetAgentInfoReply::kNameFieldNumber;
const int GetAgentInfoReply::kCardIdFieldNumber;
const int GetAgentInfoReply::kPinFieldNumber;
const int GetAgentInfoReply::kEmailFieldNumber;
const int GetAgentInfoReply::kQuestionFieldNumber;
const int GetAgentInfoReply::kAnswerFieldNumber;
const int GetAgentInfoReply::kBankAccountFieldNumber;
const int GetAgentInfoReply::kBankCodeFieldNumber;
const int GetAgentInfoReply::kBankNameFieldNumber;
const int GetAgentInfoReply::kPointFieldNumber;
const int GetAgentInfoReply::kMomoFieldNumber;
const int GetAgentInfoReply::kMloadFieldNumber;
const int GetAgentInfoReply::kIsNamedAccountFieldNumber;
const int GetAgentInfoReply::kIsActiveFieldNumber;
const int GetAgentInfoReply::kBirthdayFieldNumber;
const int GetAgentInfoReply::kAddressFieldNumber;
const int GetAgentInfoReply::kCreatedDateFieldNumber;
#endif  // !_MSC_VER

GetAgentInfoReply::GetAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAgentInfoReply::InitAsDefaultInstance() {
}

GetAgentInfoReply::GetAgentInfoReply(const GetAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  point_ = GOOGLE_ULONGLONG(0);
  momo_ = GOOGLE_ULONGLONG(0);
  mload_ = GOOGLE_ULONGLONG(0);
  isnamedaccount_ = false;
  isactive_ = false;
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createddate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAgentInfoReply::~GetAgentInfoReply() {
  SharedDtor();
}

void GetAgentInfoReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bankaccount_;
  }
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcode_;
  }
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankname_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void GetAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAgentInfoReply_descriptor_;
}

const GetAgentInfoReply& GetAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetAgentInfoReply* GetAgentInfoReply::default_instance_ = NULL;

GetAgentInfoReply* GetAgentInfoReply::New() const {
  return new GetAgentInfoReply;
}

void GetAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::kEmptyString) {
        question_->clear();
      }
    }
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::kEmptyString) {
        answer_->clear();
      }
    }
    if (has_bankaccount()) {
      if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
        bankaccount_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bankcode()) {
      if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
        bankcode_->clear();
      }
    }
    if (has_bankname()) {
      if (bankname_ != &::google::protobuf::internal::kEmptyString) {
        bankname_->clear();
      }
    }
    point_ = GOOGLE_ULONGLONG(0);
    momo_ = GOOGLE_ULONGLONG(0);
    mload_ = GOOGLE_ULONGLONG(0);
    isnamedaccount_ = false;
    isactive_ = false;
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    createddate_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardId;
        break;
      }

      // optional string cardId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pin;
        break;
      }

      // optional string pin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_question;
        break;
      }

      // optional string question = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_answer;
        break;
      }

      // optional string answer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bankAccount;
        break;
      }

      // optional string bankAccount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankaccount().data(), this->bankaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bankCode;
        break;
      }

      // optional string bankCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcode().data(), this->bankcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bankName;
        break;
      }

      // optional string bankName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankname().data(), this->bankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_point;
        break;
      }

      // optional uint64 point = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_momo;
        break;
      }

      // optional uint64 momo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &momo_)));
          set_has_momo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mload;
        break;
      }

      // optional uint64 mload = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mload_)));
          set_has_mload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isNamedAccount;
        break;
      }

      // optional bool isNamedAccount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNamedAccount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnamedaccount_)));
          set_has_isnamedaccount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isActive;
        break;
      }

      // optional bool isActive = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_birthday;
        break;
      }

      // optional string birthday = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_address;
        break;
      }

      // optional string address = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_createdDate;
        break;
      }

      // optional uint64 createdDate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createdDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createddate_)));
          set_has_createddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardid(), output);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pin(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email(), output);
  }

  // optional string question = 6;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->question(), output);
  }

  // optional string answer = 7;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->answer(), output);
  }

  // optional string bankAccount = 8;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankaccount().data(), this->bankaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->bankaccount(), output);
  }

  // optional string bankCode = 9;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcode().data(), this->bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bankcode(), output);
  }

  // optional string bankName = 10;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->bankname(), output);
  }

  // optional uint64 point = 11;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->point(), output);
  }

  // optional uint64 momo = 12;
  if (has_momo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->momo(), output);
  }

  // optional uint64 mload = 13;
  if (has_mload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->mload(), output);
  }

  // optional bool isNamedAccount = 14;
  if (has_isnamedaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isnamedaccount(), output);
  }

  // optional bool isActive = 15;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isactive(), output);
  }

  // optional string birthday = 16;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->birthday(), output);
  }

  // optional string address = 17;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->address(), output);
  }

  // optional uint64 createdDate = 18;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->createddate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardid(), target);
  }

  // optional string pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pin(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional string question = 6;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->question(), target);
  }

  // optional string answer = 7;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->answer(), target);
  }

  // optional string bankAccount = 8;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankaccount().data(), this->bankaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bankaccount(), target);
  }

  // optional string bankCode = 9;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcode().data(), this->bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bankcode(), target);
  }

  // optional string bankName = 10;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bankname(), target);
  }

  // optional uint64 point = 11;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->point(), target);
  }

  // optional uint64 momo = 12;
  if (has_momo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->momo(), target);
  }

  // optional uint64 mload = 13;
  if (has_mload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->mload(), target);
  }

  // optional bool isNamedAccount = 14;
  if (has_isnamedaccount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isnamedaccount(), target);
  }

  // optional bool isActive = 15;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isactive(), target);
  }

  // optional string birthday = 16;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->birthday(), target);
  }

  // optional string address = 17;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->address(), target);
  }

  // optional uint64 createdDate = 18;
  if (has_createddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->createddate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAgentInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cardId = 3;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

    // optional string pin = 4;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string question = 6;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string answer = 7;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

    // optional string bankAccount = 8;
    if (has_bankaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankaccount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bankCode = 9;
    if (has_bankcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcode());
    }

    // optional string bankName = 10;
    if (has_bankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankname());
    }

    // optional uint64 point = 11;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->point());
    }

    // optional uint64 momo = 12;
    if (has_momo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->momo());
    }

    // optional uint64 mload = 13;
    if (has_mload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mload());
    }

    // optional bool isNamedAccount = 14;
    if (has_isnamedaccount()) {
      total_size += 1 + 1;
    }

    // optional bool isActive = 15;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional string birthday = 16;
    if (has_birthday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string address = 17;
    if (has_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint64 createdDate = 18;
    if (has_createddate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createddate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAgentInfoReply::MergeFrom(const GetAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_bankaccount()) {
      set_bankaccount(from.bankaccount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankcode()) {
      set_bankcode(from.bankcode());
    }
    if (from.has_bankname()) {
      set_bankname(from.bankname());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_momo()) {
      set_momo(from.momo());
    }
    if (from.has_mload()) {
      set_mload(from.mload());
    }
    if (from.has_isnamedaccount()) {
      set_isnamedaccount(from.isnamedaccount());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_createddate()) {
      set_createddate(from.createddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentInfoReply::CopyFrom(const GetAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAgentInfoReply::Swap(GetAgentInfoReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(name_, other->name_);
    std::swap(cardid_, other->cardid_);
    std::swap(pin_, other->pin_);
    std::swap(email_, other->email_);
    std::swap(question_, other->question_);
    std::swap(answer_, other->answer_);
    std::swap(bankaccount_, other->bankaccount_);
    std::swap(bankcode_, other->bankcode_);
    std::swap(bankname_, other->bankname_);
    std::swap(point_, other->point_);
    std::swap(momo_, other->momo_);
    std::swap(mload_, other->mload_);
    std::swap(isnamedaccount_, other->isnamedaccount_);
    std::swap(isactive_, other->isactive_);
    std::swap(birthday_, other->birthday_);
    std::swap(address_, other->address_);
    std::swap(createddate_, other->createddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAgentInfoReply_descriptor_;
  metadata.reflection = GetAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsPinCorrect::kPhoneNumberFieldNumber;
const int IsPinCorrect::kPinFieldNumber;
#endif  // !_MSC_VER

IsPinCorrect::IsPinCorrect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsPinCorrect::InitAsDefaultInstance() {
}

IsPinCorrect::IsPinCorrect(const IsPinCorrect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsPinCorrect::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsPinCorrect::~IsPinCorrect() {
  SharedDtor();
}

void IsPinCorrect::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void IsPinCorrect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsPinCorrect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsPinCorrect_descriptor_;
}

const IsPinCorrect& IsPinCorrect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

IsPinCorrect* IsPinCorrect::default_instance_ = NULL;

IsPinCorrect* IsPinCorrect::New() const {
  return new IsPinCorrect;
}

void IsPinCorrect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsPinCorrect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // optional string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsPinCorrect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // optional string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsPinCorrect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // optional string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsPinCorrect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // optional string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsPinCorrect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsPinCorrect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsPinCorrect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsPinCorrect::MergeFrom(const IsPinCorrect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsPinCorrect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPinCorrect::CopyFrom(const IsPinCorrect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPinCorrect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsPinCorrect::Swap(IsPinCorrect* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsPinCorrect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsPinCorrect_descriptor_;
  metadata.reflection = IsPinCorrect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IsPinCorrectReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsPinCorrectReply_ResultCode_descriptor_;
}
bool IsPinCorrectReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IsPinCorrectReply_ResultCode IsPinCorrectReply::CORRECT;
const IsPinCorrectReply_ResultCode IsPinCorrectReply::INCORRECT;
const IsPinCorrectReply_ResultCode IsPinCorrectReply::AUTH_EXPIRED;
const IsPinCorrectReply_ResultCode IsPinCorrectReply::AUTH_RETRY_EXCEED;
const IsPinCorrectReply_ResultCode IsPinCorrectReply::ResultCode_MIN;
const IsPinCorrectReply_ResultCode IsPinCorrectReply::ResultCode_MAX;
const int IsPinCorrectReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IsPinCorrectReply::kPhoneNumberFieldNumber;
const int IsPinCorrectReply::kResultFieldNumber;
const int IsPinCorrectReply::kLocktillFieldNumber;
#endif  // !_MSC_VER

IsPinCorrectReply::IsPinCorrectReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsPinCorrectReply::InitAsDefaultInstance() {
}

IsPinCorrectReply::IsPinCorrectReply(const IsPinCorrectReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsPinCorrectReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  locktill_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsPinCorrectReply::~IsPinCorrectReply() {
  SharedDtor();
}

void IsPinCorrectReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsPinCorrectReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsPinCorrectReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsPinCorrectReply_descriptor_;
}

const IsPinCorrectReply& IsPinCorrectReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

IsPinCorrectReply* IsPinCorrectReply::default_instance_ = NULL;

IsPinCorrectReply* IsPinCorrectReply::New() const {
  return new IsPinCorrectReply;
}

void IsPinCorrectReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    locktill_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsPinCorrectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.IsPinCorrectReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::IsPinCorrectReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::IsPinCorrectReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_locktill;
        break;
      }

      // optional uint64 locktill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locktill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &locktill_)));
          set_has_locktill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsPinCorrectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.IsPinCorrectReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint64 locktill = 3;
  if (has_locktill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->locktill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsPinCorrectReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.IsPinCorrectReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint64 locktill = 3;
  if (has_locktill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->locktill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsPinCorrectReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.IsPinCorrectReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint64 locktill = 3;
    if (has_locktill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->locktill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsPinCorrectReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsPinCorrectReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsPinCorrectReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsPinCorrectReply::MergeFrom(const IsPinCorrectReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_locktill()) {
      set_locktill(from.locktill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsPinCorrectReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPinCorrectReply::CopyFrom(const IsPinCorrectReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPinCorrectReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IsPinCorrectReply::Swap(IsPinCorrectReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(locktill_, other->locktill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsPinCorrectReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsPinCorrectReply_descriptor_;
  metadata.reflection = IsPinCorrectReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePin::kPhoneNumberFieldNumber;
const int ChangePin::kOldPinFieldNumber;
const int ChangePin::kNewPinFieldNumber;
#endif  // !_MSC_VER

ChangePin::ChangePin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePin::InitAsDefaultInstance() {
}

ChangePin::ChangePin(const ChangePin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePin::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  oldpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePin::~ChangePin() {
  SharedDtor();
}

void ChangePin::SharedDtor() {
  if (oldpin_ != &::google::protobuf::internal::kEmptyString) {
    delete oldpin_;
  }
  if (newpin_ != &::google::protobuf::internal::kEmptyString) {
    delete newpin_;
  }
  if (this != default_instance_) {
  }
}

void ChangePin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePin_descriptor_;
}

const ChangePin& ChangePin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

ChangePin* ChangePin::default_instance_ = NULL;

ChangePin* ChangePin::New() const {
  return new ChangePin;
}

void ChangePin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_oldpin()) {
      if (oldpin_ != &::google::protobuf::internal::kEmptyString) {
        oldpin_->clear();
      }
    }
    if (has_newpin()) {
      if (newpin_ != &::google::protobuf::internal::kEmptyString) {
        newpin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldPin;
        break;
      }

      // required string oldPin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldPin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldpin().data(), this->oldpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newPin;
        break;
      }

      // required string newPin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newPin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newpin().data(), this->newpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string oldPin = 2;
  if (has_oldpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldpin().data(), this->oldpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oldpin(), output);
  }

  // required string newPin = 3;
  if (has_newpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpin().data(), this->newpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newpin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string oldPin = 2;
  if (has_oldpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldpin().data(), this->oldpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oldpin(), target);
  }

  // required string newPin = 3;
  if (has_newpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpin().data(), this->newpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newpin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string oldPin = 2;
    if (has_oldpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldpin());
    }

    // required string newPin = 3;
    if (has_newpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePin::MergeFrom(const ChangePin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_oldpin()) {
      set_oldpin(from.oldpin());
    }
    if (from.has_newpin()) {
      set_newpin(from.newpin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePin::CopyFrom(const ChangePin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChangePin::Swap(ChangePin* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(oldpin_, other->oldpin_);
    std::swap(newpin_, other->newpin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePin_descriptor_;
  metadata.reflection = ChangePin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangePinReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePinReply_ResultCode_descriptor_;
}
bool ChangePinReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangePinReply_ResultCode ChangePinReply::SUCCESS;
const ChangePinReply_ResultCode ChangePinReply::PIN_INCORRECT;
const ChangePinReply_ResultCode ChangePinReply::BAD_PASSWORD;
const ChangePinReply_ResultCode ChangePinReply::SAME_PASSWORD;
const ChangePinReply_ResultCode ChangePinReply::PASSWORD_PREVIOUS_USED;
const ChangePinReply_ResultCode ChangePinReply::ResultCode_MIN;
const ChangePinReply_ResultCode ChangePinReply::ResultCode_MAX;
const int ChangePinReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangePinReply::kPhoneNumberFieldNumber;
const int ChangePinReply::kResultFieldNumber;
#endif  // !_MSC_VER

ChangePinReply::ChangePinReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePinReply::InitAsDefaultInstance() {
}

ChangePinReply::ChangePinReply(const ChangePinReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePinReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePinReply::~ChangePinReply() {
  SharedDtor();
}

void ChangePinReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangePinReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePinReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePinReply_descriptor_;
}

const ChangePinReply& ChangePinReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

ChangePinReply* ChangePinReply::default_instance_ = NULL;

ChangePinReply* ChangePinReply::New() const {
  return new ChangePinReply;
}

void ChangePinReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.ChangePinReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::ChangePinReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::ChangePinReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.ChangePinReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePinReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.ChangePinReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePinReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.ChangePinReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePinReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePinReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePinReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePinReply::MergeFrom(const ChangePinReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePinReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePinReply::CopyFrom(const ChangePinReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePinReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangePinReply::Swap(ChangePinReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePinReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePinReply_descriptor_;
  metadata.reflection = ChangePinReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAgentInfo::kPhoneNumberFieldNumber;
const int UpdateAgentInfo::kNameFieldNumber;
const int UpdateAgentInfo::kAddressFieldNumber;
const int UpdateAgentInfo::kEmailFieldNumber;
const int UpdateAgentInfo::kCardIdFieldNumber;
const int UpdateAgentInfo::kDobFieldNumber;
#endif  // !_MSC_VER

UpdateAgentInfo::UpdateAgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAgentInfo::InitAsDefaultInstance() {
}

UpdateAgentInfo::UpdateAgentInfo(const UpdateAgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAgentInfo::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAgentInfo::~UpdateAgentInfo() {
  SharedDtor();
}

void UpdateAgentInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (dob_ != &::google::protobuf::internal::kEmptyString) {
    delete dob_;
  }
  if (this != default_instance_) {
  }
}

void UpdateAgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAgentInfo_descriptor_;
}

const UpdateAgentInfo& UpdateAgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

UpdateAgentInfo* UpdateAgentInfo::default_instance_ = NULL;

UpdateAgentInfo* UpdateAgentInfo::New() const {
  return new UpdateAgentInfo;
}

void UpdateAgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    if (has_dob()) {
      if (dob_ != &::google::protobuf::internal::kEmptyString) {
        dob_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cardId;
        break;
      }

      // optional string cardId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dob;
        break;
      }

      // optional string dob = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dob().data(), this->dob().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional string cardId = 5;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cardid(), output);
  }

  // optional string dob = 6;
  if (has_dob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dob().data(), this->dob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // optional string cardId = 5;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cardid(), target);
  }

  // optional string dob = 6;
  if (has_dob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dob().data(), this->dob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string cardId = 5;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

    // optional string dob = 6;
    if (has_dob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAgentInfo::MergeFrom(const UpdateAgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_dob()) {
      set_dob(from.dob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAgentInfo::CopyFrom(const UpdateAgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateAgentInfo::Swap(UpdateAgentInfo* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(email_, other->email_);
    std::swap(cardid_, other->cardid_);
    std::swap(dob_, other->dob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAgentInfo_descriptor_;
  metadata.reflection = UpdateAgentInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UpdateAgentInfoReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAgentInfoReply_ResultCode_descriptor_;
}
bool UpdateAgentInfoReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply::SUCCESS;
const UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply::FAIL;
const UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply::ResultCode_MIN;
const UpdateAgentInfoReply_ResultCode UpdateAgentInfoReply::ResultCode_MAX;
const int UpdateAgentInfoReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateAgentInfoReply::kPhoneNumberFieldNumber;
const int UpdateAgentInfoReply::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateAgentInfoReply::UpdateAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAgentInfoReply::InitAsDefaultInstance() {
}

UpdateAgentInfoReply::UpdateAgentInfoReply(const UpdateAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAgentInfoReply::~UpdateAgentInfoReply() {
  SharedDtor();
}

void UpdateAgentInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAgentInfoReply_descriptor_;
}

const UpdateAgentInfoReply& UpdateAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

UpdateAgentInfoReply* UpdateAgentInfoReply::default_instance_ = NULL;

UpdateAgentInfoReply* UpdateAgentInfoReply::New() const {
  return new UpdateAgentInfoReply;
}

void UpdateAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.UpdateAgentInfoReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::UpdateAgentInfoReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.UpdateAgentInfoReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.UpdateAgentInfoReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAgentInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.UpdateAgentInfoReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAgentInfoReply::MergeFrom(const UpdateAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAgentInfoReply::CopyFrom(const UpdateAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAgentInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateAgentInfoReply::Swap(UpdateAgentInfoReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAgentInfoReply_descriptor_;
  metadata.reflection = UpdateAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Article::kIdFieldNumber;
const int Article::kActiveFieldNumber;
const int Article::kPostDateFieldNumber;
const int Article::kTitleFieldNumber;
const int Article::kSummaryFieldNumber;
const int Article::kDetailFieldNumber;
#endif  // !_MSC_VER

Article::Article()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Article::InitAsDefaultInstance() {
}

Article::Article(const Article& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Article::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_ = false;
  postdate_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Article::~Article() {
  SharedDtor();
}

void Article::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    delete summary_;
  }
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_;
  }
  if (this != default_instance_) {
  }
}

void Article::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Article::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Article_descriptor_;
}

const Article& Article::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Article* Article::default_instance_ = NULL;

Article* Article::New() const {
  return new Article;
}

void Article::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    active_ = false;
    postdate_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::kEmptyString) {
        summary_->clear();
      }
    }
    if (has_detail()) {
      if (detail_ != &::google::protobuf::internal::kEmptyString) {
        detail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Article::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_postDate;
        break;
      }

      // optional uint64 postDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &postdate_)));
          set_has_postdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_summary;
        break;
      }

      // optional string summary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_detail;
        break;
      }

      // optional string detail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Article::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // optional uint64 postDate = 3;
  if (has_postdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->postdate(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // optional string summary = 5;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->summary(), output);
  }

  // optional string detail = 6;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Article::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // optional uint64 postDate = 3;
  if (has_postdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->postdate(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string summary = 5;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->summary(), target);
  }

  // optional string detail = 6;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Article::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional uint64 postDate = 3;
    if (has_postdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->postdate());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string summary = 5;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string detail = 6;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Article::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Article* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Article*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Article::MergeFrom(const Article& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_postdate()) {
      set_postdate(from.postdate());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_detail()) {
      set_detail(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Article::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Article::CopyFrom(const Article& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {

  return true;
}

void Article::Swap(Article* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(active_, other->active_);
    std::swap(postdate_, other->postdate_);
    std::swap(title_, other->title_);
    std::swap(summary_, other->summary_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Article::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Article_descriptor_;
  metadata.reflection = Article_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModifyArticle_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyArticle_Command_descriptor_;
}
bool ModifyArticle_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModifyArticle_Command ModifyArticle::ADD;
const ModifyArticle_Command ModifyArticle::UPDATE;
const ModifyArticle_Command ModifyArticle::DELETE;
const ModifyArticle_Command ModifyArticle::Command_MIN;
const ModifyArticle_Command ModifyArticle::Command_MAX;
const int ModifyArticle::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModifyArticle::kCommandFieldNumber;
const int ModifyArticle::kArticleFieldNumber;
#endif  // !_MSC_VER

ModifyArticle::ModifyArticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyArticle::InitAsDefaultInstance() {
  article_ = const_cast< ::com::mservice::momo::msg::Article*>(&::com::mservice::momo::msg::Article::default_instance());
}

ModifyArticle::ModifyArticle(const ModifyArticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyArticle::SharedCtor() {
  _cached_size_ = 0;
  command_ = 1;
  article_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyArticle::~ModifyArticle() {
  SharedDtor();
}

void ModifyArticle::SharedDtor() {
  if (this != default_instance_) {
    delete article_;
  }
}

void ModifyArticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyArticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyArticle_descriptor_;
}

const ModifyArticle& ModifyArticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

ModifyArticle* ModifyArticle::default_instance_ = NULL;

ModifyArticle* ModifyArticle::New() const {
  return new ModifyArticle;
}

void ModifyArticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 1;
    if (has_article()) {
      if (article_ != NULL) article_->::com::mservice::momo::msg::Article::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyArticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.ModifyArticle.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::ModifyArticle_Command_IsValid(value)) {
            set_command(static_cast< ::com::mservice::momo::msg::ModifyArticle_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_article;
        break;
      }

      // required .com.mservice.momo.msg.Article article = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_article:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_article()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyArticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.ModifyArticle.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // required .com.mservice.momo.msg.Article article = 2;
  if (has_article()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->article(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyArticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.ModifyArticle.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // required .com.mservice.momo.msg.Article article = 2;
  if (has_article()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->article(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyArticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.ModifyArticle.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // required .com.mservice.momo.msg.Article article = 2;
    if (has_article()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->article());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyArticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyArticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyArticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyArticle::MergeFrom(const ModifyArticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_article()) {
      mutable_article()->::com::mservice::momo::msg::Article::MergeFrom(from.article());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyArticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyArticle::CopyFrom(const ModifyArticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyArticle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModifyArticle::Swap(ModifyArticle* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(article_, other->article_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyArticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyArticle_descriptor_;
  metadata.reflection = ModifyArticle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModifyArticleReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyArticleReply_ResultCode_descriptor_;
}
bool ModifyArticleReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModifyArticleReply_ResultCode ModifyArticleReply::SUCCESS;
const ModifyArticleReply_ResultCode ModifyArticleReply::NOT_FOUND;
const ModifyArticleReply_ResultCode ModifyArticleReply::ResultCode_MIN;
const ModifyArticleReply_ResultCode ModifyArticleReply::ResultCode_MAX;
const int ModifyArticleReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModifyArticleReply::kResultFieldNumber;
const int ModifyArticleReply::kArticleFieldNumber;
#endif  // !_MSC_VER

ModifyArticleReply::ModifyArticleReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyArticleReply::InitAsDefaultInstance() {
  article_ = const_cast< ::com::mservice::momo::msg::Article*>(&::com::mservice::momo::msg::Article::default_instance());
}

ModifyArticleReply::ModifyArticleReply(const ModifyArticleReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyArticleReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  article_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyArticleReply::~ModifyArticleReply() {
  SharedDtor();
}

void ModifyArticleReply::SharedDtor() {
  if (this != default_instance_) {
    delete article_;
  }
}

void ModifyArticleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyArticleReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyArticleReply_descriptor_;
}

const ModifyArticleReply& ModifyArticleReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

ModifyArticleReply* ModifyArticleReply::default_instance_ = NULL;

ModifyArticleReply* ModifyArticleReply::New() const {
  return new ModifyArticleReply;
}

void ModifyArticleReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_article()) {
      if (article_ != NULL) article_->::com::mservice::momo::msg::Article::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyArticleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.ModifyArticleReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::ModifyArticleReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::ModifyArticleReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_article;
        break;
      }

      // optional .com.mservice.momo.msg.Article article = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_article:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_article()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyArticleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.ModifyArticleReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .com.mservice.momo.msg.Article article = 3;
  if (has_article()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->article(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyArticleReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.ModifyArticleReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .com.mservice.momo.msg.Article article = 3;
  if (has_article()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->article(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyArticleReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.ModifyArticleReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .com.mservice.momo.msg.Article article = 3;
    if (has_article()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->article());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyArticleReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyArticleReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyArticleReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyArticleReply::MergeFrom(const ModifyArticleReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_article()) {
      mutable_article()->::com::mservice::momo::msg::Article::MergeFrom(from.article());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyArticleReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyArticleReply::CopyFrom(const ModifyArticleReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyArticleReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ModifyArticleReply::Swap(ModifyArticleReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(article_, other->article_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyArticleReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyArticleReply_descriptor_;
  metadata.reflection = ModifyArticleReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetArticlePage::kPageSizeFieldNumber;
const int GetArticlePage::kPageNumberFieldNumber;
#endif  // !_MSC_VER

GetArticlePage::GetArticlePage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetArticlePage::InitAsDefaultInstance() {
}

GetArticlePage::GetArticlePage(const GetArticlePage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetArticlePage::SharedCtor() {
  _cached_size_ = 0;
  pagesize_ = 0u;
  pagenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArticlePage::~GetArticlePage() {
  SharedDtor();
}

void GetArticlePage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetArticlePage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetArticlePage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetArticlePage_descriptor_;
}

const GetArticlePage& GetArticlePage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetArticlePage* GetArticlePage::default_instance_ = NULL;

GetArticlePage* GetArticlePage::New() const {
  return new GetArticlePage;
}

void GetArticlePage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagesize_ = 0u;
    pagenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetArticlePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pageSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageNumber;
        break;
      }

      // required uint32 pageNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenumber_)));
          set_has_pagenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetArticlePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pageSize = 1;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pagesize(), output);
  }

  // required uint32 pageNumber = 2;
  if (has_pagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pagenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetArticlePage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pageSize = 1;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pagesize(), target);
  }

  // required uint32 pageNumber = 2;
  if (has_pagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pagenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetArticlePage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pageSize = 1;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

    // required uint32 pageNumber = 2;
    if (has_pagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArticlePage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetArticlePage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetArticlePage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetArticlePage::MergeFrom(const GetArticlePage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_pagenumber()) {
      set_pagenumber(from.pagenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetArticlePage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArticlePage::CopyFrom(const GetArticlePage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArticlePage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetArticlePage::Swap(GetArticlePage* other) {
  if (other != this) {
    std::swap(pagesize_, other->pagesize_);
    std::swap(pagenumber_, other->pagenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetArticlePage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetArticlePage_descriptor_;
  metadata.reflection = GetArticlePage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetArticlePageReply::kPageCountFieldNumber;
const int GetArticlePageReply::kArticlesFieldNumber;
#endif  // !_MSC_VER

GetArticlePageReply::GetArticlePageReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetArticlePageReply::InitAsDefaultInstance() {
}

GetArticlePageReply::GetArticlePageReply(const GetArticlePageReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetArticlePageReply::SharedCtor() {
  _cached_size_ = 0;
  pagecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArticlePageReply::~GetArticlePageReply() {
  SharedDtor();
}

void GetArticlePageReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetArticlePageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetArticlePageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetArticlePageReply_descriptor_;
}

const GetArticlePageReply& GetArticlePageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetArticlePageReply* GetArticlePageReply::default_instance_ = NULL;

GetArticlePageReply* GetArticlePageReply::New() const {
  return new GetArticlePageReply;
}

void GetArticlePageReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagecount_ = 0u;
  }
  articles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetArticlePageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pageCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagecount_)));
          set_has_pagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_articles;
        break;
      }

      // repeated .com.mservice.momo.msg.Article articles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_articles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_articles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_articles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetArticlePageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pageCount = 1;
  if (has_pagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pagecount(), output);
  }

  // repeated .com.mservice.momo.msg.Article articles = 2;
  for (int i = 0; i < this->articles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->articles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetArticlePageReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pageCount = 1;
  if (has_pagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pagecount(), target);
  }

  // repeated .com.mservice.momo.msg.Article articles = 2;
  for (int i = 0; i < this->articles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->articles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetArticlePageReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pageCount = 1;
    if (has_pagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagecount());
    }

  }
  // repeated .com.mservice.momo.msg.Article articles = 2;
  total_size += 1 * this->articles_size();
  for (int i = 0; i < this->articles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->articles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArticlePageReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetArticlePageReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetArticlePageReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetArticlePageReply::MergeFrom(const GetArticlePageReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  articles_.MergeFrom(from.articles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagecount()) {
      set_pagecount(from.pagecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetArticlePageReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArticlePageReply::CopyFrom(const GetArticlePageReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArticlePageReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetArticlePageReply::Swap(GetArticlePageReply* other) {
  if (other != this) {
    std::swap(pagecount_, other->pagecount_);
    articles_.Swap(&other->articles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetArticlePageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetArticlePageReply_descriptor_;
  metadata.reflection = GetArticlePageReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankAccount::kPhoneNumberFieldNumber;
const int BankAccount::kAccountIdFieldNumber;
const int BankAccount::kBankNameFieldNumber;
const int BankAccount::kOwnerNameFieldNumber;
const int BankAccount::kCreatedDateFieldNumber;
const int BankAccount::kBankIdFieldNumber;
#endif  // !_MSC_VER

BankAccount::BankAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankAccount::InitAsDefaultInstance() {
}

BankAccount::BankAccount(const BankAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankAccount::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createddate_ = GOOGLE_ULONGLONG(0);
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankAccount::~BankAccount() {
  SharedDtor();
}

void BankAccount::SharedDtor() {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankname_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (this != default_instance_) {
  }
}

void BankAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankAccount_descriptor_;
}

const BankAccount& BankAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankAccount* BankAccount::default_instance_ = NULL;

BankAccount* BankAccount::New() const {
  return new BankAccount;
}

void BankAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    if (has_bankname()) {
      if (bankname_ != &::google::protobuf::internal::kEmptyString) {
        bankname_->clear();
      }
    }
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    createddate_ = GOOGLE_ULONGLONG(0);
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountId;
        break;
      }

      // required string accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bankName;
        break;
      }

      // optional string bankName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankname().data(), this->bankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ownerName;
        break;
      }

      // optional string ownerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_createdDate;
        break;
      }

      // optional uint64 createdDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createdDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createddate_)));
          set_has_createddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bankId;
        break;
      }

      // optional string bankId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 2;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->phonenumber(), output);
  }

  // required string accountId = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accountid(), output);
  }

  // optional string bankName = 4;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bankname(), output);
  }

  // optional string ownerName = 5;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ownername(), output);
  }

  // optional uint64 createdDate = 6;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createddate(), output);
  }

  // optional string bankId = 7;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->bankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 2;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->phonenumber(), target);
  }

  // required string accountId = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountid(), target);
  }

  // optional string bankName = 4;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bankname(), target);
  }

  // optional string ownerName = 5;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ownername(), target);
  }

  // optional uint64 createdDate = 6;
  if (has_createddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createddate(), target);
  }

  // optional string bankId = 7;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 2;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // optional string bankName = 4;
    if (has_bankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankname());
    }

    // optional string ownerName = 5;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

    // optional uint64 createdDate = 6;
    if (has_createddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createddate());
    }

    // optional string bankId = 7;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankAccount::MergeFrom(const BankAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_bankname()) {
      set_bankname(from.bankname());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_createddate()) {
      set_createddate(from.createddate());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankAccount::CopyFrom(const BankAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BankAccount::Swap(BankAccount* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(accountid_, other->accountid_);
    std::swap(bankname_, other->bankname_);
    std::swap(ownername_, other->ownername_);
    std::swap(createddate_, other->createddate_);
    std::swap(bankid_, other->bankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankAccount_descriptor_;
  metadata.reflection = BankAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModifyBankAccount_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBankAccount_Command_descriptor_;
}
bool ModifyBankAccount_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModifyBankAccount_Command ModifyBankAccount::ADD;
const ModifyBankAccount_Command ModifyBankAccount::UPDATE;
const ModifyBankAccount_Command ModifyBankAccount::DELETE;
const ModifyBankAccount_Command ModifyBankAccount::Command_MIN;
const ModifyBankAccount_Command ModifyBankAccount::Command_MAX;
const int ModifyBankAccount::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModifyBankAccount::kCommandFieldNumber;
const int ModifyBankAccount::kAccountFieldNumber;
#endif  // !_MSC_VER

ModifyBankAccount::ModifyBankAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyBankAccount::InitAsDefaultInstance() {
  account_ = const_cast< ::com::mservice::momo::msg::BankAccount*>(&::com::mservice::momo::msg::BankAccount::default_instance());
}

ModifyBankAccount::ModifyBankAccount(const ModifyBankAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBankAccount::SharedCtor() {
  _cached_size_ = 0;
  command_ = 1;
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBankAccount::~ModifyBankAccount() {
  SharedDtor();
}

void ModifyBankAccount::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void ModifyBankAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyBankAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBankAccount_descriptor_;
}

const ModifyBankAccount& ModifyBankAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

ModifyBankAccount* ModifyBankAccount::default_instance_ = NULL;

ModifyBankAccount* ModifyBankAccount::New() const {
  return new ModifyBankAccount;
}

void ModifyBankAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 1;
    if (has_account()) {
      if (account_ != NULL) account_->::com::mservice::momo::msg::BankAccount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBankAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.ModifyBankAccount.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::ModifyBankAccount_Command_IsValid(value)) {
            set_command(static_cast< ::com::mservice::momo::msg::ModifyBankAccount_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required .com.mservice.momo.msg.BankAccount account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBankAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.ModifyBankAccount.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // required .com.mservice.momo.msg.BankAccount account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBankAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.ModifyBankAccount.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // required .com.mservice.momo.msg.BankAccount account = 2;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBankAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.ModifyBankAccount.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // required .com.mservice.momo.msg.BankAccount account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyBankAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBankAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBankAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBankAccount::MergeFrom(const ModifyBankAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_account()) {
      mutable_account()->::com::mservice::momo::msg::BankAccount::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBankAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBankAccount::CopyFrom(const ModifyBankAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyBankAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  return true;
}

void ModifyBankAccount::Swap(ModifyBankAccount* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyBankAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyBankAccount_descriptor_;
  metadata.reflection = ModifyBankAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModifyBankAccountReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBankAccountReply_ResultCode_descriptor_;
}
bool ModifyBankAccountReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModifyBankAccountReply_ResultCode ModifyBankAccountReply::SUCCESS;
const ModifyBankAccountReply_ResultCode ModifyBankAccountReply::NOT_FOUND;
const ModifyBankAccountReply_ResultCode ModifyBankAccountReply::ResultCode_MIN;
const ModifyBankAccountReply_ResultCode ModifyBankAccountReply::ResultCode_MAX;
const int ModifyBankAccountReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModifyBankAccountReply::kResultFieldNumber;
const int ModifyBankAccountReply::kBankAccountFieldNumber;
#endif  // !_MSC_VER

ModifyBankAccountReply::ModifyBankAccountReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyBankAccountReply::InitAsDefaultInstance() {
  bankaccount_ = const_cast< ::com::mservice::momo::msg::BankAccount*>(&::com::mservice::momo::msg::BankAccount::default_instance());
}

ModifyBankAccountReply::ModifyBankAccountReply(const ModifyBankAccountReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBankAccountReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  bankaccount_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBankAccountReply::~ModifyBankAccountReply() {
  SharedDtor();
}

void ModifyBankAccountReply::SharedDtor() {
  if (this != default_instance_) {
    delete bankaccount_;
  }
}

void ModifyBankAccountReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyBankAccountReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBankAccountReply_descriptor_;
}

const ModifyBankAccountReply& ModifyBankAccountReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

ModifyBankAccountReply* ModifyBankAccountReply::default_instance_ = NULL;

ModifyBankAccountReply* ModifyBankAccountReply::New() const {
  return new ModifyBankAccountReply;
}

void ModifyBankAccountReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_bankaccount()) {
      if (bankaccount_ != NULL) bankaccount_->::com::mservice::momo::msg::BankAccount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBankAccountReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.ModifyBankAccountReply.ResultCode result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::ModifyBankAccountReply_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankAccount;
        break;
      }

      // optional .com.mservice.momo.msg.BankAccount bankAccount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bankaccount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBankAccountReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.ModifyBankAccountReply.ResultCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .com.mservice.momo.msg.BankAccount bankAccount = 3;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bankaccount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBankAccountReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.ModifyBankAccountReply.ResultCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .com.mservice.momo.msg.BankAccount bankAccount = 3;
  if (has_bankaccount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bankaccount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBankAccountReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.ModifyBankAccountReply.ResultCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .com.mservice.momo.msg.BankAccount bankAccount = 3;
    if (has_bankaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bankaccount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyBankAccountReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBankAccountReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBankAccountReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBankAccountReply::MergeFrom(const ModifyBankAccountReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bankaccount()) {
      mutable_bankaccount()->::com::mservice::momo::msg::BankAccount::MergeFrom(from.bankaccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBankAccountReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBankAccountReply::CopyFrom(const ModifyBankAccountReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyBankAccountReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_bankaccount()) {
    if (!this->bankaccount().IsInitialized()) return false;
  }
  return true;
}

void ModifyBankAccountReply::Swap(ModifyBankAccountReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bankaccount_, other->bankaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyBankAccountReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyBankAccountReply_descriptor_;
  metadata.reflection = ModifyBankAccountReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAgentBankAccounts::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

GetAgentBankAccounts::GetAgentBankAccounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAgentBankAccounts::InitAsDefaultInstance() {
}

GetAgentBankAccounts::GetAgentBankAccounts(const GetAgentBankAccounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAgentBankAccounts::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAgentBankAccounts::~GetAgentBankAccounts() {
  SharedDtor();
}

void GetAgentBankAccounts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAgentBankAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAgentBankAccounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAgentBankAccounts_descriptor_;
}

const GetAgentBankAccounts& GetAgentBankAccounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetAgentBankAccounts* GetAgentBankAccounts::default_instance_ = NULL;

GetAgentBankAccounts* GetAgentBankAccounts::New() const {
  return new GetAgentBankAccounts;
}

void GetAgentBankAccounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAgentBankAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAgentBankAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAgentBankAccounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAgentBankAccounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAgentBankAccounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAgentBankAccounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAgentBankAccounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAgentBankAccounts::MergeFrom(const GetAgentBankAccounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAgentBankAccounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentBankAccounts::CopyFrom(const GetAgentBankAccounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentBankAccounts::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAgentBankAccounts::Swap(GetAgentBankAccounts* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAgentBankAccounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAgentBankAccounts_descriptor_;
  metadata.reflection = GetAgentBankAccounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAgentBankAccountsReply::kAccountsFieldNumber;
#endif  // !_MSC_VER

GetAgentBankAccountsReply::GetAgentBankAccountsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAgentBankAccountsReply::InitAsDefaultInstance() {
}

GetAgentBankAccountsReply::GetAgentBankAccountsReply(const GetAgentBankAccountsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAgentBankAccountsReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAgentBankAccountsReply::~GetAgentBankAccountsReply() {
  SharedDtor();
}

void GetAgentBankAccountsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAgentBankAccountsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAgentBankAccountsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAgentBankAccountsReply_descriptor_;
}

const GetAgentBankAccountsReply& GetAgentBankAccountsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetAgentBankAccountsReply* GetAgentBankAccountsReply::default_instance_ = NULL;

GetAgentBankAccountsReply* GetAgentBankAccountsReply::New() const {
  return new GetAgentBankAccountsReply;
}

void GetAgentBankAccountsReply::Clear() {
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAgentBankAccountsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.BankAccount accounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accounts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAgentBankAccountsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.BankAccount accounts = 2;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accounts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAgentBankAccountsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.mservice.momo.msg.BankAccount accounts = 2;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accounts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAgentBankAccountsReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.BankAccount accounts = 2;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAgentBankAccountsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAgentBankAccountsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAgentBankAccountsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAgentBankAccountsReply::MergeFrom(const GetAgentBankAccountsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  accounts_.MergeFrom(from.accounts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAgentBankAccountsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentBankAccountsReply::CopyFrom(const GetAgentBankAccountsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentBankAccountsReply::IsInitialized() const {

  for (int i = 0; i < accounts_size(); i++) {
    if (!this->accounts(i).IsInitialized()) return false;
  }
  return true;
}

void GetAgentBankAccountsReply::Swap(GetAgentBankAccountsReply* other) {
  if (other != this) {
    accounts_.Swap(&other->accounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAgentBankAccountsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAgentBankAccountsReply_descriptor_;
  metadata.reflection = GetAgentBankAccountsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transaction::kIdFieldNumber;
const int Transaction::kTimeFieldNumber;
const int Transaction::kAmountFieldNumber;
const int Transaction::kPartnerNameFieldNumber;
const int Transaction::kTypeFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kPartnerIdFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transaction::InitAsDefaultInstance() {
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  amount_ = GOOGLE_ULONGLONG(0);
  partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  status_ = 1;
  partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    delete partnername_;
  }
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New() const {
  return new Transaction;
}

void Transaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_partnername()) {
      if (partnername_ != &::google::protobuf::internal::kEmptyString) {
        partnername_->clear();
      }
    }
    type_ = 1;
    status_ = 1;
    if (has_partnerid()) {
      if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
        partnerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partnerName;
        break;
      }

      // optional string partnerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnername().data(), this->partnername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .com.mservice.momo.msg.TransactionType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransactionType_IsValid(value)) {
            set_type(static_cast< ::com::mservice::momo::msg::TransactionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .com.mservice.momo.msg.TransactionStatus status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::com::mservice::momo::msg::TransactionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_partnerId;
        break;
      }

      // optional string partnerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerid().data(), this->partnerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional string partnerName = 4;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->partnername(), output);
  }

  // optional .com.mservice.momo.msg.TransactionType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional string partnerId = 7;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->partnerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional string partnerName = 4;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->partnername(), target);
  }

  // optional .com.mservice.momo.msg.TransactionType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional string partnerId = 7;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->partnerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string partnerName = 4;
    if (has_partnername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnername());
    }

    // optional .com.mservice.momo.msg.TransactionType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.mservice.momo.msg.TransactionStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string partnerId = 7;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_partnername()) {
      set_partnername(from.partnername());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(amount_, other->amount_);
    std::swap(partnername_, other->partnername_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransaction::kPhoneNumberFieldNumber;
const int GetTransaction::kPageSizeFieldNumber;
const int GetTransaction::kPageNumberFieldNumber;
const int GetTransaction::kStartTimeFieldNumber;
const int GetTransaction::kEndTimeFieldNumber;
const int GetTransaction::kStatusFieldNumber;
const int GetTransaction::kTypeFieldNumber;
#endif  // !_MSC_VER

GetTransaction::GetTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTransaction::InitAsDefaultInstance() {
}

GetTransaction::GetTransaction(const GetTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTransaction::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pagesize_ = 0u;
  pagenumber_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransaction::~GetTransaction() {
  SharedDtor();
}

void GetTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTransaction_descriptor_;
}

const GetTransaction& GetTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetTransaction* GetTransaction::default_instance_ = NULL;

GetTransaction* GetTransaction::New() const {
  return new GetTransaction;
}

void GetTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    pagesize_ = 0u;
    pagenumber_ = 0u;
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    status_ = 1;
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageSize;
        break;
      }

      // required uint32 pageSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pageNumber;
        break;
      }

      // required uint32 pageNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenumber_)));
          set_has_pagenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endTime;
        break;
      }

      // optional uint64 endTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .com.mservice.momo.msg.TransactionStatus status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::com::mservice::momo::msg::TransactionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // repeated .com.mservice.momo.msg.TransactionType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransactionType_IsValid(value)) {
            add_type(static_cast< ::com::mservice::momo::msg::TransactionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::com::mservice::momo::msg::TransactionType_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required uint32 pageSize = 2;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pagesize(), output);
  }

  // required uint32 pageNumber = 3;
  if (has_pagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pagenumber(), output);
  }

  // optional uint64 startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->starttime(), output);
  }

  // optional uint64 endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // repeated .com.mservice.momo.msg.TransactionType type = 7;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required uint32 pageSize = 2;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pagesize(), target);
  }

  // required uint32 pageNumber = 3;
  if (has_pagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pagenumber(), target);
  }

  // optional uint64 startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->starttime(), target);
  }

  // optional uint64 endTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endtime(), target);
  }

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // repeated .com.mservice.momo.msg.TransactionType type = 7;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required uint32 pageSize = 2;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

    // required uint32 pageNumber = 3;
    if (has_pagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenumber());
    }

    // optional uint64 startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional .com.mservice.momo.msg.TransactionStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .com.mservice.momo.msg.TransactionType type = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTransaction::MergeFrom(const GetTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_pagenumber()) {
      set_pagenumber(from.pagenumber());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransaction::CopyFrom(const GetTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetTransaction::Swap(GetTransaction* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(pagenumber_, other->pagenumber_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(status_, other->status_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTransaction_descriptor_;
  metadata.reflection = GetTransaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransactionReply::kPhoneNumberFieldNumber;
const int GetTransactionReply::kPageCountFieldNumber;
const int GetTransactionReply::kTransactionsFieldNumber;
#endif  // !_MSC_VER

GetTransactionReply::GetTransactionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTransactionReply::InitAsDefaultInstance() {
}

GetTransactionReply::GetTransactionReply(const GetTransactionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTransactionReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pagecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransactionReply::~GetTransactionReply() {
  SharedDtor();
}

void GetTransactionReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTransactionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTransactionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTransactionReply_descriptor_;
}

const GetTransactionReply& GetTransactionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetTransactionReply* GetTransactionReply::default_instance_ = NULL;

GetTransactionReply* GetTransactionReply::New() const {
  return new GetTransactionReply;
}

void GetTransactionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    pagecount_ = 0u;
  }
  transactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTransactionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageCount;
        break;
      }

      // required uint32 pageCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagecount_)));
          set_has_pagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactions;
        break;
      }

      // repeated .com.mservice.momo.msg.Transaction transactions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTransactionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required uint32 pageCount = 2;
  if (has_pagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pagecount(), output);
  }

  // repeated .com.mservice.momo.msg.Transaction transactions = 3;
  for (int i = 0; i < this->transactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transactions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTransactionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required uint32 pageCount = 2;
  if (has_pagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pagecount(), target);
  }

  // repeated .com.mservice.momo.msg.Transaction transactions = 3;
  for (int i = 0; i < this->transactions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transactions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTransactionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required uint32 pageCount = 2;
    if (has_pagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagecount());
    }

  }
  // repeated .com.mservice.momo.msg.Transaction transactions = 3;
  total_size += 1 * this->transactions_size();
  for (int i = 0; i < this->transactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transactions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransactionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTransactionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTransactionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTransactionReply::MergeFrom(const GetTransactionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  transactions_.MergeFrom(from.transactions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pagecount()) {
      set_pagecount(from.pagecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTransactionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionReply::CopyFrom(const GetTransactionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetTransactionReply::Swap(GetTransactionReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pagecount_, other->pagecount_);
    transactions_.Swap(&other->transactions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTransactionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTransactionReply_descriptor_;
  metadata.reflection = GetTransactionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransactionDetail::kPhoneNumberFieldNumber;
const int GetTransactionDetail::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

GetTransactionDetail::GetTransactionDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTransactionDetail::InitAsDefaultInstance() {
}

GetTransactionDetail::GetTransactionDetail(const GetTransactionDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTransactionDetail::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  transactionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransactionDetail::~GetTransactionDetail() {
  SharedDtor();
}

void GetTransactionDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTransactionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTransactionDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTransactionDetail_descriptor_;
}

const GetTransactionDetail& GetTransactionDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetTransactionDetail* GetTransactionDetail::default_instance_ = NULL;

GetTransactionDetail* GetTransactionDetail::New() const {
  return new GetTransactionDetail;
}

void GetTransactionDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    transactionid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTransactionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transactionId;
        break;
      }

      // required uint64 transactionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transactionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transactionid_)));
          set_has_transactionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTransactionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required uint64 transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTransactionDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required uint64 transactionId = 2;
  if (has_transactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTransactionDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required uint64 transactionId = 2;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransactionDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTransactionDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTransactionDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTransactionDetail::MergeFrom(const GetTransactionDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTransactionDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionDetail::CopyFrom(const GetTransactionDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetTransactionDetail::Swap(GetTransactionDetail* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTransactionDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTransactionDetail_descriptor_;
  metadata.reflection = GetTransactionDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransactionDetailReply::kPhoneNumberFieldNumber;
const int GetTransactionDetailReply::kIdFieldNumber;
const int GetTransactionDetailReply::kTimeFieldNumber;
const int GetTransactionDetailReply::kAmountFieldNumber;
const int GetTransactionDetailReply::kTypeFieldNumber;
const int GetTransactionDetailReply::kStatusFieldNumber;
const int GetTransactionDetailReply::kPartnerIdFieldNumber;
const int GetTransactionDetailReply::kPartnerCodeFieldNumber;
const int GetTransactionDetailReply::kPartnerNameFieldNumber;
const int GetTransactionDetailReply::kBillIdFieldNumber;
const int GetTransactionDetailReply::kCommentFieldNumber;
const int GetTransactionDetailReply::kPartnerPrefFieldNumber;
const int GetTransactionDetailReply::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetTransactionDetailReply::GetTransactionDetailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTransactionDetailReply::InitAsDefaultInstance() {
}

GetTransactionDetailReply::GetTransactionDetailReply(const GetTransactionDetailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTransactionDetailReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  amount_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  status_ = 1;
  partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnerpref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransactionDetailReply::~GetTransactionDetailReply() {
  SharedDtor();
}

void GetTransactionDetailReply::SharedDtor() {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (partnercode_ != &::google::protobuf::internal::kEmptyString) {
    delete partnercode_;
  }
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    delete partnername_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (partnerpref_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerpref_;
  }
  if (this != default_instance_) {
  }
}

void GetTransactionDetailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTransactionDetailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTransactionDetailReply_descriptor_;
}

const GetTransactionDetailReply& GetTransactionDetailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetTransactionDetailReply* GetTransactionDetailReply::default_instance_ = NULL;

GetTransactionDetailReply* GetTransactionDetailReply::New() const {
  return new GetTransactionDetailReply;
}

void GetTransactionDetailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    amount_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    status_ = 1;
    if (has_partnerid()) {
      if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
        partnerid_->clear();
      }
    }
    if (has_partnercode()) {
      if (partnercode_ != &::google::protobuf::internal::kEmptyString) {
        partnercode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_partnername()) {
      if (partnername_ != &::google::protobuf::internal::kEmptyString) {
        partnername_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_partnerpref()) {
      if (partnerpref_ != &::google::protobuf::internal::kEmptyString) {
        partnerpref_->clear();
      }
    }
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTransactionDetailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .com.mservice.momo.msg.TransactionType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransactionType_IsValid(value)) {
            set_type(static_cast< ::com::mservice::momo::msg::TransactionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .com.mservice.momo.msg.TransactionStatus status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::com::mservice::momo::msg::TransactionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_partnerId;
        break;
      }

      // optional string partnerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerid().data(), this->partnerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_partnerCode;
        break;
      }

      // optional string partnerCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnercode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnercode().data(), this->partnercode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_partnerName;
        break;
      }

      // optional string partnerName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnername().data(), this->partnername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_billId;
        break;
      }

      // optional string billId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_comment;
        break;
      }

      // optional string comment = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_partnerPref;
        break;
      }

      // optional string partnerPref = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerPref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerpref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerpref().data(), this->partnerpref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_errorCode;
        break;
      }

      // optional uint32 errorCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTransactionDetailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional .com.mservice.momo.msg.TransactionType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional string partnerId = 7;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->partnerid(), output);
  }

  // optional string partnerCode = 8;
  if (has_partnercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnercode().data(), this->partnercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->partnercode(), output);
  }

  // optional string partnerName = 9;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->partnername(), output);
  }

  // optional string billId = 10;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->billid(), output);
  }

  // optional string comment = 11;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->comment(), output);
  }

  // optional string partnerPref = 12;
  if (has_partnerpref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerpref().data(), this->partnerpref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->partnerpref(), output);
  }

  // optional uint32 errorCode = 13;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTransactionDetailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional .com.mservice.momo.msg.TransactionType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .com.mservice.momo.msg.TransactionStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional string partnerId = 7;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerid().data(), this->partnerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->partnerid(), target);
  }

  // optional string partnerCode = 8;
  if (has_partnercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnercode().data(), this->partnercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->partnercode(), target);
  }

  // optional string partnerName = 9;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->partnername(), target);
  }

  // optional string billId = 10;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->billid(), target);
  }

  // optional string comment = 11;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->comment(), target);
  }

  // optional string partnerPref = 12;
  if (has_partnerpref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerpref().data(), this->partnerpref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->partnerpref(), target);
  }

  // optional uint32 errorCode = 13;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTransactionDetailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional .com.mservice.momo.msg.TransactionType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.mservice.momo.msg.TransactionStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string partnerId = 7;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerid());
    }

    // optional string partnerCode = 8;
    if (has_partnercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnercode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string partnerName = 9;
    if (has_partnername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnername());
    }

    // optional string billId = 10;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // optional string comment = 11;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string partnerPref = 12;
    if (has_partnerpref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerpref());
    }

    // optional uint32 errorCode = 13;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransactionDetailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTransactionDetailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTransactionDetailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTransactionDetailReply::MergeFrom(const GetTransactionDetailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_partnercode()) {
      set_partnercode(from.partnercode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_partnername()) {
      set_partnername(from.partnername());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_partnerpref()) {
      set_partnerpref(from.partnerpref());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTransactionDetailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionDetailReply::CopyFrom(const GetTransactionDetailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionDetailReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTransactionDetailReply::Swap(GetTransactionDetailReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(amount_, other->amount_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(partnercode_, other->partnercode_);
    std::swap(partnername_, other->partnername_);
    std::swap(billid_, other->billid_);
    std::swap(comment_, other->comment_);
    std::swap(partnerpref_, other->partnerpref_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTransactionDetailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTransactionDetailReply_descriptor_;
  metadata.reflection = GetTransactionDetailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Topup::kPhoneNumberFieldNumber;
const int Topup::kPinFieldNumber;
const int Topup::kTopupPhoneNumberFieldNumber;
const int Topup::kAmountFieldNumber;
#endif  // !_MSC_VER

Topup::Topup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Topup::InitAsDefaultInstance() {
}

Topup::Topup(const Topup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Topup::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  topupphonenumber_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Topup::~Topup() {
  SharedDtor();
}

void Topup::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void Topup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topup_descriptor_;
}

const Topup& Topup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Topup* Topup::default_instance_ = NULL;

Topup* Topup::New() const {
  return new Topup;
}

void Topup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    topupphonenumber_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Topup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topupPhoneNumber;
        break;
      }

      // required uint32 topupPhoneNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topupPhoneNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &topupphonenumber_)));
          set_has_topupphonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Topup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required uint32 topupPhoneNumber = 3;
  if (has_topupphonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->topupphonenumber(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Topup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required uint32 topupPhoneNumber = 3;
  if (has_topupphonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->topupphonenumber(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Topup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required uint32 topupPhoneNumber = 3;
    if (has_topupphonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->topupphonenumber());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Topup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Topup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Topup::MergeFrom(const Topup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_topupphonenumber()) {
      set_topupphonenumber(from.topupphonenumber());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Topup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topup::CopyFrom(const Topup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Topup::Swap(Topup* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(topupphonenumber_, other->topupphonenumber_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Topup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topup_descriptor_;
  metadata.reflection = Topup_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TopupReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopupReply_Result_descriptor_;
}
bool TopupReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TopupReply_Result TopupReply::SUCCESS;
const TopupReply_Result TopupReply::FAILED;
const TopupReply_Result TopupReply::LOGIN_REQUIRED;
const TopupReply_Result TopupReply::Result_MIN;
const TopupReply_Result TopupReply::Result_MAX;
const int TopupReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TopupReply::kPhoneNumberFieldNumber;
const int TopupReply::kResultFieldNumber;
const int TopupReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

TopupReply::TopupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopupReply::InitAsDefaultInstance() {
}

TopupReply::TopupReply(const TopupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopupReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopupReply::~TopupReply() {
  SharedDtor();
}

void TopupReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void TopupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopupReply_descriptor_;
}

const TopupReply& TopupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TopupReply* TopupReply::default_instance_ = NULL;

TopupReply* TopupReply::New() const {
  return new TopupReply;
}

void TopupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.TopupReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TopupReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::TopupReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.TopupReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.TopupReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.TopupReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopupReply::MergeFrom(const TopupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopupReply::CopyFrom(const TopupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopupReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TopupReply::Swap(TopupReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopupReply_descriptor_;
  metadata.reflection = TopupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopupGame::kPhoneNumberFieldNumber;
const int TopupGame::kPinFieldNumber;
const int TopupGame::kProviderIdFieldNumber;
const int TopupGame::kGameAccountFieldNumber;
const int TopupGame::kAmountFieldNumber;
#endif  // !_MSC_VER

TopupGame::TopupGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopupGame::InitAsDefaultInstance() {
}

TopupGame::TopupGame(const TopupGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopupGame::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopupGame::~TopupGame() {
  SharedDtor();
}

void TopupGame::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (gameaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete gameaccount_;
  }
  if (this != default_instance_) {
  }
}

void TopupGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopupGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopupGame_descriptor_;
}

const TopupGame& TopupGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TopupGame* TopupGame::default_instance_ = NULL;

TopupGame* TopupGame::New() const {
  return new TopupGame;
}

void TopupGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_gameaccount()) {
      if (gameaccount_ != &::google::protobuf::internal::kEmptyString) {
        gameaccount_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopupGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerId;
        break;
      }

      // required string providerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gameAccount;
        break;
      }

      // required string gameAccount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameaccount().data(), this->gameaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // required uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopupGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providerid(), output);
  }

  // required string gameAccount = 4;
  if (has_gameaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameaccount().data(), this->gameaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gameaccount(), output);
  }

  // required uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopupGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->providerid(), target);
  }

  // required string gameAccount = 4;
  if (has_gameaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameaccount().data(), this->gameaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gameaccount(), target);
  }

  // required uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopupGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string providerId = 3;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string gameAccount = 4;
    if (has_gameaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameaccount());
    }

    // required uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopupGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopupGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopupGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopupGame::MergeFrom(const TopupGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_gameaccount()) {
      set_gameaccount(from.gameaccount());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopupGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopupGame::CopyFrom(const TopupGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopupGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TopupGame::Swap(TopupGame* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(providerid_, other->providerid_);
    std::swap(gameaccount_, other->gameaccount_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopupGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopupGame_descriptor_;
  metadata.reflection = TopupGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TopupGameReply_TopupGameResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopupGameReply_TopupGameResult_descriptor_;
}
bool TopupGameReply_TopupGameResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TopupGameReply_TopupGameResult TopupGameReply::SUCCESS;
const TopupGameReply_TopupGameResult TopupGameReply::FAILED;
const TopupGameReply_TopupGameResult TopupGameReply::TopupGameResult_MIN;
const TopupGameReply_TopupGameResult TopupGameReply::TopupGameResult_MAX;
const int TopupGameReply::TopupGameResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TopupGameReply::kPhoneNumberFieldNumber;
const int TopupGameReply::kResultFieldNumber;
const int TopupGameReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

TopupGameReply::TopupGameReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopupGameReply::InitAsDefaultInstance() {
}

TopupGameReply::TopupGameReply(const TopupGameReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopupGameReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopupGameReply::~TopupGameReply() {
  SharedDtor();
}

void TopupGameReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void TopupGameReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopupGameReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopupGameReply_descriptor_;
}

const TopupGameReply& TopupGameReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TopupGameReply* TopupGameReply::default_instance_ = NULL;

TopupGameReply* TopupGameReply::New() const {
  return new TopupGameReply;
}

void TopupGameReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopupGameReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.TopupGameReply.TopupGameResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TopupGameReply_TopupGameResult_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::TopupGameReply_TopupGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopupGameReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.TopupGameReply.TopupGameResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopupGameReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.TopupGameReply.TopupGameResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopupGameReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.TopupGameReply.TopupGameResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopupGameReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopupGameReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopupGameReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopupGameReply::MergeFrom(const TopupGameReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopupGameReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopupGameReply::CopyFrom(const TopupGameReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopupGameReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TopupGameReply::Swap(TopupGameReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopupGameReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopupGameReply_descriptor_;
  metadata.reflection = TopupGameReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferM2m::kPhoneNumberFieldNumber;
const int TransferM2m::kPinFieldNumber;
const int TransferM2m::kReceiverPhoneNumberFieldNumber;
const int TransferM2m::kAmountFieldNumber;
const int TransferM2m::kCommentFieldNumber;
#endif  // !_MSC_VER

TransferM2m::TransferM2m()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferM2m::InitAsDefaultInstance() {
}

TransferM2m::TransferM2m(const TransferM2m& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferM2m::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverphonenumber_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferM2m::~TransferM2m() {
  SharedDtor();
}

void TransferM2m::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void TransferM2m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferM2m::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferM2m_descriptor_;
}

const TransferM2m& TransferM2m::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TransferM2m* TransferM2m::default_instance_ = NULL;

TransferM2m* TransferM2m::New() const {
  return new TransferM2m;
}

void TransferM2m::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    receiverphonenumber_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferM2m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receiverPhoneNumber;
        break;
      }

      // required uint32 receiverPhoneNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverPhoneNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiverphonenumber_)));
          set_has_receiverphonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // required string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferM2m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required uint32 receiverPhoneNumber = 3;
  if (has_receiverphonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->receiverphonenumber(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // required string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferM2m::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required uint32 receiverPhoneNumber = 3;
  if (has_receiverphonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->receiverphonenumber(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // required string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferM2m::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required uint32 receiverPhoneNumber = 3;
    if (has_receiverphonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiverphonenumber());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferM2m::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferM2m* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferM2m*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferM2m::MergeFrom(const TransferM2m& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_receiverphonenumber()) {
      set_receiverphonenumber(from.receiverphonenumber());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferM2m::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferM2m::CopyFrom(const TransferM2m& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferM2m::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TransferM2m::Swap(TransferM2m* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(receiverphonenumber_, other->receiverphonenumber_);
    std::swap(amount_, other->amount_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferM2m::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferM2m_descriptor_;
  metadata.reflection = TransferM2m_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransferM2mReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferM2mReply_Result_descriptor_;
}
bool TransferM2mReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransferM2mReply_Result TransferM2mReply::SUCCESS;
const TransferM2mReply_Result TransferM2mReply::FAILED;
const TransferM2mReply_Result TransferM2mReply::ACCESS_DENIED;
const TransferM2mReply_Result TransferM2mReply::LOGIN_REQUIRED;
const TransferM2mReply_Result TransferM2mReply::Result_MIN;
const TransferM2mReply_Result TransferM2mReply::Result_MAX;
const int TransferM2mReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransferM2mReply::kPhoneNumberFieldNumber;
const int TransferM2mReply::kResultFieldNumber;
const int TransferM2mReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

TransferM2mReply::TransferM2mReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferM2mReply::InitAsDefaultInstance() {
}

TransferM2mReply::TransferM2mReply(const TransferM2mReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferM2mReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferM2mReply::~TransferM2mReply() {
  SharedDtor();
}

void TransferM2mReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void TransferM2mReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferM2mReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferM2mReply_descriptor_;
}

const TransferM2mReply& TransferM2mReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TransferM2mReply* TransferM2mReply::default_instance_ = NULL;

TransferM2mReply* TransferM2mReply::New() const {
  return new TransferM2mReply;
}

void TransferM2mReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferM2mReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.TransferM2mReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransferM2mReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::TransferM2mReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferM2mReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.TransferM2mReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferM2mReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.TransferM2mReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferM2mReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.TransferM2mReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferM2mReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferM2mReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferM2mReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferM2mReply::MergeFrom(const TransferM2mReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferM2mReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferM2mReply::CopyFrom(const TransferM2mReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferM2mReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransferM2mReply::Swap(TransferM2mReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferM2mReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferM2mReply_descriptor_;
  metadata.reflection = TransferM2mReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferM2c::kPhoneNumberFieldNumber;
const int TransferM2c::kPinFieldNumber;
const int TransferM2c::kReceiverNameFieldNumber;
const int TransferM2c::kReceiverCardIdFieldNumber;
const int TransferM2c::kReceiverPhoneNumberFieldNumber;
const int TransferM2c::kAmountFieldNumber;
const int TransferM2c::kCommentFieldNumber;
#endif  // !_MSC_VER

TransferM2c::TransferM2c()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferM2c::InitAsDefaultInstance() {
}

TransferM2c::TransferM2c(const TransferM2c& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferM2c::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receivercardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverphonenumber_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferM2c::~TransferM2c() {
  SharedDtor();
}

void TransferM2c::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (receivercardid_ != &::google::protobuf::internal::kEmptyString) {
    delete receivercardid_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void TransferM2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferM2c::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferM2c_descriptor_;
}

const TransferM2c& TransferM2c::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TransferM2c* TransferM2c::default_instance_ = NULL;

TransferM2c* TransferM2c::New() const {
  return new TransferM2c;
}

void TransferM2c::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
    if (has_receivercardid()) {
      if (receivercardid_ != &::google::protobuf::internal::kEmptyString) {
        receivercardid_->clear();
      }
    }
    receiverphonenumber_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferM2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_receiverName;
        break;
      }

      // required string receiverName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_receiverCardId;
        break;
      }

      // required string receiverCardId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverCardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivercardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivercardid().data(), this->receivercardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receiverPhoneNumber;
        break;
      }

      // required uint32 receiverPhoneNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverPhoneNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiverphonenumber_)));
          set_has_receiverphonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // required uint64 amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // required string comment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferM2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string receiverName = 3;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->receivername(), output);
  }

  // required string receiverCardId = 4;
  if (has_receivercardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivercardid().data(), this->receivercardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->receivercardid(), output);
  }

  // required uint32 receiverPhoneNumber = 5;
  if (has_receiverphonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->receiverphonenumber(), output);
  }

  // required uint64 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->amount(), output);
  }

  // required string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferM2c::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string receiverName = 3;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->receivername(), target);
  }

  // required string receiverCardId = 4;
  if (has_receivercardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivercardid().data(), this->receivercardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receivercardid(), target);
  }

  // required uint32 receiverPhoneNumber = 5;
  if (has_receiverphonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->receiverphonenumber(), target);
  }

  // required uint64 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->amount(), target);
  }

  // required string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferM2c::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string receiverName = 3;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

    // required string receiverCardId = 4;
    if (has_receivercardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivercardid());
    }

    // required uint32 receiverPhoneNumber = 5;
    if (has_receiverphonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiverphonenumber());
    }

    // required uint64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required string comment = 7;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferM2c::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferM2c* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferM2c*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferM2c::MergeFrom(const TransferM2c& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
    if (from.has_receivercardid()) {
      set_receivercardid(from.receivercardid());
    }
    if (from.has_receiverphonenumber()) {
      set_receiverphonenumber(from.receiverphonenumber());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferM2c::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferM2c::CopyFrom(const TransferM2c& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferM2c::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void TransferM2c::Swap(TransferM2c* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(receivername_, other->receivername_);
    std::swap(receivercardid_, other->receivercardid_);
    std::swap(receiverphonenumber_, other->receiverphonenumber_);
    std::swap(amount_, other->amount_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferM2c::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferM2c_descriptor_;
  metadata.reflection = TransferM2c_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransferM2cReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferM2cReply_Result_descriptor_;
}
bool TransferM2cReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransferM2cReply_Result TransferM2cReply::SUCCESS;
const TransferM2cReply_Result TransferM2cReply::FAILED;
const TransferM2cReply_Result TransferM2cReply::ACCESS_DENIED;
const TransferM2cReply_Result TransferM2cReply::Result_MIN;
const TransferM2cReply_Result TransferM2cReply::Result_MAX;
const int TransferM2cReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransferM2cReply::kPhoneNumberFieldNumber;
const int TransferM2cReply::kResultFieldNumber;
#endif  // !_MSC_VER

TransferM2cReply::TransferM2cReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferM2cReply::InitAsDefaultInstance() {
}

TransferM2cReply::TransferM2cReply(const TransferM2cReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferM2cReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferM2cReply::~TransferM2cReply() {
  SharedDtor();
}

void TransferM2cReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferM2cReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferM2cReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferM2cReply_descriptor_;
}

const TransferM2cReply& TransferM2cReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TransferM2cReply* TransferM2cReply::default_instance_ = NULL;

TransferM2cReply* TransferM2cReply::New() const {
  return new TransferM2cReply;
}

void TransferM2cReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferM2cReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.TransferM2cReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::TransferM2cReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::TransferM2cReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferM2cReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.TransferM2cReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferM2cReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.TransferM2cReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferM2cReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.TransferM2cReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferM2cReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferM2cReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferM2cReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferM2cReply::MergeFrom(const TransferM2cReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferM2cReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferM2cReply::CopyFrom(const TransferM2cReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferM2cReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransferM2cReply::Swap(TransferM2cReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferM2cReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferM2cReply_descriptor_;
  metadata.reflection = TransferM2cReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepositWithdrawAtPlace::kPhoneNumberFieldNumber;
const int DepositWithdrawAtPlace::kAddressFieldNumber;
const int DepositWithdrawAtPlace::kAmountFieldNumber;
const int DepositWithdrawAtPlace::kInOutFieldNumber;
const int DepositWithdrawAtPlace::kMaTinhFieldNumber;
const int DepositWithdrawAtPlace::kMaHuyenFieldNumber;
#endif  // !_MSC_VER

DepositWithdrawAtPlace::DepositWithdrawAtPlace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepositWithdrawAtPlace::InitAsDefaultInstance() {
}

DepositWithdrawAtPlace::DepositWithdrawAtPlace(const DepositWithdrawAtPlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepositWithdrawAtPlace::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  inout_ = 0u;
  matinh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mahuyen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepositWithdrawAtPlace::~DepositWithdrawAtPlace() {
  SharedDtor();
}

void DepositWithdrawAtPlace::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (matinh_ != &::google::protobuf::internal::kEmptyString) {
    delete matinh_;
  }
  if (mahuyen_ != &::google::protobuf::internal::kEmptyString) {
    delete mahuyen_;
  }
  if (this != default_instance_) {
  }
}

void DepositWithdrawAtPlace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepositWithdrawAtPlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositWithdrawAtPlace_descriptor_;
}

const DepositWithdrawAtPlace& DepositWithdrawAtPlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

DepositWithdrawAtPlace* DepositWithdrawAtPlace::default_instance_ = NULL;

DepositWithdrawAtPlace* DepositWithdrawAtPlace::New() const {
  return new DepositWithdrawAtPlace;
}

void DepositWithdrawAtPlace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    inout_ = 0u;
    if (has_matinh()) {
      if (matinh_ != &::google::protobuf::internal::kEmptyString) {
        matinh_->clear();
      }
    }
    if (has_mahuyen()) {
      if (mahuyen_ != &::google::protobuf::internal::kEmptyString) {
        mahuyen_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepositWithdrawAtPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // required uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inOut;
        break;
      }

      // required uint32 inOut = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inout_)));
          set_has_inout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_maTinh;
        break;
      }

      // required string maTinh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maTinh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matinh()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matinh().data(), this->matinh().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_maHuyen;
        break;
      }

      // required string maHuyen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maHuyen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mahuyen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mahuyen().data(), this->mahuyen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepositWithdrawAtPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }

  // required uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // required uint32 inOut = 4;
  if (has_inout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inout(), output);
  }

  // required string maTinh = 5;
  if (has_matinh()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matinh().data(), this->matinh().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->matinh(), output);
  }

  // required string maHuyen = 6;
  if (has_mahuyen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mahuyen().data(), this->mahuyen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mahuyen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepositWithdrawAtPlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // required uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // required uint32 inOut = 4;
  if (has_inout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inout(), target);
  }

  // required string maTinh = 5;
  if (has_matinh()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matinh().data(), this->matinh().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->matinh(), target);
  }

  // required string maHuyen = 6;
  if (has_mahuyen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mahuyen().data(), this->mahuyen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mahuyen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepositWithdrawAtPlace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required uint32 inOut = 4;
    if (has_inout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inout());
    }

    // required string maTinh = 5;
    if (has_matinh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matinh());
    }

    // required string maHuyen = 6;
    if (has_mahuyen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mahuyen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepositWithdrawAtPlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepositWithdrawAtPlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepositWithdrawAtPlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepositWithdrawAtPlace::MergeFrom(const DepositWithdrawAtPlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_inout()) {
      set_inout(from.inout());
    }
    if (from.has_matinh()) {
      set_matinh(from.matinh());
    }
    if (from.has_mahuyen()) {
      set_mahuyen(from.mahuyen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepositWithdrawAtPlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositWithdrawAtPlace::CopyFrom(const DepositWithdrawAtPlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositWithdrawAtPlace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DepositWithdrawAtPlace::Swap(DepositWithdrawAtPlace* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(address_, other->address_);
    std::swap(amount_, other->amount_);
    std::swap(inout_, other->inout_);
    std::swap(matinh_, other->matinh_);
    std::swap(mahuyen_, other->mahuyen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepositWithdrawAtPlace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepositWithdrawAtPlace_descriptor_;
  metadata.reflection = DepositWithdrawAtPlace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DepositWithdrawAtPlaceReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositWithdrawAtPlaceReply_Result_descriptor_;
}
bool DepositWithdrawAtPlaceReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply::SUCCESS;
const DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply::FAIL;
const DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply::Result_MIN;
const DepositWithdrawAtPlaceReply_Result DepositWithdrawAtPlaceReply::Result_MAX;
const int DepositWithdrawAtPlaceReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DepositWithdrawAtPlaceReply::kPhoneNumberFieldNumber;
const int DepositWithdrawAtPlaceReply::kResultFieldNumber;
#endif  // !_MSC_VER

DepositWithdrawAtPlaceReply::DepositWithdrawAtPlaceReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepositWithdrawAtPlaceReply::InitAsDefaultInstance() {
}

DepositWithdrawAtPlaceReply::DepositWithdrawAtPlaceReply(const DepositWithdrawAtPlaceReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepositWithdrawAtPlaceReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepositWithdrawAtPlaceReply::~DepositWithdrawAtPlaceReply() {
  SharedDtor();
}

void DepositWithdrawAtPlaceReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepositWithdrawAtPlaceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepositWithdrawAtPlaceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositWithdrawAtPlaceReply_descriptor_;
}

const DepositWithdrawAtPlaceReply& DepositWithdrawAtPlaceReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

DepositWithdrawAtPlaceReply* DepositWithdrawAtPlaceReply::default_instance_ = NULL;

DepositWithdrawAtPlaceReply* DepositWithdrawAtPlaceReply::New() const {
  return new DepositWithdrawAtPlaceReply;
}

void DepositWithdrawAtPlaceReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepositWithdrawAtPlaceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.DepositWithdrawAtPlaceReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::DepositWithdrawAtPlaceReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepositWithdrawAtPlaceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.DepositWithdrawAtPlaceReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepositWithdrawAtPlaceReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.DepositWithdrawAtPlaceReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepositWithdrawAtPlaceReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.DepositWithdrawAtPlaceReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepositWithdrawAtPlaceReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepositWithdrawAtPlaceReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepositWithdrawAtPlaceReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepositWithdrawAtPlaceReply::MergeFrom(const DepositWithdrawAtPlaceReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepositWithdrawAtPlaceReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositWithdrawAtPlaceReply::CopyFrom(const DepositWithdrawAtPlaceReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositWithdrawAtPlaceReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DepositWithdrawAtPlaceReply::Swap(DepositWithdrawAtPlaceReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepositWithdrawAtPlaceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepositWithdrawAtPlaceReply_descriptor_;
  metadata.reflection = DepositWithdrawAtPlaceReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillDetail::kBillIdFieldNumber;
const int BillDetail::kAmountFieldNumber;
const int BillDetail::kStartDateFieldNumber;
const int BillDetail::kEndDateFieldNumber;
const int BillDetail::kProviderIdFieldNumber;
#endif  // !_MSC_VER

BillDetail::BillDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillDetail::InitAsDefaultInstance() {
}

BillDetail::BillDetail(const BillDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillDetail::SharedCtor() {
  _cached_size_ = 0;
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  startdate_ = GOOGLE_ULONGLONG(0);
  enddate_ = GOOGLE_ULONGLONG(0);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillDetail::~BillDetail() {
  SharedDtor();
}

void BillDetail::SharedDtor() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (this != default_instance_) {
  }
}

void BillDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillDetail_descriptor_;
}

const BillDetail& BillDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BillDetail* BillDetail::default_instance_ = NULL;

BillDetail* BillDetail::New() const {
  return new BillDetail;
}

void BillDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    startdate_ = GOOGLE_ULONGLONG(0);
    enddate_ = GOOGLE_ULONGLONG(0);
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string billId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startDate;
        break;
      }

      // optional uint64 startDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endDate;
        break;
      }

      // optional uint64 endDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enddate_)));
          set_has_enddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_providerId;
        break;
      }

      // optional string providerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string billId = 1;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->billid(), output);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional uint64 startDate = 3;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->startdate(), output);
  }

  // optional uint64 endDate = 4;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->enddate(), output);
  }

  // optional string providerId = 5;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->providerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string billId = 1;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->billid(), target);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional uint64 startDate = 3;
  if (has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->startdate(), target);
  }

  // optional uint64 endDate = 4;
  if (has_enddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->enddate(), target);
  }

  // optional string providerId = 5;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->providerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string billId = 1;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 startDate = 3;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startdate());
    }

    // optional uint64 endDate = 4;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enddate());
    }

    // optional string providerId = 5;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillDetail::MergeFrom(const BillDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillDetail::CopyFrom(const BillDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillDetail::IsInitialized() const {

  return true;
}

void BillDetail::Swap(BillDetail* other) {
  if (other != this) {
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(providerid_, other->providerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillDetail_descriptor_;
  metadata.reflection = BillDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBillInfo::kPhoneNumberFieldNumber;
const int GetBillInfo::kPinFieldNumber;
const int GetBillInfo::kProviderIdFieldNumber;
const int GetBillInfo::kBillIdFieldNumber;
#endif  // !_MSC_VER

GetBillInfo::GetBillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBillInfo::InitAsDefaultInstance() {
}

GetBillInfo::GetBillInfo(const GetBillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBillInfo::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBillInfo::~GetBillInfo() {
  SharedDtor();
}

void GetBillInfo::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void GetBillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBillInfo_descriptor_;
}

const GetBillInfo& GetBillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetBillInfo* GetBillInfo::default_instance_ = NULL;

GetBillInfo* GetBillInfo::New() const {
  return new GetBillInfo;
}

void GetBillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerId;
        break;
      }

      // required string providerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billId;
        break;
      }

      // required string billId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providerid(), output);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->billid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->providerid(), target);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->billid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string providerId = 3;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string billId = 4;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBillInfo::MergeFrom(const GetBillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBillInfo::CopyFrom(const GetBillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetBillInfo::Swap(GetBillInfo* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBillInfo_descriptor_;
  metadata.reflection = GetBillInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetBillInfoReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBillInfoReply_Result_descriptor_;
}
bool GetBillInfoReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetBillInfoReply_Result GetBillInfoReply::SUCESS;
const GetBillInfoReply_Result GetBillInfoReply::AGENT_NOT_FOUND;
const GetBillInfoReply_Result GetBillInfoReply::BILL_NOT_FOUND;
const GetBillInfoReply_Result GetBillInfoReply::Result_MIN;
const GetBillInfoReply_Result GetBillInfoReply::Result_MAX;
const int GetBillInfoReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetBillInfoReply::kPhoneNumberFieldNumber;
const int GetBillInfoReply::kResultFieldNumber;
const int GetBillInfoReply::kBillDetailsFieldNumber;
const int GetBillInfoReply::kAgentNameFieldNumber;
const int GetBillInfoReply::kAgentPhoneFieldNumber;
const int GetBillInfoReply::kAgentAddressFieldNumber;
#endif  // !_MSC_VER

GetBillInfoReply::GetBillInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBillInfoReply::InitAsDefaultInstance() {
}

GetBillInfoReply::GetBillInfoReply(const GetBillInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBillInfoReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  agentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agentphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agentaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBillInfoReply::~GetBillInfoReply() {
  SharedDtor();
}

void GetBillInfoReply::SharedDtor() {
  if (agentname_ != &::google::protobuf::internal::kEmptyString) {
    delete agentname_;
  }
  if (agentphone_ != &::google::protobuf::internal::kEmptyString) {
    delete agentphone_;
  }
  if (agentaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete agentaddress_;
  }
  if (this != default_instance_) {
  }
}

void GetBillInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBillInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBillInfoReply_descriptor_;
}

const GetBillInfoReply& GetBillInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetBillInfoReply* GetBillInfoReply::default_instance_ = NULL;

GetBillInfoReply* GetBillInfoReply::New() const {
  return new GetBillInfoReply;
}

void GetBillInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_agentname()) {
      if (agentname_ != &::google::protobuf::internal::kEmptyString) {
        agentname_->clear();
      }
    }
    if (has_agentphone()) {
      if (agentphone_ != &::google::protobuf::internal::kEmptyString) {
        agentphone_->clear();
      }
    }
    if (has_agentaddress()) {
      if (agentaddress_ != &::google::protobuf::internal::kEmptyString) {
        agentaddress_->clear();
      }
    }
  }
  billdetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBillInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.GetBillInfoReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::GetBillInfoReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::GetBillInfoReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billDetails;
        break;
      }

      // repeated .com.mservice.momo.msg.BillDetail billDetails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_billdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billDetails;
        if (input->ExpectTag(34)) goto parse_agentName;
        break;
      }

      // optional string agentName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agentname().data(), this->agentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_agentPhone;
        break;
      }

      // optional string agentPhone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agentphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agentphone().data(), this->agentphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_agentAddress;
        break;
      }

      // optional string agentAddress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agentaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agentaddress().data(), this->agentaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBillInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.GetBillInfoReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated .com.mservice.momo.msg.BillDetail billDetails = 3;
  for (int i = 0; i < this->billdetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->billdetails(i), output);
  }

  // optional string agentName = 4;
  if (has_agentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentname().data(), this->agentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->agentname(), output);
  }

  // optional string agentPhone = 5;
  if (has_agentphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentphone().data(), this->agentphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->agentphone(), output);
  }

  // optional string agentAddress = 6;
  if (has_agentaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentaddress().data(), this->agentaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->agentaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBillInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.GetBillInfoReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated .com.mservice.momo.msg.BillDetail billDetails = 3;
  for (int i = 0; i < this->billdetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->billdetails(i), target);
  }

  // optional string agentName = 4;
  if (has_agentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentname().data(), this->agentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->agentname(), target);
  }

  // optional string agentPhone = 5;
  if (has_agentphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentphone().data(), this->agentphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->agentphone(), target);
  }

  // optional string agentAddress = 6;
  if (has_agentaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentaddress().data(), this->agentaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->agentaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBillInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.GetBillInfoReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string agentName = 4;
    if (has_agentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agentname());
    }

    // optional string agentPhone = 5;
    if (has_agentphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agentphone());
    }

    // optional string agentAddress = 6;
    if (has_agentaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agentaddress());
    }

  }
  // repeated .com.mservice.momo.msg.BillDetail billDetails = 3;
  total_size += 1 * this->billdetails_size();
  for (int i = 0; i < this->billdetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->billdetails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBillInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBillInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBillInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBillInfoReply::MergeFrom(const GetBillInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  billdetails_.MergeFrom(from.billdetails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_agentname()) {
      set_agentname(from.agentname());
    }
    if (from.has_agentphone()) {
      set_agentphone(from.agentphone());
    }
    if (from.has_agentaddress()) {
      set_agentaddress(from.agentaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBillInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBillInfoReply::CopyFrom(const GetBillInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetBillInfoReply::Swap(GetBillInfoReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    billdetails_.Swap(&other->billdetails_);
    std::swap(agentname_, other->agentname_);
    std::swap(agentphone_, other->agentphone_);
    std::swap(agentaddress_, other->agentaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBillInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBillInfoReply_descriptor_;
  metadata.reflection = GetBillInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayBill::kPhoneNumberFieldNumber;
const int PayBill::kPinFieldNumber;
const int PayBill::kProviderIdFieldNumber;
const int PayBill::kBillIdFieldNumber;
const int PayBill::kAmountFieldNumber;
const int PayBill::kFromSourceFieldNumber;
#endif  // !_MSC_VER

PayBill::PayBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayBill::InitAsDefaultInstance() {
}

PayBill::PayBill(const PayBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayBill::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  fromsource_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayBill::~PayBill() {
  SharedDtor();
}

void PayBill::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void PayBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayBill_descriptor_;
}

const PayBill& PayBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

PayBill* PayBill::default_instance_ = NULL;

PayBill* PayBill::New() const {
  return new PayBill;
}

void PayBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    fromsource_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerId;
        break;
      }

      // required string providerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billId;
        break;
      }

      // required string billId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // required uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fromSource;
        break;
      }

      // optional uint32 fromSource = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromsource_)));
          set_has_fromsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providerid(), output);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->billid(), output);
  }

  // required uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

  // optional uint32 fromSource = 6;
  if (has_fromsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fromsource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->providerid(), target);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->billid(), target);
  }

  // required uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }

  // optional uint32 fromSource = 6;
  if (has_fromsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fromsource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string providerId = 3;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string billId = 4;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // required uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 fromSource = 6;
    if (has_fromsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromsource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayBill::MergeFrom(const PayBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_fromsource()) {
      set_fromsource(from.fromsource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayBill::CopyFrom(const PayBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayBill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PayBill::Swap(PayBill* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(fromsource_, other->fromsource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayBill_descriptor_;
  metadata.reflection = PayBill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PayBillReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayBillReply_Result_descriptor_;
}
bool PayBillReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PayBillReply_Result PayBillReply::SUCCESS;
const PayBillReply_Result PayBillReply::AGENT_NOT_FOUND;
const PayBillReply_Result PayBillReply::BILL_NOT_FOUND;
const PayBillReply_Result PayBillReply::UNKNOWN_SOURCE;
const PayBillReply_Result PayBillReply::Result_MIN;
const PayBillReply_Result PayBillReply::Result_MAX;
const int PayBillReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PayBillReply::kPhoneNumberFieldNumber;
const int PayBillReply::kResultFieldNumber;
const int PayBillReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

PayBillReply::PayBillReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayBillReply::InitAsDefaultInstance() {
}

PayBillReply::PayBillReply(const PayBillReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayBillReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayBillReply::~PayBillReply() {
  SharedDtor();
}

void PayBillReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void PayBillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayBillReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayBillReply_descriptor_;
}

const PayBillReply& PayBillReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

PayBillReply* PayBillReply::default_instance_ = NULL;

PayBillReply* PayBillReply::New() const {
  return new PayBillReply;
}

void PayBillReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayBillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.PayBillReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::PayBillReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::PayBillReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayBillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.PayBillReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayBillReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.PayBillReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayBillReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.PayBillReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayBillReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayBillReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayBillReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayBillReply::MergeFrom(const PayBillReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayBillReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayBillReply::CopyFrom(const PayBillReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayBillReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayBillReply::Swap(PayBillReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayBillReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayBillReply_descriptor_;
  metadata.reflection = PayBillReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bill::kPhoneNumberFieldNumber;
const int Bill::kProviderIdFieldNumber;
const int Bill::kBillIdFieldNumber;
#endif  // !_MSC_VER

Bill::Bill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bill::InitAsDefaultInstance() {
}

Bill::Bill(const Bill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bill::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bill::~Bill() {
  SharedDtor();
}

void Bill::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void Bill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bill_descriptor_;
}

const Bill& Bill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Bill* Bill::default_instance_ = NULL;

Bill* Bill::New() const {
  return new Bill;
}

void Bill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerId;
        break;
      }

      // required string providerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billId;
        break;
      }

      // required string billId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providerid(), output);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->billid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->providerid(), target);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->billid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string providerId = 3;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string billId = 4;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bill::MergeFrom(const Bill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bill::CopyFrom(const Bill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Bill::Swap(Bill* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bill_descriptor_;
  metadata.reflection = Bill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveBill::kPhoneNumberFieldNumber;
const int SaveBill::kPinFieldNumber;
const int SaveBill::kProviderIdFieldNumber;
const int SaveBill::kBillIdFieldNumber;
#endif  // !_MSC_VER

SaveBill::SaveBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveBill::InitAsDefaultInstance() {
}

SaveBill::SaveBill(const SaveBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveBill::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveBill::~SaveBill() {
  SharedDtor();
}

void SaveBill::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void SaveBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveBill_descriptor_;
}

const SaveBill& SaveBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

SaveBill* SaveBill::default_instance_ = NULL;

SaveBill* SaveBill::New() const {
  return new SaveBill;
}

void SaveBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerId;
        break;
      }

      // required string providerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billId;
        break;
      }

      // required string billId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providerid(), output);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->billid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->providerid(), target);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->billid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string providerId = 3;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string billId = 4;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveBill::MergeFrom(const SaveBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveBill::CopyFrom(const SaveBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SaveBill::Swap(SaveBill* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveBill_descriptor_;
  metadata.reflection = SaveBill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SaveBillReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveBillReply_Result_descriptor_;
}
bool SaveBillReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SaveBillReply_Result SaveBillReply::SUCCESS;
const SaveBillReply_Result SaveBillReply::FAIL;
const SaveBillReply_Result SaveBillReply::Result_MIN;
const SaveBillReply_Result SaveBillReply::Result_MAX;
const int SaveBillReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SaveBillReply::kPhoneNumberFieldNumber;
const int SaveBillReply::kResultFieldNumber;
#endif  // !_MSC_VER

SaveBillReply::SaveBillReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveBillReply::InitAsDefaultInstance() {
}

SaveBillReply::SaveBillReply(const SaveBillReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveBillReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveBillReply::~SaveBillReply() {
  SharedDtor();
}

void SaveBillReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveBillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveBillReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveBillReply_descriptor_;
}

const SaveBillReply& SaveBillReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

SaveBillReply* SaveBillReply::default_instance_ = NULL;

SaveBillReply* SaveBillReply::New() const {
  return new SaveBillReply;
}

void SaveBillReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveBillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.SaveBillReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::SaveBillReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::SaveBillReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveBillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.SaveBillReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveBillReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.SaveBillReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveBillReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.SaveBillReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveBillReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveBillReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveBillReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveBillReply::MergeFrom(const SaveBillReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveBillReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveBillReply::CopyFrom(const SaveBillReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBillReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SaveBillReply::Swap(SaveBillReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveBillReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveBillReply_descriptor_;
  metadata.reflection = SaveBillReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSavedBill::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

GetSavedBill::GetSavedBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSavedBill::InitAsDefaultInstance() {
}

GetSavedBill::GetSavedBill(const GetSavedBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSavedBill::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSavedBill::~GetSavedBill() {
  SharedDtor();
}

void GetSavedBill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSavedBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSavedBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSavedBill_descriptor_;
}

const GetSavedBill& GetSavedBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetSavedBill* GetSavedBill::default_instance_ = NULL;

GetSavedBill* GetSavedBill::New() const {
  return new GetSavedBill;
}

void GetSavedBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSavedBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSavedBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSavedBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSavedBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSavedBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSavedBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSavedBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSavedBill::MergeFrom(const GetSavedBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSavedBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSavedBill::CopyFrom(const GetSavedBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSavedBill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSavedBill::Swap(GetSavedBill* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSavedBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSavedBill_descriptor_;
  metadata.reflection = GetSavedBill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSavedBillReply::kPhoneNumberFieldNumber;
const int GetSavedBillReply::kBillDetailsFieldNumber;
#endif  // !_MSC_VER

GetSavedBillReply::GetSavedBillReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSavedBillReply::InitAsDefaultInstance() {
}

GetSavedBillReply::GetSavedBillReply(const GetSavedBillReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSavedBillReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSavedBillReply::~GetSavedBillReply() {
  SharedDtor();
}

void GetSavedBillReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSavedBillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSavedBillReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSavedBillReply_descriptor_;
}

const GetSavedBillReply& GetSavedBillReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetSavedBillReply* GetSavedBillReply::default_instance_ = NULL;

GetSavedBillReply* GetSavedBillReply::New() const {
  return new GetSavedBillReply;
}

void GetSavedBillReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  billdetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSavedBillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_billDetails;
        break;
      }

      // repeated .com.mservice.momo.msg.BillDetail billDetails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_billdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_billDetails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSavedBillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // repeated .com.mservice.momo.msg.BillDetail billDetails = 2;
  for (int i = 0; i < this->billdetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->billdetails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSavedBillReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // repeated .com.mservice.momo.msg.BillDetail billDetails = 2;
  for (int i = 0; i < this->billdetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->billdetails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSavedBillReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  // repeated .com.mservice.momo.msg.BillDetail billDetails = 2;
  total_size += 1 * this->billdetails_size();
  for (int i = 0; i < this->billdetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->billdetails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSavedBillReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSavedBillReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSavedBillReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSavedBillReply::MergeFrom(const GetSavedBillReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  billdetails_.MergeFrom(from.billdetails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSavedBillReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSavedBillReply::CopyFrom(const GetSavedBillReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSavedBillReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSavedBillReply::Swap(GetSavedBillReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    billdetails_.Swap(&other->billdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSavedBillReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSavedBillReply_descriptor_;
  metadata.reflection = GetSavedBillReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSavedBill::kPhoneNumberFieldNumber;
const int RemoveSavedBill::kPinFieldNumber;
const int RemoveSavedBill::kProviderIdFieldNumber;
const int RemoveSavedBill::kBillIdFieldNumber;
#endif  // !_MSC_VER

RemoveSavedBill::RemoveSavedBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveSavedBill::InitAsDefaultInstance() {
}

RemoveSavedBill::RemoveSavedBill(const RemoveSavedBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveSavedBill::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSavedBill::~RemoveSavedBill() {
  SharedDtor();
}

void RemoveSavedBill::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void RemoveSavedBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSavedBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSavedBill_descriptor_;
}

const RemoveSavedBill& RemoveSavedBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

RemoveSavedBill* RemoveSavedBill::default_instance_ = NULL;

RemoveSavedBill* RemoveSavedBill::New() const {
  return new RemoveSavedBill;
}

void RemoveSavedBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSavedBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerId;
        break;
      }

      // required string providerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billId;
        break;
      }

      // required string billId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveSavedBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->providerid(), output);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->billid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveSavedBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string providerId = 3;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->providerid(), target);
  }

  // required string billId = 4;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->billid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveSavedBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string providerId = 3;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string billId = 4;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSavedBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSavedBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSavedBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSavedBill::MergeFrom(const RemoveSavedBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSavedBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSavedBill::CopyFrom(const RemoveSavedBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSavedBill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RemoveSavedBill::Swap(RemoveSavedBill* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSavedBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSavedBill_descriptor_;
  metadata.reflection = RemoveSavedBill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RemoveSavedBillReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSavedBillReply_Result_descriptor_;
}
bool RemoveSavedBillReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RemoveSavedBillReply_Result RemoveSavedBillReply::SUCCESS;
const RemoveSavedBillReply_Result RemoveSavedBillReply::FAIL;
const RemoveSavedBillReply_Result RemoveSavedBillReply::Result_MIN;
const RemoveSavedBillReply_Result RemoveSavedBillReply::Result_MAX;
const int RemoveSavedBillReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RemoveSavedBillReply::kPhoneNumberFieldNumber;
const int RemoveSavedBillReply::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveSavedBillReply::RemoveSavedBillReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveSavedBillReply::InitAsDefaultInstance() {
}

RemoveSavedBillReply::RemoveSavedBillReply(const RemoveSavedBillReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveSavedBillReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSavedBillReply::~RemoveSavedBillReply() {
  SharedDtor();
}

void RemoveSavedBillReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveSavedBillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSavedBillReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSavedBillReply_descriptor_;
}

const RemoveSavedBillReply& RemoveSavedBillReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

RemoveSavedBillReply* RemoveSavedBillReply::default_instance_ = NULL;

RemoveSavedBillReply* RemoveSavedBillReply::New() const {
  return new RemoveSavedBillReply;
}

void RemoveSavedBillReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSavedBillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::RemoveSavedBillReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::RemoveSavedBillReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveSavedBillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveSavedBillReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveSavedBillReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSavedBillReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSavedBillReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSavedBillReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSavedBillReply::MergeFrom(const RemoveSavedBillReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSavedBillReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSavedBillReply::CopyFrom(const RemoveSavedBillReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSavedBillReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemoveSavedBillReply::Swap(RemoveSavedBillReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSavedBillReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSavedBillReply_descriptor_;
  metadata.reflection = RemoveSavedBillReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankIn::kPhoneNumberFieldNumber;
const int BankIn::kPinFieldNumber;
const int BankIn::kBankCodeFieldNumber;
const int BankIn::kAmountFieldNumber;
#endif  // !_MSC_VER

BankIn::BankIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankIn::InitAsDefaultInstance() {
}

BankIn::BankIn(const BankIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankIn::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankIn::~BankIn() {
  SharedDtor();
}

void BankIn::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcode_;
  }
  if (this != default_instance_) {
  }
}

void BankIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankIn_descriptor_;
}

const BankIn& BankIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankIn* BankIn::default_instance_ = NULL;

BankIn* BankIn::New() const {
  return new BankIn;
}

void BankIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_bankcode()) {
      if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
        bankcode_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankCode;
        break;
      }

      // required string bankCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcode().data(), this->bankcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string bankCode = 3;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcode().data(), this->bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankcode(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string bankCode = 3;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcode().data(), this->bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankcode(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string bankCode = 3;
    if (has_bankcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcode());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankIn::MergeFrom(const BankIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_bankcode()) {
      set_bankcode(from.bankcode());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankIn::CopyFrom(const BankIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BankIn::Swap(BankIn* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(bankcode_, other->bankcode_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankIn_descriptor_;
  metadata.reflection = BankIn_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BankInReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankInReply_Result_descriptor_;
}
bool BankInReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BankInReply_Result BankInReply::SUCCESS;
const BankInReply_Result BankInReply::FAILED;
const BankInReply_Result BankInReply::Result_MIN;
const BankInReply_Result BankInReply::Result_MAX;
const int BankInReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BankInReply::kPhoneNumberFieldNumber;
const int BankInReply::kResultFieldNumber;
const int BankInReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

BankInReply::BankInReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankInReply::InitAsDefaultInstance() {
}

BankInReply::BankInReply(const BankInReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankInReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankInReply::~BankInReply() {
  SharedDtor();
}

void BankInReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void BankInReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankInReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankInReply_descriptor_;
}

const BankInReply& BankInReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankInReply* BankInReply::default_instance_ = NULL;

BankInReply* BankInReply::New() const {
  return new BankInReply;
}

void BankInReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankInReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.BankInReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::BankInReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::BankInReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankInReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.BankInReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankInReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.BankInReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankInReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.BankInReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankInReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankInReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankInReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankInReply::MergeFrom(const BankInReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankInReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankInReply::CopyFrom(const BankInReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankInReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BankInReply::Swap(BankInReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankInReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankInReply_descriptor_;
  metadata.reflection = BankInReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankOut::kPhoneNumberFieldNumber;
const int BankOut::kPinFieldNumber;
const int BankOut::kBankCodeFieldNumber;
const int BankOut::kAmountFieldNumber;
#endif  // !_MSC_VER

BankOut::BankOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankOut::InitAsDefaultInstance() {
}

BankOut::BankOut(const BankOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankOut::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankOut::~BankOut() {
  SharedDtor();
}

void BankOut::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bankcode_;
  }
  if (this != default_instance_) {
  }
}

void BankOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankOut_descriptor_;
}

const BankOut& BankOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankOut* BankOut::default_instance_ = NULL;

BankOut* BankOut::New() const {
  return new BankOut;
}

void BankOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_bankcode()) {
      if (bankcode_ != &::google::protobuf::internal::kEmptyString) {
        bankcode_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankCode;
        break;
      }

      // required string bankCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankcode().data(), this->bankcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string bankCode = 3;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcode().data(), this->bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankcode(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string bankCode = 3;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankcode().data(), this->bankcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankcode(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string bankCode = 3;
    if (has_bankcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankcode());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankOut::MergeFrom(const BankOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_bankcode()) {
      set_bankcode(from.bankcode());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankOut::CopyFrom(const BankOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BankOut::Swap(BankOut* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(bankcode_, other->bankcode_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankOut_descriptor_;
  metadata.reflection = BankOut_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BankOutReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankOutReply_Result_descriptor_;
}
bool BankOutReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BankOutReply_Result BankOutReply::SUCCESS;
const BankOutReply_Result BankOutReply::FAILED;
const BankOutReply_Result BankOutReply::Result_MIN;
const BankOutReply_Result BankOutReply::Result_MAX;
const int BankOutReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BankOutReply::kPhoneNumberFieldNumber;
const int BankOutReply::kResultFieldNumber;
const int BankOutReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

BankOutReply::BankOutReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankOutReply::InitAsDefaultInstance() {
}

BankOutReply::BankOutReply(const BankOutReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankOutReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankOutReply::~BankOutReply() {
  SharedDtor();
}

void BankOutReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void BankOutReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankOutReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankOutReply_descriptor_;
}

const BankOutReply& BankOutReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankOutReply* BankOutReply::default_instance_ = NULL;

BankOutReply* BankOutReply::New() const {
  return new BankOutReply;
}

void BankOutReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankOutReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.BankOutReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::BankOutReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::BankOutReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankOutReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.BankOutReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankOutReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.BankOutReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankOutReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.BankOutReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankOutReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankOutReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankOutReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankOutReply::MergeFrom(const BankOutReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankOutReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankOutReply::CopyFrom(const BankOutReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankOutReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BankOutReply::Swap(BankOutReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankOutReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankOutReply_descriptor_;
  metadata.reflection = BankOutReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BanknetToMomo::kPhoneNumberFieldNumber;
const int BanknetToMomo::kPinFieldNumber;
const int BanknetToMomo::kBankIdFieldNumber;
const int BanknetToMomo::kAmountFieldNumber;
const int BanknetToMomo::kCardHolderNameFieldNumber;
const int BanknetToMomo::kCardHolderNumberFieldNumber;
const int BanknetToMomo::kCardHolderMonthFieldNumber;
const int BanknetToMomo::kCardHolderYearFieldNumber;
#endif  // !_MSC_VER

BanknetToMomo::BanknetToMomo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BanknetToMomo::InitAsDefaultInstance() {
}

BanknetToMomo::BanknetToMomo(const BanknetToMomo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BanknetToMomo::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  cardholdername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardholdernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardholdermonth_ = 0u;
  cardholderyear_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanknetToMomo::~BanknetToMomo() {
  SharedDtor();
}

void BanknetToMomo::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (cardholdername_ != &::google::protobuf::internal::kEmptyString) {
    delete cardholdername_;
  }
  if (cardholdernumber_ != &::google::protobuf::internal::kEmptyString) {
    delete cardholdernumber_;
  }
  if (this != default_instance_) {
  }
}

void BanknetToMomo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanknetToMomo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanknetToMomo_descriptor_;
}

const BanknetToMomo& BanknetToMomo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BanknetToMomo* BanknetToMomo::default_instance_ = NULL;

BanknetToMomo* BanknetToMomo::New() const {
  return new BanknetToMomo;
}

void BanknetToMomo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_cardholdername()) {
      if (cardholdername_ != &::google::protobuf::internal::kEmptyString) {
        cardholdername_->clear();
      }
    }
    if (has_cardholdernumber()) {
      if (cardholdernumber_ != &::google::protobuf::internal::kEmptyString) {
        cardholdernumber_->clear();
      }
    }
    cardholdermonth_ = 0u;
    cardholderyear_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BanknetToMomo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankId;
        break;
      }

      // required string bankId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cardHolderName;
        break;
      }

      // required string cardHolderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardHolderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardholdername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardholdername().data(), this->cardholdername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardHolderNumber;
        break;
      }

      // required string cardHolderNumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardHolderNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardholdernumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardholdernumber().data(), this->cardholdernumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cardHolderMonth;
        break;
      }

      // required uint32 cardHolderMonth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardHolderMonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardholdermonth_)));
          set_has_cardholdermonth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cardHolderYear;
        break;
      }

      // required uint32 cardHolderYear = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardHolderYear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardholderyear_)));
          set_has_cardholderyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BanknetToMomo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required string bankId = 3;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankid(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // required string cardHolderName = 5;
  if (has_cardholdername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardholdername().data(), this->cardholdername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cardholdername(), output);
  }

  // required string cardHolderNumber = 6;
  if (has_cardholdernumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardholdernumber().data(), this->cardholdernumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cardholdernumber(), output);
  }

  // required uint32 cardHolderMonth = 7;
  if (has_cardholdermonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cardholdermonth(), output);
  }

  // required uint32 cardHolderYear = 8;
  if (has_cardholderyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cardholderyear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BanknetToMomo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required string bankId = 3;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankid(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // required string cardHolderName = 5;
  if (has_cardholdername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardholdername().data(), this->cardholdername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cardholdername(), target);
  }

  // required string cardHolderNumber = 6;
  if (has_cardholdernumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardholdernumber().data(), this->cardholdernumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cardholdernumber(), target);
  }

  // required uint32 cardHolderMonth = 7;
  if (has_cardholdermonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cardholdermonth(), target);
  }

  // required uint32 cardHolderYear = 8;
  if (has_cardholderyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cardholderyear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BanknetToMomo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required string bankId = 3;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required string cardHolderName = 5;
    if (has_cardholdername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardholdername());
    }

    // required string cardHolderNumber = 6;
    if (has_cardholdernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardholdernumber());
    }

    // required uint32 cardHolderMonth = 7;
    if (has_cardholdermonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardholdermonth());
    }

    // required uint32 cardHolderYear = 8;
    if (has_cardholderyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardholderyear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanknetToMomo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BanknetToMomo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BanknetToMomo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BanknetToMomo::MergeFrom(const BanknetToMomo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_cardholdername()) {
      set_cardholdername(from.cardholdername());
    }
    if (from.has_cardholdernumber()) {
      set_cardholdernumber(from.cardholdernumber());
    }
    if (from.has_cardholdermonth()) {
      set_cardholdermonth(from.cardholdermonth());
    }
    if (from.has_cardholderyear()) {
      set_cardholderyear(from.cardholderyear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BanknetToMomo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanknetToMomo::CopyFrom(const BanknetToMomo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanknetToMomo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void BanknetToMomo::Swap(BanknetToMomo* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(bankid_, other->bankid_);
    std::swap(amount_, other->amount_);
    std::swap(cardholdername_, other->cardholdername_);
    std::swap(cardholdernumber_, other->cardholdernumber_);
    std::swap(cardholdermonth_, other->cardholdermonth_);
    std::swap(cardholderyear_, other->cardholderyear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BanknetToMomo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanknetToMomo_descriptor_;
  metadata.reflection = BanknetToMomo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BanknetToMomoReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanknetToMomoReply_Result_descriptor_;
}
bool BanknetToMomoReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BanknetToMomoReply_Result BanknetToMomoReply::SUCCESS;
const BanknetToMomoReply_Result BanknetToMomoReply::FAILED;
const BanknetToMomoReply_Result BanknetToMomoReply::Result_MIN;
const BanknetToMomoReply_Result BanknetToMomoReply::Result_MAX;
const int BanknetToMomoReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BanknetToMomoReply::kPhoneNumberFieldNumber;
const int BanknetToMomoReply::kResultFieldNumber;
const int BanknetToMomoReply::kTransactionIdFieldNumber;
const int BanknetToMomoReply::kMerchantTransactionIdFieldNumber;
const int BanknetToMomoReply::kBanketErrorFieldNumber;
#endif  // !_MSC_VER

BanknetToMomoReply::BanknetToMomoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BanknetToMomoReply::InitAsDefaultInstance() {
}

BanknetToMomoReply::BanknetToMomoReply(const BanknetToMomoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BanknetToMomoReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  merchanttransactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  banketerror_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanknetToMomoReply::~BanknetToMomoReply() {
  SharedDtor();
}

void BanknetToMomoReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete merchanttransactionid_;
  }
  if (this != default_instance_) {
  }
}

void BanknetToMomoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanknetToMomoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanknetToMomoReply_descriptor_;
}

const BanknetToMomoReply& BanknetToMomoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BanknetToMomoReply* BanknetToMomoReply::default_instance_ = NULL;

BanknetToMomoReply* BanknetToMomoReply::New() const {
  return new BanknetToMomoReply;
}

void BanknetToMomoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
    if (has_merchanttransactionid()) {
      if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
        merchanttransactionid_->clear();
      }
    }
    banketerror_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BanknetToMomoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.BanknetToMomoReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::BanknetToMomoReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::BanknetToMomoReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // required string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_merchantTransactionId;
        break;
      }

      // required string merchantTransactionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merchantTransactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchanttransactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->merchanttransactionid().data(), this->merchanttransactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banketError;
        break;
      }

      // optional uint32 banketError = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banketError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banketerror_)));
          set_has_banketerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BanknetToMomoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.BanknetToMomoReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // required string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  // required string merchantTransactionId = 4;
  if (has_merchanttransactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchanttransactionid().data(), this->merchanttransactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->merchanttransactionid(), output);
  }

  // optional uint32 banketError = 5;
  if (has_banketerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->banketerror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BanknetToMomoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.BanknetToMomoReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // required string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  // required string merchantTransactionId = 4;
  if (has_merchanttransactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchanttransactionid().data(), this->merchanttransactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->merchanttransactionid(), target);
  }

  // optional uint32 banketError = 5;
  if (has_banketerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->banketerror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BanknetToMomoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.BanknetToMomoReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

    // required string merchantTransactionId = 4;
    if (has_merchanttransactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchanttransactionid());
    }

    // optional uint32 banketError = 5;
    if (has_banketerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banketerror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanknetToMomoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BanknetToMomoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BanknetToMomoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BanknetToMomoReply::MergeFrom(const BanknetToMomoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
    if (from.has_merchanttransactionid()) {
      set_merchanttransactionid(from.merchanttransactionid());
    }
    if (from.has_banketerror()) {
      set_banketerror(from.banketerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BanknetToMomoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanknetToMomoReply::CopyFrom(const BanknetToMomoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanknetToMomoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BanknetToMomoReply::Swap(BanknetToMomoReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(merchanttransactionid_, other->merchanttransactionid_);
    std::swap(banketerror_, other->banketerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BanknetToMomoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanknetToMomoReply_descriptor_;
  metadata.reflection = BanknetToMomoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyBanknetOtp::kPhoneNumberFieldNumber;
const int VerifyBanknetOtp::kAmountFieldNumber;
const int VerifyBanknetOtp::kTransactionIdFieldNumber;
const int VerifyBanknetOtp::kMerchantTransactionIdFieldNumber;
const int VerifyBanknetOtp::kOtpFieldNumber;
const int VerifyBanknetOtp::kBankIdFieldNumber;
#endif  // !_MSC_VER

VerifyBanknetOtp::VerifyBanknetOtp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyBanknetOtp::InitAsDefaultInstance() {
}

VerifyBanknetOtp::VerifyBanknetOtp(const VerifyBanknetOtp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyBanknetOtp::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  merchanttransactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyBanknetOtp::~VerifyBanknetOtp() {
  SharedDtor();
}

void VerifyBanknetOtp::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete merchanttransactionid_;
  }
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (this != default_instance_) {
  }
}

void VerifyBanknetOtp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyBanknetOtp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyBanknetOtp_descriptor_;
}

const VerifyBanknetOtp& VerifyBanknetOtp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

VerifyBanknetOtp* VerifyBanknetOtp::default_instance_ = NULL;

VerifyBanknetOtp* VerifyBanknetOtp::New() const {
  return new VerifyBanknetOtp;
}

void VerifyBanknetOtp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
    if (has_merchanttransactionid()) {
      if (merchanttransactionid_ != &::google::protobuf::internal::kEmptyString) {
        merchanttransactionid_->clear();
      }
    }
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyBanknetOtp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // required uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // required string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_merchantTransactionId;
        break;
      }

      // required string merchantTransactionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merchantTransactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchanttransactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->merchanttransactionid().data(), this->merchanttransactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_otp;
        break;
      }

      // required string otp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bankId;
        break;
      }

      // required string bankId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyBanknetOtp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // required string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  // required string merchantTransactionId = 4;
  if (has_merchanttransactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchanttransactionid().data(), this->merchanttransactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->merchanttransactionid(), output);
  }

  // required string otp = 5;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->otp(), output);
  }

  // required string bankId = 6;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyBanknetOtp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required uint64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // required string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  // required string merchantTransactionId = 4;
  if (has_merchanttransactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merchanttransactionid().data(), this->merchanttransactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->merchanttransactionid(), target);
  }

  // required string otp = 5;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->otp(), target);
  }

  // required string bankId = 6;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyBanknetOtp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

    // required string merchantTransactionId = 4;
    if (has_merchanttransactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchanttransactionid());
    }

    // required string otp = 5;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

    // required string bankId = 6;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyBanknetOtp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyBanknetOtp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyBanknetOtp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyBanknetOtp::MergeFrom(const VerifyBanknetOtp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
    if (from.has_merchanttransactionid()) {
      set_merchanttransactionid(from.merchanttransactionid());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyBanknetOtp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyBanknetOtp::CopyFrom(const VerifyBanknetOtp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyBanknetOtp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void VerifyBanknetOtp::Swap(VerifyBanknetOtp* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(amount_, other->amount_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(merchanttransactionid_, other->merchanttransactionid_);
    std::swap(otp_, other->otp_);
    std::swap(bankid_, other->bankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyBanknetOtp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyBanknetOtp_descriptor_;
  metadata.reflection = VerifyBanknetOtp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyBanknetOtpReply::kPhoneNumberFieldNumber;
const int VerifyBanknetOtpReply::kResultFieldNumber;
#endif  // !_MSC_VER

VerifyBanknetOtpReply::VerifyBanknetOtpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyBanknetOtpReply::InitAsDefaultInstance() {
}

VerifyBanknetOtpReply::VerifyBanknetOtpReply(const VerifyBanknetOtpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyBanknetOtpReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyBanknetOtpReply::~VerifyBanknetOtpReply() {
  SharedDtor();
}

void VerifyBanknetOtpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyBanknetOtpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyBanknetOtpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyBanknetOtpReply_descriptor_;
}

const VerifyBanknetOtpReply& VerifyBanknetOtpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

VerifyBanknetOtpReply* VerifyBanknetOtpReply::default_instance_ = NULL;

VerifyBanknetOtpReply* VerifyBanknetOtpReply::New() const {
  return new VerifyBanknetOtpReply;
}

void VerifyBanknetOtpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyBanknetOtpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyBanknetOtpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyBanknetOtpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyBanknetOtpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyBanknetOtpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyBanknetOtpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyBanknetOtpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyBanknetOtpReply::MergeFrom(const VerifyBanknetOtpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyBanknetOtpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyBanknetOtpReply::CopyFrom(const VerifyBanknetOtpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyBanknetOtpReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VerifyBanknetOtpReply::Swap(VerifyBanknetOtpReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyBanknetOtpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyBanknetOtpReply_descriptor_;
  metadata.reflection = VerifyBanknetOtpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location::kLongitudeFieldNumber;
const int Location::kLatitudeFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Location::InitAsDefaultInstance() {
}

Location::Location(const Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    longitude_ = 0;
    latitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // optional double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // optional double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreInfo::kNameFieldNumber;
const int StoreInfo::kOwnerNameFieldNumber;
const int StoreInfo::kOwnerPhoneFieldNumber;
const int StoreInfo::kLocationFieldNumber;
const int StoreInfo::kAddressFieldNumber;
const int StoreInfo::kDistrictIdFieldNumber;
const int StoreInfo::kCityIdFieldNumber;
const int StoreInfo::kAreaIdFieldNumber;
const int StoreInfo::kStreetFieldNumber;
const int StoreInfo::kWardNameFieldNumber;
#endif  // !_MSC_VER

StoreInfo::StoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::com::mservice::momo::msg::Location*>(&::com::mservice::momo::msg::Location::default_instance());
}

StoreInfo::StoreInfo(const StoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownerphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = NULL;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  districtid_ = 0u;
  cityid_ = 0u;
  areaid_ = 0u;
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreInfo::~StoreInfo() {
  SharedDtor();
}

void StoreInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownerphone_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerphone_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (wardname_ != &::google::protobuf::internal::kEmptyString) {
    delete wardname_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void StoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreInfo_descriptor_;
}

const StoreInfo& StoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

StoreInfo* StoreInfo::default_instance_ = NULL;

StoreInfo* StoreInfo::New() const {
  return new StoreInfo;
}

void StoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    if (has_ownerphone()) {
      if (ownerphone_ != &::google::protobuf::internal::kEmptyString) {
        ownerphone_->clear();
      }
    }
    if (has_location()) {
      if (location_ != NULL) location_->::com::mservice::momo::msg::Location::Clear();
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    districtid_ = 0u;
    cityid_ = 0u;
    areaid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_wardname()) {
      if (wardname_ != &::google::protobuf::internal::kEmptyString) {
        wardname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ownerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ownerPhone;
        break;
      }

      // optional string ownerPhone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownerphone().data(), this->ownerphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional .com.mservice.momo.msg.Location location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional string address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_districtId;
        break;
      }

      // optional uint32 districtId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_districtId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &districtid_)));
          set_has_districtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_areaId;
        break;
      }

      // optional uint32 areaId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_street;
        break;
      }

      // optional string street = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wardName;
        break;
      }

      // optional string wardName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wardname().data(), this->wardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ownerName = 1;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ownername(), output);
  }

  // optional string ownerPhone = 2;
  if (has_ownerphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerphone().data(), this->ownerphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ownerphone(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional .com.mservice.momo.msg.Location location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(), output);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address(), output);
  }

  // optional uint32 districtId = 6;
  if (has_districtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->districtid(), output);
  }

  // optional uint32 cityId = 7;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cityid(), output);
  }

  // optional uint32 areaId = 8;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->areaid(), output);
  }

  // optional string street = 9;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->street(), output);
  }

  // optional string wardName = 10;
  if (has_wardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wardname().data(), this->wardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->wardname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ownerName = 1;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ownername(), target);
  }

  // optional string ownerPhone = 2;
  if (has_ownerphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerphone().data(), this->ownerphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ownerphone(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .com.mservice.momo.msg.Location location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(), target);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->address(), target);
  }

  // optional uint32 districtId = 6;
  if (has_districtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->districtid(), target);
  }

  // optional uint32 cityId = 7;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cityid(), target);
  }

  // optional uint32 areaId = 8;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->areaid(), target);
  }

  // optional string street = 9;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->street(), target);
  }

  // optional string wardName = 10;
  if (has_wardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wardname().data(), this->wardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->wardname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ownerName = 1;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

    // optional string ownerPhone = 2;
    if (has_ownerphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownerphone());
    }

    // optional .com.mservice.momo.msg.Location location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional string address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 districtId = 6;
    if (has_districtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->districtid());
    }

    // optional uint32 cityId = 7;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 areaId = 8;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string street = 9;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string wardName = 10;
    if (has_wardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wardname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreInfo::MergeFrom(const StoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_ownerphone()) {
      set_ownerphone(from.ownerphone());
    }
    if (from.has_location()) {
      mutable_location()->::com::mservice::momo::msg::Location::MergeFrom(from.location());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_districtid()) {
      set_districtid(from.districtid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_wardname()) {
      set_wardname(from.wardname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreInfo::CopyFrom(const StoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreInfo::IsInitialized() const {

  return true;
}

void StoreInfo::Swap(StoreInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ownername_, other->ownername_);
    std::swap(ownerphone_, other->ownerphone_);
    std::swap(location_, other->location_);
    std::swap(address_, other->address_);
    std::swap(districtid_, other->districtid_);
    std::swap(cityid_, other->cityid_);
    std::swap(areaid_, other->areaid_);
    std::swap(street_, other->street_);
    std::swap(wardname_, other->wardname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreInfo_descriptor_;
  metadata.reflection = StoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreAround::kLongitudeFieldNumber;
const int GetStoreAround::kLatitudeFieldNumber;
const int GetStoreAround::kCityIdFieldNumber;
const int GetStoreAround::kDistrictIdFieldNumber;
const int GetStoreAround::kLimitFieldNumber;
#endif  // !_MSC_VER

GetStoreAround::GetStoreAround()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreAround::InitAsDefaultInstance() {
}

GetStoreAround::GetStoreAround(const GetStoreAround& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreAround::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  cityid_ = 0u;
  districtid_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreAround::~GetStoreAround() {
  SharedDtor();
}

void GetStoreAround::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreAround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreAround::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreAround_descriptor_;
}

const GetStoreAround& GetStoreAround::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetStoreAround* GetStoreAround::default_instance_ = NULL;

GetStoreAround* GetStoreAround::New() const {
  return new GetStoreAround;
}

void GetStoreAround::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    longitude_ = 0;
    latitude_ = 0;
    cityid_ = 0u;
    districtid_ = 0u;
    limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreAround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_districtId;
        break;
      }

      // optional uint32 districtId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_districtId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &districtid_)));
          set_has_districtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreAround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional uint32 cityId = 3;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cityid(), output);
  }

  // optional uint32 districtId = 4;
  if (has_districtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->districtid(), output);
  }

  // optional uint32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreAround::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional uint32 cityId = 3;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cityid(), target);
  }

  // optional uint32 districtId = 4;
  if (has_districtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->districtid(), target);
  }

  // optional uint32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreAround::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional uint32 cityId = 3;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 districtId = 4;
    if (has_districtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->districtid());
    }

    // optional uint32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreAround::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreAround* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreAround*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreAround::MergeFrom(const GetStoreAround& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_districtid()) {
      set_districtid(from.districtid());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreAround::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreAround::CopyFrom(const GetStoreAround& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreAround::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetStoreAround::Swap(GetStoreAround* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(cityid_, other->cityid_);
    std::swap(districtid_, other->districtid_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreAround::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreAround_descriptor_;
  metadata.reflection = GetStoreAround_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreAroundReply::kStoresFieldNumber;
#endif  // !_MSC_VER

GetStoreAroundReply::GetStoreAroundReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreAroundReply::InitAsDefaultInstance() {
}

GetStoreAroundReply::GetStoreAroundReply(const GetStoreAroundReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreAroundReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreAroundReply::~GetStoreAroundReply() {
  SharedDtor();
}

void GetStoreAroundReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreAroundReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreAroundReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreAroundReply_descriptor_;
}

const GetStoreAroundReply& GetStoreAroundReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetStoreAroundReply* GetStoreAroundReply::default_instance_ = NULL;

GetStoreAroundReply* GetStoreAroundReply::New() const {
  return new GetStoreAroundReply;
}

void GetStoreAroundReply::Clear() {
  stores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreAroundReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.StoreInfo stores = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreAroundReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.StoreInfo stores = 1;
  for (int i = 0; i < this->stores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreAroundReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.mservice.momo.msg.StoreInfo stores = 1;
  for (int i = 0; i < this->stores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreAroundReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.StoreInfo stores = 1;
  total_size += 1 * this->stores_size();
  for (int i = 0; i < this->stores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreAroundReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreAroundReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreAroundReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreAroundReply::MergeFrom(const GetStoreAroundReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  stores_.MergeFrom(from.stores_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreAroundReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreAroundReply::CopyFrom(const GetStoreAroundReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreAroundReply::IsInitialized() const {

  return true;
}

void GetStoreAroundReply::Swap(GetStoreAroundReply* other) {
  if (other != this) {
    stores_.Swap(&other->stores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreAroundReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreAroundReply_descriptor_;
  metadata.reflection = GetStoreAroundReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreByCode::kCidFieldNumber;
const int GetStoreByCode::kDidFieldNumber;
const int GetStoreByCode::kPageSizeFieldNumber;
const int GetStoreByCode::kPageNumFieldNumber;
#endif  // !_MSC_VER

GetStoreByCode::GetStoreByCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreByCode::InitAsDefaultInstance() {
}

GetStoreByCode::GetStoreByCode(const GetStoreByCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreByCode::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  did_ = 0u;
  pagesize_ = 0u;
  pagenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreByCode::~GetStoreByCode() {
  SharedDtor();
}

void GetStoreByCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreByCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreByCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreByCode_descriptor_;
}

const GetStoreByCode& GetStoreByCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetStoreByCode* GetStoreByCode::default_instance_ = NULL;

GetStoreByCode* GetStoreByCode::New() const {
  return new GetStoreByCode;
}

void GetStoreByCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    did_ = 0u;
    pagesize_ = 0u;
    pagenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreByCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_did;
        break;
      }

      // optional uint32 did = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_did:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &did_)));
          set_has_did();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pageSize;
        break;
      }

      // required uint32 pageSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pageNum;
        break;
      }

      // required uint32 pageNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreByCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // optional uint32 did = 2;
  if (has_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->did(), output);
  }

  // required uint32 pageSize = 3;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pagesize(), output);
  }

  // required uint32 pageNum = 4;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreByCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // optional uint32 did = 2;
  if (has_did()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->did(), target);
  }

  // required uint32 pageSize = 3;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pagesize(), target);
  }

  // required uint32 pageNum = 4;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreByCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional uint32 did = 2;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->did());
    }

    // required uint32 pageSize = 3;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

    // required uint32 pageNum = 4;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreByCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreByCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreByCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreByCode::MergeFrom(const GetStoreByCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreByCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreByCode::CopyFrom(const GetStoreByCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreByCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void GetStoreByCode::Swap(GetStoreByCode* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(did_, other->did_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(pagenum_, other->pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreByCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreByCode_descriptor_;
  metadata.reflection = GetStoreByCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreByCodeReply::kPageCountFieldNumber;
const int GetStoreByCodeReply::kStoresFieldNumber;
#endif  // !_MSC_VER

GetStoreByCodeReply::GetStoreByCodeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreByCodeReply::InitAsDefaultInstance() {
}

GetStoreByCodeReply::GetStoreByCodeReply(const GetStoreByCodeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreByCodeReply::SharedCtor() {
  _cached_size_ = 0;
  pagecount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreByCodeReply::~GetStoreByCodeReply() {
  SharedDtor();
}

void GetStoreByCodeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreByCodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreByCodeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreByCodeReply_descriptor_;
}

const GetStoreByCodeReply& GetStoreByCodeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetStoreByCodeReply* GetStoreByCodeReply::default_instance_ = NULL;

GetStoreByCodeReply* GetStoreByCodeReply::New() const {
  return new GetStoreByCodeReply;
}

void GetStoreByCodeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagecount_ = GOOGLE_ULONGLONG(0);
  }
  stores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreByCodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pageCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pagecount_)));
          set_has_pagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stores;
        break;
      }

      // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreByCodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 pageCount = 1;
  if (has_pagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pagecount(), output);
  }

  // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
  for (int i = 0; i < this->stores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreByCodeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 pageCount = 1;
  if (has_pagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pagecount(), target);
  }

  // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
  for (int i = 0; i < this->stores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreByCodeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pageCount = 1;
    if (has_pagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pagecount());
    }

  }
  // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
  total_size += 1 * this->stores_size();
  for (int i = 0; i < this->stores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreByCodeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreByCodeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreByCodeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreByCodeReply::MergeFrom(const GetStoreByCodeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  stores_.MergeFrom(from.stores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagecount()) {
      set_pagecount(from.pagecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreByCodeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreByCodeReply::CopyFrom(const GetStoreByCodeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreByCodeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetStoreByCodeReply::Swap(GetStoreByCodeReply* other) {
  if (other != this) {
    std::swap(pagecount_, other->pagecount_);
    stores_.Swap(&other->stores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreByCodeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreByCodeReply_descriptor_;
  metadata.reflection = GetStoreByCodeReply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KeyValueData_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueData_CommandType_descriptor_;
}
bool KeyValueData_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeyValueData_CommandType KeyValueData::GET;
const KeyValueData_CommandType KeyValueData::PUT;
const KeyValueData_CommandType KeyValueData::CommandType_MIN;
const KeyValueData_CommandType KeyValueData::CommandType_MAX;
const int KeyValueData::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int KeyValueData::kCommandTypeFieldNumber;
const int KeyValueData::kKeyFieldNumber;
const int KeyValueData::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValueData::KeyValueData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValueData::InitAsDefaultInstance() {
}

KeyValueData::KeyValueData(const KeyValueData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValueData::SharedCtor() {
  _cached_size_ = 0;
  commandtype_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueData::~KeyValueData() {
  SharedDtor();
}

void KeyValueData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValueData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueData_descriptor_;
}

const KeyValueData& KeyValueData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

KeyValueData* KeyValueData::default_instance_ = NULL;

KeyValueData* KeyValueData::New() const {
  return new KeyValueData;
}

void KeyValueData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandtype_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.KeyValueData.CommandType commandType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::KeyValueData_CommandType_IsValid(value)) {
            set_commandtype(static_cast< ::com::mservice::momo::msg::KeyValueData_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValueData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.KeyValueData.CommandType commandType = 1;
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commandtype(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValueData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.KeyValueData.CommandType commandType = 1;
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commandtype(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValueData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.KeyValueData.CommandType commandType = 1;
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandtype());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueData::MergeFrom(const KeyValueData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueData::CopyFrom(const KeyValueData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyValueData::Swap(KeyValueData* other) {
  if (other != this) {
    std::swap(commandtype_, other->commandtype_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueData_descriptor_;
  metadata.reflection = KeyValueData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KeyValueDataReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueDataReply_Result_descriptor_;
}
bool KeyValueDataReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeyValueDataReply_Result KeyValueDataReply::SUCCESS;
const KeyValueDataReply_Result KeyValueDataReply::FAILED;
const KeyValueDataReply_Result KeyValueDataReply::Result_MIN;
const KeyValueDataReply_Result KeyValueDataReply::Result_MAX;
const int KeyValueDataReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int KeyValueDataReply::kResultFieldNumber;
const int KeyValueDataReply::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValueDataReply::KeyValueDataReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValueDataReply::InitAsDefaultInstance() {
}

KeyValueDataReply::KeyValueDataReply(const KeyValueDataReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValueDataReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueDataReply::~KeyValueDataReply() {
  SharedDtor();
}

void KeyValueDataReply::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValueDataReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueDataReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueDataReply_descriptor_;
}

const KeyValueDataReply& KeyValueDataReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

KeyValueDataReply* KeyValueDataReply::default_instance_ = NULL;

KeyValueDataReply* KeyValueDataReply::New() const {
  return new KeyValueDataReply;
}

void KeyValueDataReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueDataReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.KeyValueDataReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::KeyValueDataReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::KeyValueDataReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValueDataReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.KeyValueDataReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValueDataReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.KeyValueDataReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValueDataReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.KeyValueDataReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueDataReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueDataReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueDataReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueDataReply::MergeFrom(const KeyValueDataReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueDataReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueDataReply::CopyFrom(const KeyValueDataReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueDataReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeyValueDataReply::Swap(KeyValueDataReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueDataReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueDataReply_descriptor_;
  metadata.reflection = KeyValueDataReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAvatarUploadToken::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

GetAvatarUploadToken::GetAvatarUploadToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAvatarUploadToken::InitAsDefaultInstance() {
}

GetAvatarUploadToken::GetAvatarUploadToken(const GetAvatarUploadToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAvatarUploadToken::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAvatarUploadToken::~GetAvatarUploadToken() {
  SharedDtor();
}

void GetAvatarUploadToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAvatarUploadToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAvatarUploadToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAvatarUploadToken_descriptor_;
}

const GetAvatarUploadToken& GetAvatarUploadToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetAvatarUploadToken* GetAvatarUploadToken::default_instance_ = NULL;

GetAvatarUploadToken* GetAvatarUploadToken::New() const {
  return new GetAvatarUploadToken;
}

void GetAvatarUploadToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAvatarUploadToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAvatarUploadToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAvatarUploadToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAvatarUploadToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAvatarUploadToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAvatarUploadToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAvatarUploadToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAvatarUploadToken::MergeFrom(const GetAvatarUploadToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAvatarUploadToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAvatarUploadToken::CopyFrom(const GetAvatarUploadToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAvatarUploadToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAvatarUploadToken::Swap(GetAvatarUploadToken* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAvatarUploadToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAvatarUploadToken_descriptor_;
  metadata.reflection = GetAvatarUploadToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAvatarUploadTokenReply::kPhoneNumberFieldNumber;
const int GetAvatarUploadTokenReply::kTokenFieldNumber;
#endif  // !_MSC_VER

GetAvatarUploadTokenReply::GetAvatarUploadTokenReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAvatarUploadTokenReply::InitAsDefaultInstance() {
}

GetAvatarUploadTokenReply::GetAvatarUploadTokenReply(const GetAvatarUploadTokenReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAvatarUploadTokenReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAvatarUploadTokenReply::~GetAvatarUploadTokenReply() {
  SharedDtor();
}

void GetAvatarUploadTokenReply::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void GetAvatarUploadTokenReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAvatarUploadTokenReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAvatarUploadTokenReply_descriptor_;
}

const GetAvatarUploadTokenReply& GetAvatarUploadTokenReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetAvatarUploadTokenReply* GetAvatarUploadTokenReply::default_instance_ = NULL;

GetAvatarUploadTokenReply* GetAvatarUploadTokenReply::New() const {
  return new GetAvatarUploadTokenReply;
}

void GetAvatarUploadTokenReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAvatarUploadTokenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAvatarUploadTokenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAvatarUploadTokenReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAvatarUploadTokenReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAvatarUploadTokenReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAvatarUploadTokenReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAvatarUploadTokenReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAvatarUploadTokenReply::MergeFrom(const GetAvatarUploadTokenReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAvatarUploadTokenReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAvatarUploadTokenReply::CopyFrom(const GetAvatarUploadTokenReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAvatarUploadTokenReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetAvatarUploadTokenReply::Swap(GetAvatarUploadTokenReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAvatarUploadTokenReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAvatarUploadTokenReply_descriptor_;
  metadata.reflection = GetAvatarUploadTokenReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pay123MuaOrder::kPhoneNumberFieldNumber;
const int Pay123MuaOrder::kPinFieldNumber;
const int Pay123MuaOrder::kReceiverPhoneNumberFieldNumber;
const int Pay123MuaOrder::kAmountFieldNumber;
const int Pay123MuaOrder::kCommentFieldNumber;
const int Pay123MuaOrder::kOrderIdFieldNumber;
#endif  // !_MSC_VER

Pay123MuaOrder::Pay123MuaOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pay123MuaOrder::InitAsDefaultInstance() {
}

Pay123MuaOrder::Pay123MuaOrder(const Pay123MuaOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pay123MuaOrder::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverphonenumber_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pay123MuaOrder::~Pay123MuaOrder() {
  SharedDtor();
}

void Pay123MuaOrder::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void Pay123MuaOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pay123MuaOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay123MuaOrder_descriptor_;
}

const Pay123MuaOrder& Pay123MuaOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Pay123MuaOrder* Pay123MuaOrder::default_instance_ = NULL;

Pay123MuaOrder* Pay123MuaOrder::New() const {
  return new Pay123MuaOrder;
}

void Pay123MuaOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    receiverphonenumber_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pay123MuaOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // required string pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receiverPhoneNumber;
        break;
      }

      // required uint32 receiverPhoneNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverPhoneNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiverphonenumber_)));
          set_has_receiverphonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // required string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_orderId;
        break;
      }

      // required string orderId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pay123MuaOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pin(), output);
  }

  // required uint32 receiverPhoneNumber = 3;
  if (has_receiverphonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->receiverphonenumber(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // required string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }

  // required string orderId = 6;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pay123MuaOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string pin = 2;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required uint32 receiverPhoneNumber = 3;
  if (has_receiverphonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->receiverphonenumber(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // required string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  // required string orderId = 6;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pay123MuaOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string pin = 2;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // required uint32 receiverPhoneNumber = 3;
    if (has_receiverphonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiverphonenumber());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string orderId = 6;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pay123MuaOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pay123MuaOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pay123MuaOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pay123MuaOrder::MergeFrom(const Pay123MuaOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_receiverphonenumber()) {
      set_receiverphonenumber(from.receiverphonenumber());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pay123MuaOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pay123MuaOrder::CopyFrom(const Pay123MuaOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pay123MuaOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Pay123MuaOrder::Swap(Pay123MuaOrder* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(pin_, other->pin_);
    std::swap(receiverphonenumber_, other->receiverphonenumber_);
    std::swap(amount_, other->amount_);
    std::swap(comment_, other->comment_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pay123MuaOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pay123MuaOrder_descriptor_;
  metadata.reflection = Pay123MuaOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Pay123MuaOrderReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay123MuaOrderReply_Result_descriptor_;
}
bool Pay123MuaOrderReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Pay123MuaOrderReply_Result Pay123MuaOrderReply::SUCCESS;
const Pay123MuaOrderReply_Result Pay123MuaOrderReply::FAILED;
const Pay123MuaOrderReply_Result Pay123MuaOrderReply::ACCESS_DENIED;
const Pay123MuaOrderReply_Result Pay123MuaOrderReply::Result_MIN;
const Pay123MuaOrderReply_Result Pay123MuaOrderReply::Result_MAX;
const int Pay123MuaOrderReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Pay123MuaOrderReply::kPhoneNumberFieldNumber;
const int Pay123MuaOrderReply::kResultFieldNumber;
const int Pay123MuaOrderReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

Pay123MuaOrderReply::Pay123MuaOrderReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pay123MuaOrderReply::InitAsDefaultInstance() {
}

Pay123MuaOrderReply::Pay123MuaOrderReply(const Pay123MuaOrderReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pay123MuaOrderReply::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pay123MuaOrderReply::~Pay123MuaOrderReply() {
  SharedDtor();
}

void Pay123MuaOrderReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void Pay123MuaOrderReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pay123MuaOrderReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay123MuaOrderReply_descriptor_;
}

const Pay123MuaOrderReply& Pay123MuaOrderReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

Pay123MuaOrderReply* Pay123MuaOrderReply::default_instance_ = NULL;

Pay123MuaOrderReply* Pay123MuaOrderReply::New() const {
  return new Pay123MuaOrderReply;
}

void Pay123MuaOrderReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pay123MuaOrderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .com.mservice.momo.msg.Pay123MuaOrderReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::Pay123MuaOrderReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::Pay123MuaOrderReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pay123MuaOrderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required .com.mservice.momo.msg.Pay123MuaOrderReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pay123MuaOrderReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required .com.mservice.momo.msg.Pay123MuaOrderReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string transactionId = 3;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pay123MuaOrderReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required .com.mservice.momo.msg.Pay123MuaOrderReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 3;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pay123MuaOrderReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pay123MuaOrderReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pay123MuaOrderReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pay123MuaOrderReply::MergeFrom(const Pay123MuaOrderReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pay123MuaOrderReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pay123MuaOrderReply::CopyFrom(const Pay123MuaOrderReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pay123MuaOrderReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pay123MuaOrderReply::Swap(Pay123MuaOrderReply* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pay123MuaOrderReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pay123MuaOrderReply_descriptor_;
  metadata.reflection = Pay123MuaOrderReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionFee::kDynamicFeeFieldNumber;
const int TransactionFee::kStaticFeeFieldNumber;
const int TransactionFee::kBankIdFieldNumber;
const int TransactionFee::kTransTypeFieldNumber;
const int TransactionFee::kChannelFieldNumber;
const int TransactionFee::kIoCityFieldNumber;
#endif  // !_MSC_VER

TransactionFee::TransactionFee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionFee::InitAsDefaultInstance() {
}

TransactionFee::TransactionFee(const TransactionFee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionFee::SharedCtor() {
  _cached_size_ = 0;
  dynamicfee_ = 0;
  staticfee_ = 0u;
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transtype_ = 0u;
  channel_ = 0u;
  iocity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionFee::~TransactionFee() {
  SharedDtor();
}

void TransactionFee::SharedDtor() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (this != default_instance_) {
  }
}

void TransactionFee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionFee_descriptor_;
}

const TransactionFee& TransactionFee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

TransactionFee* TransactionFee::default_instance_ = NULL;

TransactionFee* TransactionFee::New() const {
  return new TransactionFee;
}

void TransactionFee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dynamicfee_ = 0;
    staticfee_ = 0u;
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
    transtype_ = 0u;
    channel_ = 0u;
    iocity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dynamicFee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dynamicfee_)));
          set_has_dynamicfee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_staticFee;
        break;
      }

      // optional uint32 staticFee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staticFee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staticfee_)));
          set_has_staticfee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bankId;
        break;
      }

      // optional string bankId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transType;
        break;
      }

      // optional uint32 transType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transtype_)));
          set_has_transtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ioCity;
        break;
      }

      // optional uint32 ioCity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioCity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iocity_)));
          set_has_iocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double dynamicFee = 1;
  if (has_dynamicfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dynamicfee(), output);
  }

  // optional uint32 staticFee = 2;
  if (has_staticfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->staticfee(), output);
  }

  // optional string bankId = 3;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bankid(), output);
  }

  // optional uint32 transType = 4;
  if (has_transtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->transtype(), output);
  }

  // optional uint32 channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel(), output);
  }

  // optional uint32 ioCity = 6;
  if (has_iocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->iocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionFee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double dynamicFee = 1;
  if (has_dynamicfee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dynamicfee(), target);
  }

  // optional uint32 staticFee = 2;
  if (has_staticfee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->staticfee(), target);
  }

  // optional string bankId = 3;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bankid(), target);
  }

  // optional uint32 transType = 4;
  if (has_transtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->transtype(), target);
  }

  // optional uint32 channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel(), target);
  }

  // optional uint32 ioCity = 6;
  if (has_iocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->iocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionFee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double dynamicFee = 1;
    if (has_dynamicfee()) {
      total_size += 1 + 8;
    }

    // optional uint32 staticFee = 2;
    if (has_staticfee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->staticfee());
    }

    // optional string bankId = 3;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

    // optional uint32 transType = 4;
    if (has_transtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transtype());
    }

    // optional uint32 channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 ioCity = 6;
    if (has_iocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionFee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionFee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionFee::MergeFrom(const TransactionFee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dynamicfee()) {
      set_dynamicfee(from.dynamicfee());
    }
    if (from.has_staticfee()) {
      set_staticfee(from.staticfee());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
    if (from.has_transtype()) {
      set_transtype(from.transtype());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_iocity()) {
      set_iocity(from.iocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionFee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFee::CopyFrom(const TransactionFee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFee::IsInitialized() const {

  return true;
}

void TransactionFee::Swap(TransactionFee* other) {
  if (other != this) {
    std::swap(dynamicfee_, other->dynamicfee_);
    std::swap(staticfee_, other->staticfee_);
    std::swap(bankid_, other->bankid_);
    std::swap(transtype_, other->transtype_);
    std::swap(channel_, other->channel_);
    std::swap(iocity_, other->iocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionFee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionFee_descriptor_;
  metadata.reflection = TransactionFee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTransactionFee::GetTransactionFee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTransactionFee::InitAsDefaultInstance() {
}

GetTransactionFee::GetTransactionFee(const GetTransactionFee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTransactionFee::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransactionFee::~GetTransactionFee() {
  SharedDtor();
}

void GetTransactionFee::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTransactionFee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTransactionFee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTransactionFee_descriptor_;
}

const GetTransactionFee& GetTransactionFee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetTransactionFee* GetTransactionFee::default_instance_ = NULL;

GetTransactionFee* GetTransactionFee::New() const {
  return new GetTransactionFee;
}

void GetTransactionFee::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTransactionFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTransactionFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTransactionFee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTransactionFee::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransactionFee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTransactionFee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTransactionFee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTransactionFee::MergeFrom(const GetTransactionFee& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTransactionFee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionFee::CopyFrom(const GetTransactionFee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionFee::IsInitialized() const {

  return true;
}

void GetTransactionFee::Swap(GetTransactionFee* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTransactionFee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTransactionFee_descriptor_;
  metadata.reflection = GetTransactionFee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransactionFeeReply::kTransactionFeesFieldNumber;
#endif  // !_MSC_VER

GetTransactionFeeReply::GetTransactionFeeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTransactionFeeReply::InitAsDefaultInstance() {
}

GetTransactionFeeReply::GetTransactionFeeReply(const GetTransactionFeeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTransactionFeeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransactionFeeReply::~GetTransactionFeeReply() {
  SharedDtor();
}

void GetTransactionFeeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTransactionFeeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTransactionFeeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTransactionFeeReply_descriptor_;
}

const GetTransactionFeeReply& GetTransactionFeeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetTransactionFeeReply* GetTransactionFeeReply::default_instance_ = NULL;

GetTransactionFeeReply* GetTransactionFeeReply::New() const {
  return new GetTransactionFeeReply;
}

void GetTransactionFeeReply::Clear() {
  transactionfees_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTransactionFeeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.TransactionFee transactionFees = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionFees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transactionfees()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_transactionFees;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTransactionFeeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.TransactionFee transactionFees = 1;
  for (int i = 0; i < this->transactionfees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transactionfees(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTransactionFeeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.mservice.momo.msg.TransactionFee transactionFees = 1;
  for (int i = 0; i < this->transactionfees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transactionfees(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTransactionFeeReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.TransactionFee transactionFees = 1;
  total_size += 1 * this->transactionfees_size();
  for (int i = 0; i < this->transactionfees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transactionfees(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransactionFeeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTransactionFeeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTransactionFeeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTransactionFeeReply::MergeFrom(const GetTransactionFeeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  transactionfees_.MergeFrom(from.transactionfees_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTransactionFeeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionFeeReply::CopyFrom(const GetTransactionFeeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionFeeReply::IsInitialized() const {

  return true;
}

void GetTransactionFeeReply::Swap(GetTransactionFeeReply* other) {
  if (other != this) {
    transactionfees_.Swap(&other->transactionfees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTransactionFeeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTransactionFeeReply_descriptor_;
  metadata.reflection = GetTransactionFeeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayAirlineTicket::kPhoneNumberFieldNumber;
const int PayAirlineTicket::kProviderIdFieldNumber;
const int PayAirlineTicket::kBillIdFieldNumber;
const int PayAirlineTicket::kAmountFieldNumber;
#endif  // !_MSC_VER

PayAirlineTicket::PayAirlineTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayAirlineTicket::InitAsDefaultInstance() {
}

PayAirlineTicket::PayAirlineTicket(const PayAirlineTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayAirlineTicket::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayAirlineTicket::~PayAirlineTicket() {
  SharedDtor();
}

void PayAirlineTicket::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (this != default_instance_) {
  }
}

void PayAirlineTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayAirlineTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayAirlineTicket_descriptor_;
}

const PayAirlineTicket& PayAirlineTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

PayAirlineTicket* PayAirlineTicket::default_instance_ = NULL;

PayAirlineTicket* PayAirlineTicket::New() const {
  return new PayAirlineTicket;
}

void PayAirlineTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayAirlineTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_providerId;
        break;
      }

      // required string providerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providerid().data(), this->providerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_billId;
        break;
      }

      // required string billId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billid().data(), this->billid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayAirlineTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string providerId = 2;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->providerid(), output);
  }

  // required string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->billid(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayAirlineTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string providerId = 2;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providerid().data(), this->providerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->providerid(), target);
  }

  // required string billId = 3;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billid().data(), this->billid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->billid(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayAirlineTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string providerId = 2;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // required string billId = 3;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayAirlineTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayAirlineTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayAirlineTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayAirlineTicket::MergeFrom(const PayAirlineTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayAirlineTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayAirlineTicket::CopyFrom(const PayAirlineTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayAirlineTicket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PayAirlineTicket::Swap(PayAirlineTicket* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayAirlineTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayAirlineTicket_descriptor_;
  metadata.reflection = PayAirlineTicket_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PayAirlineTicketReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayAirlineTicketReply_Result_descriptor_;
}
bool PayAirlineTicketReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PayAirlineTicketReply_Result PayAirlineTicketReply::SUCCESS;
const PayAirlineTicketReply_Result PayAirlineTicketReply::FAIL;
const PayAirlineTicketReply_Result PayAirlineTicketReply::Result_MIN;
const PayAirlineTicketReply_Result PayAirlineTicketReply::Result_MAX;
const int PayAirlineTicketReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PayAirlineTicketReply::kResultFieldNumber;
const int PayAirlineTicketReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

PayAirlineTicketReply::PayAirlineTicketReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayAirlineTicketReply::InitAsDefaultInstance() {
}

PayAirlineTicketReply::PayAirlineTicketReply(const PayAirlineTicketReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayAirlineTicketReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  transactionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayAirlineTicketReply::~PayAirlineTicketReply() {
  SharedDtor();
}

void PayAirlineTicketReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PayAirlineTicketReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayAirlineTicketReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayAirlineTicketReply_descriptor_;
}

const PayAirlineTicketReply& PayAirlineTicketReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

PayAirlineTicketReply* PayAirlineTicketReply::default_instance_ = NULL;

PayAirlineTicketReply* PayAirlineTicketReply::New() const {
  return new PayAirlineTicketReply;
}

void PayAirlineTicketReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    transactionid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayAirlineTicketReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mservice.momo.msg.PayAirlineTicketReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::PayAirlineTicketReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::PayAirlineTicketReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transactionId;
        break;
      }

      // optional uint64 transactionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transactionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transactionid_)));
          set_has_transactionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayAirlineTicketReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mservice.momo.msg.PayAirlineTicketReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint64 transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayAirlineTicketReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.mservice.momo.msg.PayAirlineTicketReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint64 transactionId = 2;
  if (has_transactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayAirlineTicketReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mservice.momo.msg.PayAirlineTicketReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint64 transactionId = 2;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayAirlineTicketReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayAirlineTicketReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayAirlineTicketReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayAirlineTicketReply::MergeFrom(const PayAirlineTicketReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayAirlineTicketReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayAirlineTicketReply::CopyFrom(const PayAirlineTicketReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayAirlineTicketReply::IsInitialized() const {

  return true;
}

void PayAirlineTicketReply::Swap(PayAirlineTicketReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayAirlineTicketReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayAirlineTicketReply_descriptor_;
  metadata.reflection = PayAirlineTicketReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WithdrawByAgent::kPhoneNumberFieldNumber;
const int WithdrawByAgent::kAgentPhoneFieldNumber;
const int WithdrawByAgent::kAmountFieldNumber;
const int WithdrawByAgent::kCommentFieldNumber;
#endif  // !_MSC_VER

WithdrawByAgent::WithdrawByAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithdrawByAgent::InitAsDefaultInstance() {
}

WithdrawByAgent::WithdrawByAgent(const WithdrawByAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithdrawByAgent::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  agentphone_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithdrawByAgent::~WithdrawByAgent() {
  SharedDtor();
}

void WithdrawByAgent::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void WithdrawByAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithdrawByAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawByAgent_descriptor_;
}

const WithdrawByAgent& WithdrawByAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

WithdrawByAgent* WithdrawByAgent::default_instance_ = NULL;

WithdrawByAgent* WithdrawByAgent::New() const {
  return new WithdrawByAgent;
}

void WithdrawByAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    agentphone_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithdrawByAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agentPhone;
        break;
      }

      // required uint32 agentPhone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agentPhone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentphone_)));
          set_has_agentphone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // required uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }

      // optional string comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithdrawByAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required uint32 agentPhone = 2;
  if (has_agentphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agentphone(), output);
  }

  // required uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithdrawByAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required uint32 agentPhone = 2;
  if (has_agentphone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agentphone(), target);
  }

  // required uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithdrawByAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required uint32 agentPhone = 2;
    if (has_agentphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agentphone());
    }

    // required uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string comment = 4;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithdrawByAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithdrawByAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithdrawByAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithdrawByAgent::MergeFrom(const WithdrawByAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_agentphone()) {
      set_agentphone(from.agentphone());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithdrawByAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawByAgent::CopyFrom(const WithdrawByAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawByAgent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WithdrawByAgent::Swap(WithdrawByAgent* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(agentphone_, other->agentphone_);
    std::swap(amount_, other->amount_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithdrawByAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithdrawByAgent_descriptor_;
  metadata.reflection = WithdrawByAgent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WithdrawByAgentReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawByAgentReply_Result_descriptor_;
}
bool WithdrawByAgentReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WithdrawByAgentReply_Result WithdrawByAgentReply::SUCCESS;
const WithdrawByAgentReply_Result WithdrawByAgentReply::FAIL;
const WithdrawByAgentReply_Result WithdrawByAgentReply::Result_MIN;
const WithdrawByAgentReply_Result WithdrawByAgentReply::Result_MAX;
const int WithdrawByAgentReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WithdrawByAgentReply::kResultFieldNumber;
const int WithdrawByAgentReply::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

WithdrawByAgentReply::WithdrawByAgentReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithdrawByAgentReply::InitAsDefaultInstance() {
}

WithdrawByAgentReply::WithdrawByAgentReply(const WithdrawByAgentReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithdrawByAgentReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithdrawByAgentReply::~WithdrawByAgentReply() {
  SharedDtor();
}

void WithdrawByAgentReply::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void WithdrawByAgentReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithdrawByAgentReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawByAgentReply_descriptor_;
}

const WithdrawByAgentReply& WithdrawByAgentReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

WithdrawByAgentReply* WithdrawByAgentReply::default_instance_ = NULL;

WithdrawByAgentReply* WithdrawByAgentReply::New() const {
  return new WithdrawByAgentReply;
}

void WithdrawByAgentReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithdrawByAgentReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mservice.momo.msg.WithdrawByAgentReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::WithdrawByAgentReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::WithdrawByAgentReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithdrawByAgentReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mservice.momo.msg.WithdrawByAgentReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transactionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithdrawByAgentReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.mservice.momo.msg.WithdrawByAgentReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transactionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithdrawByAgentReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mservice.momo.msg.WithdrawByAgentReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string transactionId = 2;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithdrawByAgentReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithdrawByAgentReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithdrawByAgentReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithdrawByAgentReply::MergeFrom(const WithdrawByAgentReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithdrawByAgentReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawByAgentReply::CopyFrom(const WithdrawByAgentReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawByAgentReply::IsInitialized() const {

  return true;
}

void WithdrawByAgentReply::Swap(WithdrawByAgentReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithdrawByAgentReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithdrawByAgentReply_descriptor_;
  metadata.reflection = WithdrawByAgentReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSms::kPhoneNumberFieldNumber;
const int SendSms::kContentFieldNumber;
#endif  // !_MSC_VER

SendSms::SendSms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSms::InitAsDefaultInstance() {
}

SendSms::SendSms(const SendSms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSms::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSms::~SendSms() {
  SharedDtor();
}

void SendSms::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SendSms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSms_descriptor_;
}

const SendSms& SendSms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

SendSms* SendSms::default_instance_ = NULL;

SendSms* SendSms::New() const {
  return new SendSms;
}

void SendSms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendSms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSms::MergeFrom(const SendSms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSms::CopyFrom(const SendSms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendSms::Swap(SendSms* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSms_descriptor_;
  metadata.reflection = SendSms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SendSmsReply::SendSmsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSmsReply::InitAsDefaultInstance() {
}

SendSmsReply::SendSmsReply(const SendSmsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSmsReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSmsReply::~SendSmsReply() {
  SharedDtor();
}

void SendSmsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendSmsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSmsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSmsReply_descriptor_;
}

const SendSmsReply& SendSmsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

SendSmsReply* SendSmsReply::default_instance_ = NULL;

SendSmsReply* SendSmsReply::New() const {
  return new SendSmsReply;
}

void SendSmsReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSmsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SendSmsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSmsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSmsReply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSmsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSmsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSmsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSmsReply::MergeFrom(const SendSmsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSmsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSmsReply::CopyFrom(const SendSmsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSmsReply::IsInitialized() const {

  return true;
}

void SendSmsReply::Swap(SendSmsReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSmsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSmsReply_descriptor_;
  metadata.reflection = SendSmsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankOutManual::kPhoneNumberFieldNumber;
const int BankOutManual::kBankIdFieldNumber;
const int BankOutManual::kHolderNumberFieldNumber;
const int BankOutManual::kAmountFieldNumber;
const int BankOutManual::kHolderNameFieldNumber;
const int BankOutManual::kBankNameFieldNumber;
const int BankOutManual::kCommentFieldNumber;
const int BankOutManual::kInOutCityFieldNumber;
const int BankOutManual::kBankBranchFieldNumber;
#endif  // !_MSC_VER

BankOutManual::BankOutManual()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankOutManual::InitAsDefaultInstance() {
}

BankOutManual::BankOutManual(const BankOutManual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankOutManual::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  holdernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  holdername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inoutcity_ = 0;
  bankbranch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankOutManual::~BankOutManual() {
  SharedDtor();
}

void BankOutManual::SharedDtor() {
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (holdernumber_ != &::google::protobuf::internal::kEmptyString) {
    delete holdernumber_;
  }
  if (holdername_ != &::google::protobuf::internal::kEmptyString) {
    delete holdername_;
  }
  if (bankname_ != &::google::protobuf::internal::kEmptyString) {
    delete bankname_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (bankbranch_ != &::google::protobuf::internal::kEmptyString) {
    delete bankbranch_;
  }
  if (this != default_instance_) {
  }
}

void BankOutManual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankOutManual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankOutManual_descriptor_;
}

const BankOutManual& BankOutManual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankOutManual* BankOutManual::default_instance_ = NULL;

BankOutManual* BankOutManual::New() const {
  return new BankOutManual;
}

void BankOutManual::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
    if (has_holdernumber()) {
      if (holdernumber_ != &::google::protobuf::internal::kEmptyString) {
        holdernumber_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_holdername()) {
      if (holdername_ != &::google::protobuf::internal::kEmptyString) {
        holdername_->clear();
      }
    }
    if (has_bankname()) {
      if (bankname_ != &::google::protobuf::internal::kEmptyString) {
        bankname_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    inoutcity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bankbranch()) {
      if (bankbranch_ != &::google::protobuf::internal::kEmptyString) {
        bankbranch_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankOutManual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bankId;
        break;
      }

      // required string bankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_holderNumber;
        break;
      }

      // required string holderNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_holderNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holdernumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->holdernumber().data(), this->holdernumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_holderName;
        break;
      }

      // required string holderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_holderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holdername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->holdername().data(), this->holdername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bankName;
        break;
      }

      // required string bankName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankname().data(), this->bankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_inOutCity;
        break;
      }

      // required int32 inOutCity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inOutCity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inoutcity_)));
          set_has_inoutcity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bankBranch;
        break;
      }

      // optional string bankBranch = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankBranch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankbranch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankbranch().data(), this->bankbranch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankOutManual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  // required string bankId = 2;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bankid(), output);
  }

  // required string holderNumber = 3;
  if (has_holdernumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->holdernumber().data(), this->holdernumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->holdernumber(), output);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // required string holderName = 5;
  if (has_holdername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->holdername().data(), this->holdername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->holdername(), output);
  }

  // required string bankName = 6;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bankname(), output);
  }

  // optional string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->comment(), output);
  }

  // required int32 inOutCity = 8;
  if (has_inoutcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->inoutcity(), output);
  }

  // optional string bankBranch = 9;
  if (has_bankbranch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankbranch().data(), this->bankbranch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bankbranch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankOutManual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  // required string bankId = 2;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bankid(), target);
  }

  // required string holderNumber = 3;
  if (has_holdernumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->holdernumber().data(), this->holdernumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->holdernumber(), target);
  }

  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // required string holderName = 5;
  if (has_holdername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->holdername().data(), this->holdername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->holdername(), target);
  }

  // required string bankName = 6;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bankname(), target);
  }

  // optional string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  // required int32 inOutCity = 8;
  if (has_inoutcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->inoutcity(), target);
  }

  // optional string bankBranch = 9;
  if (has_bankbranch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankbranch().data(), this->bankbranch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bankbranch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankOutManual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

    // required string bankId = 2;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

    // required string holderNumber = 3;
    if (has_holdernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->holdernumber());
    }

    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // required string holderName = 5;
    if (has_holdername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->holdername());
    }

    // required string bankName = 6;
    if (has_bankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankname());
    }

    // optional string comment = 7;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required int32 inOutCity = 8;
    if (has_inoutcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inoutcity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bankBranch = 9;
    if (has_bankbranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankbranch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankOutManual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankOutManual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankOutManual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankOutManual::MergeFrom(const BankOutManual& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
    if (from.has_holdernumber()) {
      set_holdernumber(from.holdernumber());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_holdername()) {
      set_holdername(from.holdername());
    }
    if (from.has_bankname()) {
      set_bankname(from.bankname());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_inoutcity()) {
      set_inoutcity(from.inoutcity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankbranch()) {
      set_bankbranch(from.bankbranch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankOutManual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankOutManual::CopyFrom(const BankOutManual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankOutManual::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  return true;
}

void BankOutManual::Swap(BankOutManual* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(bankid_, other->bankid_);
    std::swap(holdernumber_, other->holdernumber_);
    std::swap(amount_, other->amount_);
    std::swap(holdername_, other->holdername_);
    std::swap(bankname_, other->bankname_);
    std::swap(comment_, other->comment_);
    std::swap(inoutcity_, other->inoutcity_);
    std::swap(bankbranch_, other->bankbranch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankOutManual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankOutManual_descriptor_;
  metadata.reflection = BankOutManual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankOutManualReply::kErrorFieldNumber;
const int BankOutManualReply::kTranIdFieldNumber;
#endif  // !_MSC_VER

BankOutManualReply::BankOutManualReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankOutManualReply::InitAsDefaultInstance() {
}

BankOutManualReply::BankOutManualReply(const BankOutManualReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankOutManualReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  tranid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankOutManualReply::~BankOutManualReply() {
  SharedDtor();
}

void BankOutManualReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BankOutManualReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankOutManualReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankOutManualReply_descriptor_;
}

const BankOutManualReply& BankOutManualReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

BankOutManualReply* BankOutManualReply::default_instance_ = NULL;

BankOutManualReply* BankOutManualReply::New() const {
  return new BankOutManualReply;
}

void BankOutManualReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
    tranid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankOutManualReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tranId;
        break;
      }

      // required uint64 tranId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tranid_)));
          set_has_tranid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankOutManualReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // required uint64 tranId = 2;
  if (has_tranid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tranid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankOutManualReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // required uint64 tranId = 2;
  if (has_tranid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tranid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankOutManualReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // required uint64 tranId = 2;
    if (has_tranid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tranid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankOutManualReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankOutManualReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankOutManualReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankOutManualReply::MergeFrom(const BankOutManualReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_tranid()) {
      set_tranid(from.tranid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankOutManualReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankOutManualReply::CopyFrom(const BankOutManualReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankOutManualReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BankOutManualReply::Swap(BankOutManualReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(tranid_, other->tranid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankOutManualReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankOutManualReply_descriptor_;
  metadata.reflection = BankOutManualReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsMomoer::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

IsMomoer::IsMomoer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsMomoer::InitAsDefaultInstance() {
}

IsMomoer::IsMomoer(const IsMomoer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsMomoer::SharedCtor() {
  _cached_size_ = 0;
  phonenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsMomoer::~IsMomoer() {
  SharedDtor();
}

void IsMomoer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsMomoer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsMomoer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsMomoer_descriptor_;
}

const IsMomoer& IsMomoer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

IsMomoer* IsMomoer::default_instance_ = NULL;

IsMomoer* IsMomoer::New() const {
  return new IsMomoer;
}

void IsMomoer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsMomoer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phoneNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phonenumber_)));
          set_has_phonenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsMomoer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsMomoer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phoneNumber = 1;
  if (has_phonenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsMomoer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsMomoer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsMomoer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsMomoer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsMomoer::MergeFrom(const IsMomoer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsMomoer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsMomoer::CopyFrom(const IsMomoer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMomoer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsMomoer::Swap(IsMomoer* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsMomoer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsMomoer_descriptor_;
  metadata.reflection = IsMomoer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsMomoerReply::kIsMomoerFieldNumber;
#endif  // !_MSC_VER

IsMomoerReply::IsMomoerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsMomoerReply::InitAsDefaultInstance() {
}

IsMomoerReply::IsMomoerReply(const IsMomoerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsMomoerReply::SharedCtor() {
  _cached_size_ = 0;
  ismomoer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsMomoerReply::~IsMomoerReply() {
  SharedDtor();
}

void IsMomoerReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsMomoerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsMomoerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsMomoerReply_descriptor_;
}

const IsMomoerReply& IsMomoerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

IsMomoerReply* IsMomoerReply::default_instance_ = NULL;

IsMomoerReply* IsMomoerReply::New() const {
  return new IsMomoerReply;
}

void IsMomoerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ismomoer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsMomoerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isMomoer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismomoer_)));
          set_has_ismomoer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsMomoerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isMomoer = 1;
  if (has_ismomoer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismomoer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsMomoerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isMomoer = 1;
  if (has_ismomoer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismomoer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsMomoerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isMomoer = 1;
    if (has_ismomoer()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsMomoerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsMomoerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsMomoerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsMomoerReply::MergeFrom(const IsMomoerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismomoer()) {
      set_ismomoer(from.ismomoer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsMomoerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsMomoerReply::CopyFrom(const IsMomoerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMomoerReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsMomoerReply::Swap(IsMomoerReply* other) {
  if (other != this) {
    std::swap(ismomoer_, other->ismomoer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsMomoerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsMomoerReply_descriptor_;
  metadata.reflection = IsMomoerReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountAgentTran::kPhoneFieldNumber;
#endif  // !_MSC_VER

CountAgentTran::CountAgentTran()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountAgentTran::InitAsDefaultInstance() {
}

CountAgentTran::CountAgentTran(const CountAgentTran& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountAgentTran::SharedCtor() {
  _cached_size_ = 0;
  phone_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountAgentTran::~CountAgentTran() {
  SharedDtor();
}

void CountAgentTran::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountAgentTran::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountAgentTran::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountAgentTran_descriptor_;
}

const CountAgentTran& CountAgentTran::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

CountAgentTran* CountAgentTran::default_instance_ = NULL;

CountAgentTran* CountAgentTran::New() const {
  return new CountAgentTran;
}

void CountAgentTran::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountAgentTran::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 phone = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phone_)));
          set_has_phone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountAgentTran::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 phone = 1;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountAgentTran::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 phone = 1;
  if (has_phone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountAgentTran::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 phone = 1;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountAgentTran::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountAgentTran* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountAgentTran*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountAgentTran::MergeFrom(const CountAgentTran& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountAgentTran::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountAgentTran::CopyFrom(const CountAgentTran& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountAgentTran::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountAgentTran::Swap(CountAgentTran* other) {
  if (other != this) {
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountAgentTran::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountAgentTran_descriptor_;
  metadata.reflection = CountAgentTran_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountAgentTranReply::kCounterFieldNumber;
#endif  // !_MSC_VER

CountAgentTranReply::CountAgentTranReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountAgentTranReply::InitAsDefaultInstance() {
}

CountAgentTranReply::CountAgentTranReply(const CountAgentTranReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountAgentTranReply::SharedCtor() {
  _cached_size_ = 0;
  counter_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountAgentTranReply::~CountAgentTranReply() {
  SharedDtor();
}

void CountAgentTranReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountAgentTranReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountAgentTranReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountAgentTranReply_descriptor_;
}

const CountAgentTranReply& CountAgentTranReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

CountAgentTranReply* CountAgentTranReply::default_instance_ = NULL;

CountAgentTranReply* CountAgentTranReply::New() const {
  return new CountAgentTranReply;
}

void CountAgentTranReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counter_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountAgentTranReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountAgentTranReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 counter = 1;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountAgentTranReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 counter = 1;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountAgentTranReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 counter = 1;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->counter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountAgentTranReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountAgentTranReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountAgentTranReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountAgentTranReply::MergeFrom(const CountAgentTranReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counter()) {
      set_counter(from.counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountAgentTranReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountAgentTranReply::CopyFrom(const CountAgentTranReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountAgentTranReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountAgentTranReply::Swap(CountAgentTranReply* other) {
  if (other != this) {
    std::swap(counter_, other->counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountAgentTranReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountAgentTranReply_descriptor_;
  metadata.reflection = CountAgentTranReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServiceLayout::GetServiceLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceLayout::InitAsDefaultInstance() {
}

GetServiceLayout::GetServiceLayout(const GetServiceLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceLayout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceLayout::~GetServiceLayout() {
  SharedDtor();
}

void GetServiceLayout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServiceLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceLayout_descriptor_;
}

const GetServiceLayout& GetServiceLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetServiceLayout* GetServiceLayout::default_instance_ = NULL;

GetServiceLayout* GetServiceLayout::New() const {
  return new GetServiceLayout;
}

void GetServiceLayout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServiceLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceLayout::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceLayout::MergeFrom(const GetServiceLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceLayout::CopyFrom(const GetServiceLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceLayout::IsInitialized() const {

  return true;
}

void GetServiceLayout::Swap(GetServiceLayout* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceLayout_descriptor_;
  metadata.reflection = GetServiceLayout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServicelayoutReply::GetServicelayoutReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServicelayoutReply::InitAsDefaultInstance() {
}

GetServicelayoutReply::GetServicelayoutReply(const GetServicelayoutReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServicelayoutReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServicelayoutReply::~GetServicelayoutReply() {
  SharedDtor();
}

void GetServicelayoutReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServicelayoutReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServicelayoutReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServicelayoutReply_descriptor_;
}

const GetServicelayoutReply& GetServicelayoutReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

GetServicelayoutReply* GetServicelayoutReply::default_instance_ = NULL;

GetServicelayoutReply* GetServicelayoutReply::New() const {
  return new GetServicelayoutReply;
}

void GetServicelayoutReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServicelayoutReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServicelayoutReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServicelayoutReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServicelayoutReply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServicelayoutReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServicelayoutReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServicelayoutReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServicelayoutReply::MergeFrom(const GetServicelayoutReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServicelayoutReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServicelayoutReply::CopyFrom(const GetServicelayoutReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServicelayoutReply::IsInitialized() const {

  return true;
}

void GetServicelayoutReply::Swap(GetServicelayoutReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServicelayoutReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServicelayoutReply_descriptor_;
  metadata.reflection = GetServicelayoutReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompeleteTran::kTranTypeFieldNumber;
const int CompeleteTran::kOtpFieldNumber;
#endif  // !_MSC_VER

CompeleteTran::CompeleteTran()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompeleteTran::InitAsDefaultInstance() {
}

CompeleteTran::CompeleteTran(const CompeleteTran& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompeleteTran::SharedCtor() {
  _cached_size_ = 0;
  trantype_ = 0;
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompeleteTran::~CompeleteTran() {
  SharedDtor();
}

void CompeleteTran::SharedDtor() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (this != default_instance_) {
  }
}

void CompeleteTran::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompeleteTran::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompeleteTran_descriptor_;
}

const CompeleteTran& CompeleteTran::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

CompeleteTran* CompeleteTran::default_instance_ = NULL;

CompeleteTran* CompeleteTran::New() const {
  return new CompeleteTran;
}

void CompeleteTran::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trantype_ = 0;
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompeleteTran::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tranType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trantype_)));
          set_has_trantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otp;
        break;
      }

      // required string otp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompeleteTran::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tranType = 1;
  if (has_trantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trantype(), output);
  }

  // required string otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->otp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompeleteTran::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tranType = 1;
  if (has_trantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trantype(), target);
  }

  // required string otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->otp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompeleteTran::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tranType = 1;
    if (has_trantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trantype());
    }

    // required string otp = 2;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompeleteTran::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompeleteTran* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompeleteTran*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompeleteTran::MergeFrom(const CompeleteTran& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trantype()) {
      set_trantype(from.trantype());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompeleteTran::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompeleteTran::CopyFrom(const CompeleteTran& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompeleteTran::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CompeleteTran::Swap(CompeleteTran* other) {
  if (other != this) {
    std::swap(trantype_, other->trantype_);
    std::swap(otp_, other->otp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompeleteTran::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompeleteTran_descriptor_;
  metadata.reflection = CompeleteTran_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeTranReply::kErrorFieldNumber;
#endif  // !_MSC_VER

MakeTranReply::MakeTranReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakeTranReply::InitAsDefaultInstance() {
}

MakeTranReply::MakeTranReply(const MakeTranReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakeTranReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeTranReply::~MakeTranReply() {
  SharedDtor();
}

void MakeTranReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeTranReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeTranReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeTranReply_descriptor_;
}

const MakeTranReply& MakeTranReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdModels_2eproto();
  return *default_instance_;
}

MakeTranReply* MakeTranReply::default_instance_ = NULL;

MakeTranReply* MakeTranReply::New() const {
  return new MakeTranReply;
}

void MakeTranReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeTranReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakeTranReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakeTranReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakeTranReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeTranReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeTranReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeTranReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeTranReply::MergeFrom(const MakeTranReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeTranReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeTranReply::CopyFrom(const MakeTranReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeTranReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MakeTranReply::Swap(MakeTranReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeTranReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeTranReply_descriptor_;
  metadata.reflection = MakeTranReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace momo
}  // namespace mservice
}  // namespace com

// @@protoc_insertion_point(global_scope)
