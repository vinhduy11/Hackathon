// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MomoMsg

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MomoMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mservice {
namespace momo {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* Err_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Err_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Err_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HelloReply_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Base_MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MomoMsg() {
  protobuf_AddDesc_MomoMsg();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MomoMsg");
  GOOGLE_CHECK(file != NULL);
  Err_descriptor_ = file->message_type(0);
  static const int Err_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, result_desc_),
  };
  Err_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Err_descriptor_,
      Err::default_instance_,
      Err_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Err, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Err));
  Err_ResultCode_descriptor_ = Err_descriptor_->enum_type(0);
  Hello_descriptor_ = file->message_type(1);
  static const int Hello_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, magic_key_),
  };
  Hello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  HelloReply_descriptor_ = file->message_type(2);
  static const int HelloReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, magic_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, result_desc_),
  };
  HelloReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloReply_descriptor_,
      HelloReply::default_instance_,
      HelloReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloReply));
  HelloReply_ResultCode_descriptor_ = HelloReply_descriptor_->enum_type(0);
  Base_descriptor_ = file->message_type(3);
  static const int Base_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, hello_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, hello_reply_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  Base_MsgType_descriptor_ = Base_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MomoMsg);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Err_descriptor_, &Err::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloReply_descriptor_, &HelloReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MomoMsg() {
  delete Err::default_instance_;
  delete Err_reflection_;
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete HelloReply::default_instance_;
  delete HelloReply_reflection_;
  delete Base::default_instance_;
  delete Base_reflection_;
}

void protobuf_AddDesc_MomoMsg() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007MomoMsg\022\025com.mservice.momo.msg\"Y\n\003Err\022"
    "\023\n\013result_code\030\001 \001(\r\022\023\n\013result_desc\030\002 \001("
    "\t\"(\n\nResultCode\022\032\n\026MSG_FORMAT_NOT_CORREC"
    "T\020\001\"(\n\005Hello\022\014\n\004imei\030\001 \001(\t\022\021\n\tmagic_key\030"
    "\002 \001(\t\"\316\001\n\nHelloReply\022\016\n\006result\030\001 \001(\010\022\023\n\013"
    "result_code\030\002 \001(\r\022\021\n\tmagic_key\030\003 \001(\t\022\023\n\013"
    "result_desc\030\004 \001(\t\"s\n\nResultCode\022\n\n\006ALL_O"
    "K\020\000\022\032\n\026MSG_FORMAT_NOT_CORRECT\020\001\022\037\n\033PHONE"
    "_NUMBER_NOT_REGISTERED\020\002\022\034\n\030PHONE_NUMBER"
    "_NOT_CORRECT\020\003\"\326\010\n\004Base\0221\n\004type\030\001 \002(\0162#."
    "com.mservice.momo.msg.Base.MsgType\022\r\n\005ph"
    "one\030\002 \001(\t\022\r\n\005index\030\003 \001(\r\022\013\n\003ack\030\n \001(\010\022\'\n"
    "\003err\030\013 \001(\0132\032.com.mservice.momo.msg.Err\022,"
    "\n\005hello\030\351\007 \001(\0132\034.com.mservice.momo.msg.H"
    "ello\0227\n\013hello_reply\030\352\007 \001(\0132!.com.mservic"
    "e.momo.msg.HelloReply\"\337\006\n\007MsgType\022\007\n\003ACK"
    "\020\001\022\t\n\005ERROR\020\002\022\n\n\005HELLO\020\351\007\022\020\n\013HELLO_REPLY"
    "\020\352\007\022\014\n\007GET_OTP\020\353\007\022\022\n\rGET_OTP_REPLY\020\354\007\022\017\n"
    "\nVERIFY_OTP\020\355\007\022\025\n\020VERIFY_OTP_REPLY\020\356\007\022\n\n"
    "\005LOGIN\020\357\007\022\020\n\013LOGIN_REPLY\020\360\007\022\013\n\006SIGNUP\020\361\007"
    "\022\021\n\014SIGNUP_REPLY\020\362\007\022\021\n\014RECOVERY_PIN\020\363\007\022\027"
    "\n\022RECOVERY_PIN_REPLY\020\364\007\022\023\n\016BILLAY_GETBIL"
    "L\020\365\007\022\031\n\024BILLAY_GETBILL_REPLY\020\366\007\022\020\n\013DEVIC"
    "E_INFO\020\367\007\022\026\n\021DEVICE_INFO_REPLY\020\370\007\022\020\n\013TOP"
    "UP_PHONE\020\371\007\022\026\n\021TOPUP_PHONE_REPLY\020\372\007\022\027\n\022B"
    "ILLAY_ONE_PAYMENT\020\373\007\022\035\n\030BILLAY_ONE_PAYME"
    "NT_REPLY\020\374\007\022\020\n\013CHANGE_MPIN\020\375\007\022\026\n\021CHANGE_"
    "MPIN_REPLY\020\376\007\022\024\n\017BILLPAY_GET_ALL\020\377\007\022\032\n\025B"
    "ILLPAY_GET_ALL_REPLY\020\200\010\022\021\n\014TRANSFER_M2M\020"
    "\203\010\022\027\n\022TRANSFER_M2M_REPLY\020\204\010\022\021\n\014TRANSFER_"
    "M2C\020\205\010\022\027\n\022TRANSFER_M2C_REPLY\020\206\010\022\034\n\027CASHI"
    "N_FORM_VCB_TO_MOMO\020\207\010\022\"\n\035CASHIN_FORM_VCB"
    "_TO_MOMO_REPLY\020\210\010\022\035\n\030CASHOUT_FORM_MOMO_T"
    "O_VCB\020\211\010\022#\n\036CASHOUT_FORM_MOMO_TO_VCB_REP"
    "LY\020\212\010\022\022\n\rGET_USER_INFO\020\213\010\022\030\n\023GET_USER_IN"
    "FO_REPLY\020\214\010\022\020\n\013PHONE_EXIST\020\215\010\022\026\n\021PHONE_E"
    "XIST_REPLY\020\216\010\022\014\n\007LOG_OUT\020\217\010\022\022\n\rLOG_OUT_R"
    "EPLY\020\220\010", 1487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MomoMsg", &protobuf_RegisterTypes);
  Err::default_instance_ = new Err();
  Hello::default_instance_ = new Hello();
  HelloReply::default_instance_ = new HelloReply();
  Base::default_instance_ = new Base();
  Err::default_instance_->InitAsDefaultInstance();
  Hello::default_instance_->InitAsDefaultInstance();
  HelloReply::default_instance_->InitAsDefaultInstance();
  Base::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MomoMsg);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MomoMsg {
  StaticDescriptorInitializer_MomoMsg() {
    protobuf_AddDesc_MomoMsg();
  }
} static_descriptor_initializer_MomoMsg_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Err_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Err_ResultCode_descriptor_;
}
bool Err_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Err_ResultCode Err::MSG_FORMAT_NOT_CORRECT;
const Err_ResultCode Err::ResultCode_MIN;
const Err_ResultCode Err::ResultCode_MAX;
const int Err::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Err::kResultCodeFieldNumber;
const int Err::kResultDescFieldNumber;
#endif  // !_MSC_VER

Err::Err()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Err::InitAsDefaultInstance() {
}

Err::Err(const Err& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Err::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 0u;
  result_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Err::~Err() {
  SharedDtor();
}

void Err::SharedDtor() {
  if (result_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete result_desc_;
  }
  if (this != default_instance_) {
  }
}

void Err::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Err::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Err_descriptor_;
}

const Err& Err::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MomoMsg();
  return *default_instance_;
}

Err* Err::default_instance_ = NULL;

Err* Err::New() const {
  return new Err;
}

void Err::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_code_ = 0u;
    if (has_result_desc()) {
      if (result_desc_ != &::google::protobuf::internal::kEmptyString) {
        result_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Err::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_desc;
        break;
      }

      // optional string result_desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_desc().data(), this->result_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Err::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // optional string result_desc = 2;
  if (has_result_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_desc().data(), this->result_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->result_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Err::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // optional string result_desc = 2;
  if (has_result_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_desc().data(), this->result_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Err::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string result_desc = 2;
    if (has_result_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Err::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Err* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Err*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Err::MergeFrom(const Err& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_desc()) {
      set_result_desc(from.result_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Err::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Err::CopyFrom(const Err& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Err::IsInitialized() const {

  return true;
}

void Err::Swap(Err* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(result_desc_, other->result_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Err::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Err_descriptor_;
  metadata.reflection = Err_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kImeiFieldNumber;
const int Hello::kMagicKeyFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  SharedDtor();
}

void Hello::SharedDtor() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
    delete magic_key_;
  }
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MomoMsg();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    if (has_magic_key()) {
      if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
        magic_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string imei = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_magic_key;
        break;
      }

      // optional string magic_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magic_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->magic_key().data(), this->magic_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string imei = 1;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->imei(), output);
  }

  // optional string magic_key = 2;
  if (has_magic_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->magic_key().data(), this->magic_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->magic_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string imei = 1;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imei(), target);
  }

  // optional string magic_key = 2;
  if (has_magic_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->magic_key().data(), this->magic_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->magic_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string imei = 1;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string magic_key = 2;
    if (has_magic_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magic_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_magic_key()) {
      set_magic_key(from.magic_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(imei_, other->imei_);
    std::swap(magic_key_, other->magic_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HelloReply_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloReply_ResultCode_descriptor_;
}
bool HelloReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HelloReply_ResultCode HelloReply::ALL_OK;
const HelloReply_ResultCode HelloReply::MSG_FORMAT_NOT_CORRECT;
const HelloReply_ResultCode HelloReply::PHONE_NUMBER_NOT_REGISTERED;
const HelloReply_ResultCode HelloReply::PHONE_NUMBER_NOT_CORRECT;
const HelloReply_ResultCode HelloReply::ResultCode_MIN;
const HelloReply_ResultCode HelloReply::ResultCode_MAX;
const int HelloReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HelloReply::kResultFieldNumber;
const int HelloReply::kResultCodeFieldNumber;
const int HelloReply::kMagicKeyFieldNumber;
const int HelloReply::kResultDescFieldNumber;
#endif  // !_MSC_VER

HelloReply::HelloReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloReply::InitAsDefaultInstance() {
}

HelloReply::HelloReply(const HelloReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  result_code_ = 0u;
  magic_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloReply::~HelloReply() {
  SharedDtor();
}

void HelloReply::SharedDtor() {
  if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
    delete magic_key_;
  }
  if (result_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete result_desc_;
  }
  if (this != default_instance_) {
  }
}

void HelloReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloReply_descriptor_;
}

const HelloReply& HelloReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MomoMsg();
  return *default_instance_;
}

HelloReply* HelloReply::default_instance_ = NULL;

HelloReply* HelloReply::New() const {
  return new HelloReply;
}

void HelloReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    result_code_ = 0u;
    if (has_magic_key()) {
      if (magic_key_ != &::google::protobuf::internal::kEmptyString) {
        magic_key_->clear();
      }
    }
    if (has_result_desc()) {
      if (result_desc_ != &::google::protobuf::internal::kEmptyString) {
        result_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // optional uint32 result_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_magic_key;
        break;
      }

      // optional string magic_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magic_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->magic_key().data(), this->magic_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_desc;
        break;
      }

      // optional string result_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_desc().data(), this->result_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional string magic_key = 3;
  if (has_magic_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->magic_key().data(), this->magic_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->magic_key(), output);
  }

  // optional string result_desc = 4;
  if (has_result_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_desc().data(), this->result_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->result_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // optional string magic_key = 3;
  if (has_magic_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->magic_key().data(), this->magic_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->magic_key(), target);
  }

  // optional string result_desc = 4;
  if (has_result_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_desc().data(), this->result_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->result_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string magic_key = 3;
    if (has_magic_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magic_key());
    }

    // optional string result_desc = 4;
    if (has_result_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloReply::MergeFrom(const HelloReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_magic_key()) {
      set_magic_key(from.magic_key());
    }
    if (from.has_result_desc()) {
      set_result_desc(from.result_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReply::CopyFrom(const HelloReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {

  return true;
}

void HelloReply::Swap(HelloReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(result_code_, other->result_code_);
    std::swap(magic_key_, other->magic_key_);
    std::swap(result_desc_, other->result_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloReply_descriptor_;
  metadata.reflection = HelloReply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Base_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_MsgType_descriptor_;
}
bool Base_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Base_MsgType Base::ACK;
const Base_MsgType Base::ERROR;
const Base_MsgType Base::HELLO;
const Base_MsgType Base::HELLO_REPLY;
const Base_MsgType Base::GET_OTP;
const Base_MsgType Base::GET_OTP_REPLY;
const Base_MsgType Base::VERIFY_OTP;
const Base_MsgType Base::VERIFY_OTP_REPLY;
const Base_MsgType Base::LOGIN;
const Base_MsgType Base::LOGIN_REPLY;
const Base_MsgType Base::SIGNUP;
const Base_MsgType Base::SIGNUP_REPLY;
const Base_MsgType Base::RECOVERY_PIN;
const Base_MsgType Base::RECOVERY_PIN_REPLY;
const Base_MsgType Base::BILLAY_GETBILL;
const Base_MsgType Base::BILLAY_GETBILL_REPLY;
const Base_MsgType Base::DEVICE_INFO;
const Base_MsgType Base::DEVICE_INFO_REPLY;
const Base_MsgType Base::TOPUP_PHONE;
const Base_MsgType Base::TOPUP_PHONE_REPLY;
const Base_MsgType Base::BILLAY_ONE_PAYMENT;
const Base_MsgType Base::BILLAY_ONE_PAYMENT_REPLY;
const Base_MsgType Base::CHANGE_MPIN;
const Base_MsgType Base::CHANGE_MPIN_REPLY;
const Base_MsgType Base::BILLPAY_GET_ALL;
const Base_MsgType Base::BILLPAY_GET_ALL_REPLY;
const Base_MsgType Base::TRANSFER_M2M;
const Base_MsgType Base::TRANSFER_M2M_REPLY;
const Base_MsgType Base::TRANSFER_M2C;
const Base_MsgType Base::TRANSFER_M2C_REPLY;
const Base_MsgType Base::CASHIN_FORM_VCB_TO_MOMO;
const Base_MsgType Base::CASHIN_FORM_VCB_TO_MOMO_REPLY;
const Base_MsgType Base::CASHOUT_FORM_MOMO_TO_VCB;
const Base_MsgType Base::CASHOUT_FORM_MOMO_TO_VCB_REPLY;
const Base_MsgType Base::GET_USER_INFO;
const Base_MsgType Base::GET_USER_INFO_REPLY;
const Base_MsgType Base::PHONE_EXIST;
const Base_MsgType Base::PHONE_EXIST_REPLY;
const Base_MsgType Base::LOG_OUT;
const Base_MsgType Base::LOG_OUT_REPLY;
const Base_MsgType Base::MsgType_MIN;
const Base_MsgType Base::MsgType_MAX;
const int Base::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Base::kTypeFieldNumber;
const int Base::kPhoneFieldNumber;
const int Base::kIndexFieldNumber;
const int Base::kAckFieldNumber;
const int Base::kErrFieldNumber;
const int Base::kHelloFieldNumber;
const int Base::kHelloReplyFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Base::InitAsDefaultInstance() {
  err_ = const_cast< ::com::mservice::momo::msg::Err*>(&::com::mservice::momo::msg::Err::default_instance());
  hello_ = const_cast< ::com::mservice::momo::msg::Hello*>(&::com::mservice::momo::msg::Hello::default_instance());
  hello_reply_ = const_cast< ::com::mservice::momo::msg::HelloReply*>(&::com::mservice::momo::msg::HelloReply::default_instance());
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Base::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0u;
  ack_ = false;
  err_ = NULL;
  hello_ = NULL;
  hello_reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  SharedDtor();
}

void Base::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
    delete err_;
    delete hello_;
    delete hello_reply_;
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MomoMsg();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    index_ = 0u;
    ack_ = false;
    if (has_err()) {
      if (err_ != NULL) err_->::com::mservice::momo::msg::Err::Clear();
    }
    if (has_hello()) {
      if (hello_ != NULL) hello_->::com::mservice::momo::msg::Hello::Clear();
    }
    if (has_hello_reply()) {
      if (hello_reply_ != NULL) hello_reply_->::com::mservice::momo::msg::HelloReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.mservice.momo.msg.Base.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::Base_MsgType_IsValid(value)) {
            set_type(static_cast< ::com::mservice::momo::msg::Base_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ack;
        break;
      }

      // optional bool ack = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_err;
        break;
      }

      // optional .com.mservice.momo.msg.Err err = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_hello;
        break;
      }

      // optional .com.mservice.momo.msg.Hello hello = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hello:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8018)) goto parse_hello_reply;
        break;
      }

      // optional .com.mservice.momo.msg.HelloReply hello_reply = 1002;
      case 1002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hello_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.mservice.momo.msg.Base.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional bool ack = 10;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ack(), output);
  }

  // optional .com.mservice.momo.msg.Err err = 11;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->err(), output);
  }

  // optional .com.mservice.momo.msg.Hello hello = 1001;
  if (has_hello()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->hello(), output);
  }

  // optional .com.mservice.momo.msg.HelloReply hello_reply = 1002;
  if (has_hello_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->hello_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.mservice.momo.msg.Base.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional bool ack = 10;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ack(), target);
  }

  // optional .com.mservice.momo.msg.Err err = 11;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->err(), target);
  }

  // optional .com.mservice.momo.msg.Hello hello = 1001;
  if (has_hello()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->hello(), target);
  }

  // optional .com.mservice.momo.msg.HelloReply hello_reply = 1002;
  if (has_hello_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1002, this->hello_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.mservice.momo.msg.Base.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional bool ack = 10;
    if (has_ack()) {
      total_size += 1 + 1;
    }

    // optional .com.mservice.momo.msg.Err err = 11;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }

    // optional .com.mservice.momo.msg.Hello hello = 1001;
    if (has_hello()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hello());
    }

    // optional .com.mservice.momo.msg.HelloReply hello_reply = 1002;
    if (has_hello_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hello_reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_err()) {
      mutable_err()->::com::mservice::momo::msg::Err::MergeFrom(from.err());
    }
    if (from.has_hello()) {
      mutable_hello()->::com::mservice::momo::msg::Hello::MergeFrom(from.hello());
    }
    if (from.has_hello_reply()) {
      mutable_hello_reply()->::com::mservice::momo::msg::HelloReply::MergeFrom(from.hello_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(phone_, other->phone_);
    std::swap(index_, other->index_);
    std::swap(ack_, other->ack_);
    std::swap(err_, other->err_);
    std::swap(hello_, other->hello_);
    std::swap(hello_reply_, other->hello_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace momo
}  // namespace mservice
}  // namespace com

// @@protoc_insertion_point(global_scope)
