// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MomoProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MomoProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mservice {
namespace momo {
namespace msg {

void protobuf_ShutdownFile_MomoProto_2eproto() {
  delete TextValueMsg::default_instance_;
  delete FormReply::default_instance_;
  delete FormField::default_instance_;
  delete ValueForDropBox::default_instance_;
  delete GetServiceByLastTime::default_instance_;
  delete GetServiceByServiceId::default_instance_;
  delete WholeSystemPaused::default_instance_;
  delete GetServiceLayout::default_instance_;
  delete Invitee::default_instance_;
  delete InviteStatisticReply::default_instance_;
  delete TextValue::default_instance_;
  delete Service::default_instance_;
  delete ServiceItem::default_instance_;
  delete ServiceReply::default_instance_;
  delete FieldItem::default_instance_;
  delete ExtraInfo::default_instance_;
  delete GetServiceLayoutReply::default_instance_;
  delete Promotion::default_instance_;
  delete GetPromotionReply::default_instance_;
  delete GetPromotionDetail::default_instance_;
  delete GetPromotionDetailReply::default_instance_;
  delete MinMax::default_instance_;
  delete MinMaxReply::default_instance_;
  delete CreateOrder123Phim::default_instance_;
  delete Seat::default_instance_;
  delete CreateOrder123PhimReply::default_instance_;
  delete StandardSync::default_instance_;
  delete StandardReply::default_instance_;
  delete BanketVerifyOtp::default_instance_;
  delete IdList::default_instance_;
  delete BankOfBanknet::default_instance_;
  delete TranStatisticPerDayReply::default_instance_;
  delete GetFee::default_instance_;
  delete GetFeeReply::default_instance_;
  delete NewUser::default_instance_;
  delete TicketInfo::default_instance_;
  delete RegStatus::default_instance_;
  delete Hello::default_instance_;
  delete HelloReply::default_instance_;
  delete VerifyOtp::default_instance_;
  delete VerifyOtpReply::default_instance_;
  delete Register::default_instance_;
  delete LogIn::default_instance_;
  delete LogInReply::default_instance_;
  delete GetBillInfo::default_instance_;
  delete BillDetail::default_instance_;
  delete GetBillInfoReply::default_instance_;
  delete ChangePin::default_instance_;
  delete WhoIsMomoer::default_instance_;
  delete ViewPaymentHistoryByBillId::default_instance_;
  delete ViewPaymentHistoryByBillIdReply::default_instance_;
  delete DeviceInfo::default_instance_;
  delete GetAccessHistory::default_instance_;
  delete AccessHistoryDetail::default_instance_;
  delete GetAccessHistoryReply::default_instance_;
  delete StoreInfo::default_instance_;
  delete SyncStoreLocationReply::default_instance_;
  delete PhoneExist::default_instance_;
  delete AgentInfo::default_instance_;
  delete BankNetToMomoRely::default_instance_;
  delete MoneyRequest::default_instance_;
  delete TranHisV1::default_instance_;
  delete CardItem::default_instance_;
  delete CardAddOrUpdate::default_instance_;
  delete CardAddOrUpdateReply::default_instance_;
  delete CardSyncFirstTimeReply::default_instance_;
  delete TranHisSyncReply::default_instance_;
  delete Bill::default_instance_;
  delete RemoveSavedBill::default_instance_;
  delete RemoveSavedBillReply::default_instance_;
  delete Notification::default_instance_;
  delete UpdateNotificationsStatus::default_instance_;
  delete UpdateNotificationsStatusReply::default_instance_;
  delete NotificationSyncReply::default_instance_;
  delete NotificationNew::default_instance_;
  delete NotificationReceived::default_instance_;
  delete GetNotification::default_instance_;
  delete GetNotificationReply::default_instance_;
  delete Avatar::default_instance_;
  delete AvatarReply::default_instance_;
  delete AvatarUploadReply::default_instance_;
  delete GetDynamicConfig::default_instance_;
  delete GetDynamicConfigReply::default_instance_;
  delete GetSmartLinkUrl::default_instance_;
  delete GetSmartLinkUrlReply::default_instance_;
  delete StoreRateInfo::default_instance_;
  delete GetStoreRate::default_instance_;
  delete GetStoreRateReply::default_instance_;
  delete StoreComment::default_instance_;
  delete GetStoreCommentPage::default_instance_;
  delete GetStoreCommentPageReply::default_instance_;
  delete StoreCommentCrud::default_instance_;
  delete StoreCommentCrudReply::default_instance_;
  delete StoreWarningType::default_instance_;
  delete GetStoreWarningType::default_instance_;
  delete GetStoreWarningTypeReply::default_instance_;
  delete WarnStore::default_instance_;
  delete WarnStoreReply::default_instance_;
  delete GiftType::default_instance_;
  delete Gift::default_instance_;
  delete GiftClaim::default_instance_;
  delete GiftClaimReply::default_instance_;
  delete UserSetting::default_instance_;
  delete GetGiftType::default_instance_;
  delete GetGiftTypeReply::default_instance_;
  delete GetGift::default_instance_;
  delete GetGiftReply::default_instance_;
  delete SetGiftStatus::default_instance_;
  delete SendMessage::default_instance_;
  delete GiftRequest::default_instance_;
  delete GetTranConfirmReply::default_instance_;
  delete InfoAlertType::default_instance_;
  delete GetAlertType::default_instance_;
  delete GetAlertTypeReply::default_instance_;
  delete InfoAlert::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MomoProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MomoProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TextValueMsg::default_instance_ = new TextValueMsg();
  FormReply::default_instance_ = new FormReply();
  FormField::default_instance_ = new FormField();
  ValueForDropBox::default_instance_ = new ValueForDropBox();
  GetServiceByLastTime::default_instance_ = new GetServiceByLastTime();
  GetServiceByServiceId::default_instance_ = new GetServiceByServiceId();
  WholeSystemPaused::default_instance_ = new WholeSystemPaused();
  GetServiceLayout::default_instance_ = new GetServiceLayout();
  Invitee::default_instance_ = new Invitee();
  InviteStatisticReply::default_instance_ = new InviteStatisticReply();
  TextValue::default_instance_ = new TextValue();
  Service::default_instance_ = new Service();
  ServiceItem::default_instance_ = new ServiceItem();
  ServiceReply::default_instance_ = new ServiceReply();
  FieldItem::default_instance_ = new FieldItem();
  ExtraInfo::default_instance_ = new ExtraInfo();
  GetServiceLayoutReply::default_instance_ = new GetServiceLayoutReply();
  Promotion::default_instance_ = new Promotion();
  GetPromotionReply::default_instance_ = new GetPromotionReply();
  GetPromotionDetail::default_instance_ = new GetPromotionDetail();
  GetPromotionDetailReply::default_instance_ = new GetPromotionDetailReply();
  MinMax::default_instance_ = new MinMax();
  MinMaxReply::default_instance_ = new MinMaxReply();
  CreateOrder123Phim::default_instance_ = new CreateOrder123Phim();
  Seat::default_instance_ = new Seat();
  CreateOrder123PhimReply::default_instance_ = new CreateOrder123PhimReply();
  StandardSync::default_instance_ = new StandardSync();
  StandardReply::default_instance_ = new StandardReply();
  BanketVerifyOtp::default_instance_ = new BanketVerifyOtp();
  IdList::default_instance_ = new IdList();
  BankOfBanknet::default_instance_ = new BankOfBanknet();
  TranStatisticPerDayReply::default_instance_ = new TranStatisticPerDayReply();
  GetFee::default_instance_ = new GetFee();
  GetFeeReply::default_instance_ = new GetFeeReply();
  NewUser::default_instance_ = new NewUser();
  TicketInfo::default_instance_ = new TicketInfo();
  RegStatus::default_instance_ = new RegStatus();
  Hello::default_instance_ = new Hello();
  HelloReply::default_instance_ = new HelloReply();
  VerifyOtp::default_instance_ = new VerifyOtp();
  VerifyOtpReply::default_instance_ = new VerifyOtpReply();
  Register::default_instance_ = new Register();
  LogIn::default_instance_ = new LogIn();
  LogInReply::default_instance_ = new LogInReply();
  GetBillInfo::default_instance_ = new GetBillInfo();
  BillDetail::default_instance_ = new BillDetail();
  GetBillInfoReply::default_instance_ = new GetBillInfoReply();
  ChangePin::default_instance_ = new ChangePin();
  WhoIsMomoer::default_instance_ = new WhoIsMomoer();
  ViewPaymentHistoryByBillId::default_instance_ = new ViewPaymentHistoryByBillId();
  ViewPaymentHistoryByBillIdReply::default_instance_ = new ViewPaymentHistoryByBillIdReply();
  DeviceInfo::default_instance_ = new DeviceInfo();
  GetAccessHistory::default_instance_ = new GetAccessHistory();
  AccessHistoryDetail::default_instance_ = new AccessHistoryDetail();
  GetAccessHistoryReply::default_instance_ = new GetAccessHistoryReply();
  StoreInfo::default_instance_ = new StoreInfo();
  SyncStoreLocationReply::default_instance_ = new SyncStoreLocationReply();
  PhoneExist::default_instance_ = new PhoneExist();
  AgentInfo::default_instance_ = new AgentInfo();
  BankNetToMomoRely::default_instance_ = new BankNetToMomoRely();
  MoneyRequest::default_instance_ = new MoneyRequest();
  TranHisV1::default_instance_ = new TranHisV1();
  CardItem::default_instance_ = new CardItem();
  CardAddOrUpdate::default_instance_ = new CardAddOrUpdate();
  CardAddOrUpdateReply::default_instance_ = new CardAddOrUpdateReply();
  CardSyncFirstTimeReply::default_instance_ = new CardSyncFirstTimeReply();
  TranHisSyncReply::default_instance_ = new TranHisSyncReply();
  Bill::default_instance_ = new Bill();
  RemoveSavedBill::default_instance_ = new RemoveSavedBill();
  RemoveSavedBillReply::default_instance_ = new RemoveSavedBillReply();
  Notification::default_instance_ = new Notification();
  UpdateNotificationsStatus::default_instance_ = new UpdateNotificationsStatus();
  UpdateNotificationsStatusReply::default_instance_ = new UpdateNotificationsStatusReply();
  NotificationSyncReply::default_instance_ = new NotificationSyncReply();
  NotificationNew::default_instance_ = new NotificationNew();
  NotificationReceived::default_instance_ = new NotificationReceived();
  GetNotification::default_instance_ = new GetNotification();
  GetNotificationReply::default_instance_ = new GetNotificationReply();
  Avatar::default_instance_ = new Avatar();
  AvatarReply::default_instance_ = new AvatarReply();
  AvatarUploadReply::default_instance_ = new AvatarUploadReply();
  GetDynamicConfig::default_instance_ = new GetDynamicConfig();
  GetDynamicConfigReply::default_instance_ = new GetDynamicConfigReply();
  GetSmartLinkUrl::default_instance_ = new GetSmartLinkUrl();
  GetSmartLinkUrlReply::default_instance_ = new GetSmartLinkUrlReply();
  StoreRateInfo::default_instance_ = new StoreRateInfo();
  GetStoreRate::default_instance_ = new GetStoreRate();
  GetStoreRateReply::default_instance_ = new GetStoreRateReply();
  StoreComment::default_instance_ = new StoreComment();
  GetStoreCommentPage::default_instance_ = new GetStoreCommentPage();
  GetStoreCommentPageReply::default_instance_ = new GetStoreCommentPageReply();
  StoreCommentCrud::default_instance_ = new StoreCommentCrud();
  StoreCommentCrudReply::default_instance_ = new StoreCommentCrudReply();
  StoreWarningType::default_instance_ = new StoreWarningType();
  GetStoreWarningType::default_instance_ = new GetStoreWarningType();
  GetStoreWarningTypeReply::default_instance_ = new GetStoreWarningTypeReply();
  WarnStore::default_instance_ = new WarnStore();
  WarnStoreReply::default_instance_ = new WarnStoreReply();
  GiftType::default_instance_ = new GiftType();
  Gift::default_instance_ = new Gift();
  GiftClaim::default_instance_ = new GiftClaim();
  GiftClaimReply::default_instance_ = new GiftClaimReply();
  UserSetting::default_instance_ = new UserSetting();
  GetGiftType::default_instance_ = new GetGiftType();
  GetGiftTypeReply::default_instance_ = new GetGiftTypeReply();
  GetGift::default_instance_ = new GetGift();
  GetGiftReply::default_instance_ = new GetGiftReply();
  SetGiftStatus::default_instance_ = new SetGiftStatus();
  SendMessage::default_instance_ = new SendMessage();
  GiftRequest::default_instance_ = new GiftRequest();
  GetTranConfirmReply::default_instance_ = new GetTranConfirmReply();
  InfoAlertType::default_instance_ = new InfoAlertType();
  GetAlertType::default_instance_ = new GetAlertType();
  GetAlertTypeReply::default_instance_ = new GetAlertTypeReply();
  InfoAlert::default_instance_ = new InfoAlert();
  TextValueMsg::default_instance_->InitAsDefaultInstance();
  FormReply::default_instance_->InitAsDefaultInstance();
  FormField::default_instance_->InitAsDefaultInstance();
  ValueForDropBox::default_instance_->InitAsDefaultInstance();
  GetServiceByLastTime::default_instance_->InitAsDefaultInstance();
  GetServiceByServiceId::default_instance_->InitAsDefaultInstance();
  WholeSystemPaused::default_instance_->InitAsDefaultInstance();
  GetServiceLayout::default_instance_->InitAsDefaultInstance();
  Invitee::default_instance_->InitAsDefaultInstance();
  InviteStatisticReply::default_instance_->InitAsDefaultInstance();
  TextValue::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  ServiceItem::default_instance_->InitAsDefaultInstance();
  ServiceReply::default_instance_->InitAsDefaultInstance();
  FieldItem::default_instance_->InitAsDefaultInstance();
  ExtraInfo::default_instance_->InitAsDefaultInstance();
  GetServiceLayoutReply::default_instance_->InitAsDefaultInstance();
  Promotion::default_instance_->InitAsDefaultInstance();
  GetPromotionReply::default_instance_->InitAsDefaultInstance();
  GetPromotionDetail::default_instance_->InitAsDefaultInstance();
  GetPromotionDetailReply::default_instance_->InitAsDefaultInstance();
  MinMax::default_instance_->InitAsDefaultInstance();
  MinMaxReply::default_instance_->InitAsDefaultInstance();
  CreateOrder123Phim::default_instance_->InitAsDefaultInstance();
  Seat::default_instance_->InitAsDefaultInstance();
  CreateOrder123PhimReply::default_instance_->InitAsDefaultInstance();
  StandardSync::default_instance_->InitAsDefaultInstance();
  StandardReply::default_instance_->InitAsDefaultInstance();
  BanketVerifyOtp::default_instance_->InitAsDefaultInstance();
  IdList::default_instance_->InitAsDefaultInstance();
  BankOfBanknet::default_instance_->InitAsDefaultInstance();
  TranStatisticPerDayReply::default_instance_->InitAsDefaultInstance();
  GetFee::default_instance_->InitAsDefaultInstance();
  GetFeeReply::default_instance_->InitAsDefaultInstance();
  NewUser::default_instance_->InitAsDefaultInstance();
  TicketInfo::default_instance_->InitAsDefaultInstance();
  RegStatus::default_instance_->InitAsDefaultInstance();
  Hello::default_instance_->InitAsDefaultInstance();
  HelloReply::default_instance_->InitAsDefaultInstance();
  VerifyOtp::default_instance_->InitAsDefaultInstance();
  VerifyOtpReply::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  LogIn::default_instance_->InitAsDefaultInstance();
  LogInReply::default_instance_->InitAsDefaultInstance();
  GetBillInfo::default_instance_->InitAsDefaultInstance();
  BillDetail::default_instance_->InitAsDefaultInstance();
  GetBillInfoReply::default_instance_->InitAsDefaultInstance();
  ChangePin::default_instance_->InitAsDefaultInstance();
  WhoIsMomoer::default_instance_->InitAsDefaultInstance();
  ViewPaymentHistoryByBillId::default_instance_->InitAsDefaultInstance();
  ViewPaymentHistoryByBillIdReply::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  GetAccessHistory::default_instance_->InitAsDefaultInstance();
  AccessHistoryDetail::default_instance_->InitAsDefaultInstance();
  GetAccessHistoryReply::default_instance_->InitAsDefaultInstance();
  StoreInfo::default_instance_->InitAsDefaultInstance();
  SyncStoreLocationReply::default_instance_->InitAsDefaultInstance();
  PhoneExist::default_instance_->InitAsDefaultInstance();
  AgentInfo::default_instance_->InitAsDefaultInstance();
  BankNetToMomoRely::default_instance_->InitAsDefaultInstance();
  MoneyRequest::default_instance_->InitAsDefaultInstance();
  TranHisV1::default_instance_->InitAsDefaultInstance();
  CardItem::default_instance_->InitAsDefaultInstance();
  CardAddOrUpdate::default_instance_->InitAsDefaultInstance();
  CardAddOrUpdateReply::default_instance_->InitAsDefaultInstance();
  CardSyncFirstTimeReply::default_instance_->InitAsDefaultInstance();
  TranHisSyncReply::default_instance_->InitAsDefaultInstance();
  Bill::default_instance_->InitAsDefaultInstance();
  RemoveSavedBill::default_instance_->InitAsDefaultInstance();
  RemoveSavedBillReply::default_instance_->InitAsDefaultInstance();
  Notification::default_instance_->InitAsDefaultInstance();
  UpdateNotificationsStatus::default_instance_->InitAsDefaultInstance();
  UpdateNotificationsStatusReply::default_instance_->InitAsDefaultInstance();
  NotificationSyncReply::default_instance_->InitAsDefaultInstance();
  NotificationNew::default_instance_->InitAsDefaultInstance();
  NotificationReceived::default_instance_->InitAsDefaultInstance();
  GetNotification::default_instance_->InitAsDefaultInstance();
  GetNotificationReply::default_instance_->InitAsDefaultInstance();
  Avatar::default_instance_->InitAsDefaultInstance();
  AvatarReply::default_instance_->InitAsDefaultInstance();
  AvatarUploadReply::default_instance_->InitAsDefaultInstance();
  GetDynamicConfig::default_instance_->InitAsDefaultInstance();
  GetDynamicConfigReply::default_instance_->InitAsDefaultInstance();
  GetSmartLinkUrl::default_instance_->InitAsDefaultInstance();
  GetSmartLinkUrlReply::default_instance_->InitAsDefaultInstance();
  StoreRateInfo::default_instance_->InitAsDefaultInstance();
  GetStoreRate::default_instance_->InitAsDefaultInstance();
  GetStoreRateReply::default_instance_->InitAsDefaultInstance();
  StoreComment::default_instance_->InitAsDefaultInstance();
  GetStoreCommentPage::default_instance_->InitAsDefaultInstance();
  GetStoreCommentPageReply::default_instance_->InitAsDefaultInstance();
  StoreCommentCrud::default_instance_->InitAsDefaultInstance();
  StoreCommentCrudReply::default_instance_->InitAsDefaultInstance();
  StoreWarningType::default_instance_->InitAsDefaultInstance();
  GetStoreWarningType::default_instance_->InitAsDefaultInstance();
  GetStoreWarningTypeReply::default_instance_->InitAsDefaultInstance();
  WarnStore::default_instance_->InitAsDefaultInstance();
  WarnStoreReply::default_instance_->InitAsDefaultInstance();
  GiftType::default_instance_->InitAsDefaultInstance();
  Gift::default_instance_->InitAsDefaultInstance();
  GiftClaim::default_instance_->InitAsDefaultInstance();
  GiftClaimReply::default_instance_->InitAsDefaultInstance();
  UserSetting::default_instance_->InitAsDefaultInstance();
  GetGiftType::default_instance_->InitAsDefaultInstance();
  GetGiftTypeReply::default_instance_->InitAsDefaultInstance();
  GetGift::default_instance_->InitAsDefaultInstance();
  GetGiftReply::default_instance_->InitAsDefaultInstance();
  SetGiftStatus::default_instance_->InitAsDefaultInstance();
  SendMessage::default_instance_->InitAsDefaultInstance();
  GiftRequest::default_instance_->InitAsDefaultInstance();
  GetTranConfirmReply::default_instance_->InitAsDefaultInstance();
  InfoAlertType::default_instance_->InitAsDefaultInstance();
  GetAlertType::default_instance_->InitAsDefaultInstance();
  GetAlertTypeReply::default_instance_->InitAsDefaultInstance();
  InfoAlert::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MomoProto_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MomoProto_2eproto_once_);
void protobuf_AddDesc_MomoProto_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MomoProto_2eproto_once_,
                 &protobuf_AddDesc_MomoProto_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MomoProto_2eproto {
  StaticDescriptorInitializer_MomoProto_2eproto() {
    protobuf_AddDesc_MomoProto_2eproto();
  }
} static_descriptor_initializer_MomoProto_2eproto_;
#endif
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1059:
    case 1060:
    case 1061:
    case 1063:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1234:
    case 1235:
    case 1236:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
      return true;
    default:
      return false;
  }
}

bool phim123_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool SystemError_IsValid(int value) {
  switch(value) {
    case -10:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool FeeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool GetBillInfoAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool NotificationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

bool NotiCategory_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool DynamicConfigName_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool DynamicConfigValue_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TextValueMsg::kKeysFieldNumber;
#endif  // !_MSC_VER

TextValueMsg::TextValueMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextValueMsg::InitAsDefaultInstance() {
}

TextValueMsg::TextValueMsg(const TextValueMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextValueMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextValueMsg::~TextValueMsg() {
  SharedDtor();
}

void TextValueMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TextValueMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextValueMsg& TextValueMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

TextValueMsg* TextValueMsg::default_instance_ = NULL;

TextValueMsg* TextValueMsg::New() const {
  return new TextValueMsg;
}

void TextValueMsg::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextValueMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.TextValue keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextValueMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.TextValue keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->keys(i), output);
  }

}

int TextValueMsg::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.TextValue keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextValueMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextValueMsg*>(&from));
}

void TextValueMsg::MergeFrom(const TextValueMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
}

void TextValueMsg::CopyFrom(const TextValueMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextValueMsg::IsInitialized() const {

  return true;
}

void TextValueMsg::Swap(TextValueMsg* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextValueMsg::GetTypeName() const {
  return "com.mservice.momo.msg.TextValueMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int FormReply::kListInfoFieldNumber;
const int FormReply::kNextFieldNumber;
#endif  // !_MSC_VER

FormReply::FormReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FormReply::InitAsDefaultInstance() {
}

FormReply::FormReply(const FormReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FormReply::SharedCtor() {
  _cached_size_ = 0;
  next_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormReply::~FormReply() {
  SharedDtor();
}

void FormReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FormReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FormReply& FormReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

FormReply* FormReply::default_instance_ = NULL;

FormReply* FormReply::New() const {
  return new FormReply;
}

void FormReply::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    next_ = 0u;
  }
  list_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FormReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.TextValue list_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_info;
        if (input->ExpectTag(16)) goto parse_next;
        break;
      }

      // optional uint32 next = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.TextValue list_info = 1;
  for (int i = 0; i < this->list_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list_info(i), output);
  }

  // optional uint32 next = 2;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next(), output);
  }

}

int FormReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 next = 2;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next());
    }

  }
  // repeated .com.mservice.momo.msg.TextValue list_info = 1;
  total_size += 1 * this->list_info_size();
  for (int i = 0; i < this->list_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FormReply*>(&from));
}

void FormReply::MergeFrom(const FormReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_info_.MergeFrom(from.list_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_next()) {
      set_next(from.next());
    }
  }
}

void FormReply::CopyFrom(const FormReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormReply::IsInitialized() const {

  return true;
}

void FormReply::Swap(FormReply* other) {
  if (other != this) {
    list_info_.Swap(&other->list_info_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FormReply::GetTypeName() const {
  return "com.mservice.momo.msg.FormReply";
}


// ===================================================================

#ifndef _MSC_VER
const int FormField::kListFieldItemFieldNumber;
const int FormField::kListValueFieldNumber;
#endif  // !_MSC_VER

FormField::FormField()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FormField::InitAsDefaultInstance() {
}

FormField::FormField(const FormField& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FormField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormField::~FormField() {
  SharedDtor();
}

void FormField::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FormField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FormField& FormField::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

FormField* FormField::default_instance_ = NULL;

FormField* FormField::New() const {
  return new FormField;
}

void FormField::Clear() {
  list_field_item_.Clear();
  list_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FormField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.FieldItem list_field_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_field_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_field_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_field_item;
        if (input->ExpectTag(18)) goto parse_list_value;
        break;
      }

      // repeated .com.mservice.momo.msg.ValueForDropBox list_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.FieldItem list_field_item = 1;
  for (int i = 0; i < this->list_field_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list_field_item(i), output);
  }

  // repeated .com.mservice.momo.msg.ValueForDropBox list_value = 2;
  for (int i = 0; i < this->list_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->list_value(i), output);
  }

}

int FormField::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.FieldItem list_field_item = 1;
  total_size += 1 * this->list_field_item_size();
  for (int i = 0; i < this->list_field_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_field_item(i));
  }

  // repeated .com.mservice.momo.msg.ValueForDropBox list_value = 2;
  total_size += 1 * this->list_value_size();
  for (int i = 0; i < this->list_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_value(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormField::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FormField*>(&from));
}

void FormField::MergeFrom(const FormField& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_field_item_.MergeFrom(from.list_field_item_);
  list_value_.MergeFrom(from.list_value_);
}

void FormField::CopyFrom(const FormField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormField::IsInitialized() const {

  return true;
}

void FormField::Swap(FormField* other) {
  if (other != this) {
    list_field_item_.Swap(&other->list_field_item_);
    list_value_.Swap(&other->list_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FormField::GetTypeName() const {
  return "com.mservice.momo.msg.FormField";
}


// ===================================================================

#ifndef _MSC_VER
const int ValueForDropBox::kLinkToDropKeyFieldNumber;
const int ValueForDropBox::kListValueFieldNumber;
#endif  // !_MSC_VER

ValueForDropBox::ValueForDropBox()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ValueForDropBox::InitAsDefaultInstance() {
}

ValueForDropBox::ValueForDropBox(const ValueForDropBox& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ValueForDropBox::SharedCtor() {
  _cached_size_ = 0;
  link_to_drop_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValueForDropBox::~ValueForDropBox() {
  SharedDtor();
}

void ValueForDropBox::SharedDtor() {
  if (link_to_drop_key_ != &::google::protobuf::internal::kEmptyString) {
    delete link_to_drop_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ValueForDropBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ValueForDropBox& ValueForDropBox::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ValueForDropBox* ValueForDropBox::default_instance_ = NULL;

ValueForDropBox* ValueForDropBox::New() const {
  return new ValueForDropBox;
}

void ValueForDropBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_link_to_drop_key()) {
      if (link_to_drop_key_ != &::google::protobuf::internal::kEmptyString) {
        link_to_drop_key_->clear();
      }
    }
  }
  list_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ValueForDropBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string link_to_drop_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_to_drop_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_value;
        break;
      }

      // repeated .com.mservice.momo.msg.TextValue list_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValueForDropBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string link_to_drop_key = 1;
  if (has_link_to_drop_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->link_to_drop_key(), output);
  }

  // repeated .com.mservice.momo.msg.TextValue list_value = 2;
  for (int i = 0; i < this->list_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->list_value(i), output);
  }

}

int ValueForDropBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string link_to_drop_key = 1;
    if (has_link_to_drop_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_to_drop_key());
    }

  }
  // repeated .com.mservice.momo.msg.TextValue list_value = 2;
  total_size += 1 * this->list_value_size();
  for (int i = 0; i < this->list_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_value(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueForDropBox::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ValueForDropBox*>(&from));
}

void ValueForDropBox::MergeFrom(const ValueForDropBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_value_.MergeFrom(from.list_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_link_to_drop_key()) {
      set_link_to_drop_key(from.link_to_drop_key());
    }
  }
}

void ValueForDropBox::CopyFrom(const ValueForDropBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueForDropBox::IsInitialized() const {

  return true;
}

void ValueForDropBox::Swap(ValueForDropBox* other) {
  if (other != this) {
    std::swap(link_to_drop_key_, other->link_to_drop_key_);
    list_value_.Swap(&other->list_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ValueForDropBox::GetTypeName() const {
  return "com.mservice.momo.msg.ValueForDropBox";
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceByLastTime::kLastTimeFieldNumber;
#endif  // !_MSC_VER

GetServiceByLastTime::GetServiceByLastTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetServiceByLastTime::InitAsDefaultInstance() {
}

GetServiceByLastTime::GetServiceByLastTime(const GetServiceByLastTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceByLastTime::SharedCtor() {
  _cached_size_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceByLastTime::~GetServiceByLastTime() {
  SharedDtor();
}

void GetServiceByLastTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceByLastTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceByLastTime& GetServiceByLastTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetServiceByLastTime* GetServiceByLastTime::default_instance_ = NULL;

GetServiceByLastTime* GetServiceByLastTime::New() const {
  return new GetServiceByLastTime;
}

void GetServiceByLastTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetServiceByLastTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceByLastTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_time = 1;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_time(), output);
  }

}

int GetServiceByLastTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_time = 1;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceByLastTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceByLastTime*>(&from));
}

void GetServiceByLastTime::MergeFrom(const GetServiceByLastTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
}

void GetServiceByLastTime::CopyFrom(const GetServiceByLastTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceByLastTime::IsInitialized() const {

  return true;
}

void GetServiceByLastTime::Swap(GetServiceByLastTime* other) {
  if (other != this) {
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceByLastTime::GetTypeName() const {
  return "com.mservice.momo.msg.GetServiceByLastTime";
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceByServiceId::kServiceIdFieldNumber;
#endif  // !_MSC_VER

GetServiceByServiceId::GetServiceByServiceId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetServiceByServiceId::InitAsDefaultInstance() {
}

GetServiceByServiceId::GetServiceByServiceId(const GetServiceByServiceId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceByServiceId::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceByServiceId::~GetServiceByServiceId() {
  SharedDtor();
}

void GetServiceByServiceId::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceByServiceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceByServiceId& GetServiceByServiceId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetServiceByServiceId* GetServiceByServiceId::default_instance_ = NULL;

GetServiceByServiceId* GetServiceByServiceId::New() const {
  return new GetServiceByServiceId;
}

void GetServiceByServiceId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetServiceByServiceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceByServiceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }

}

int GetServiceByServiceId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceByServiceId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceByServiceId*>(&from));
}

void GetServiceByServiceId::MergeFrom(const GetServiceByServiceId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
}

void GetServiceByServiceId::CopyFrom(const GetServiceByServiceId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceByServiceId::IsInitialized() const {

  return true;
}

void GetServiceByServiceId::Swap(GetServiceByServiceId* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceByServiceId::GetTypeName() const {
  return "com.mservice.momo.msg.GetServiceByServiceId";
}


// ===================================================================

#ifndef _MSC_VER
const int WholeSystemPaused::kCaptionFieldNumber;
const int WholeSystemPaused::kBodyFieldNumber;
#endif  // !_MSC_VER

WholeSystemPaused::WholeSystemPaused()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WholeSystemPaused::InitAsDefaultInstance() {
}

WholeSystemPaused::WholeSystemPaused(const WholeSystemPaused& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WholeSystemPaused::SharedCtor() {
  _cached_size_ = 0;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WholeSystemPaused::~WholeSystemPaused() {
  SharedDtor();
}

void WholeSystemPaused::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WholeSystemPaused::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WholeSystemPaused& WholeSystemPaused::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

WholeSystemPaused* WholeSystemPaused::default_instance_ = NULL;

WholeSystemPaused* WholeSystemPaused::New() const {
  return new WholeSystemPaused;
}

void WholeSystemPaused::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WholeSystemPaused::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional string body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WholeSystemPaused::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->caption(), output);
  }

  // optional string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->body(), output);
  }

}

int WholeSystemPaused::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WholeSystemPaused::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WholeSystemPaused*>(&from));
}

void WholeSystemPaused::MergeFrom(const WholeSystemPaused& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
}

void WholeSystemPaused::CopyFrom(const WholeSystemPaused& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeSystemPaused::IsInitialized() const {

  return true;
}

void WholeSystemPaused::Swap(WholeSystemPaused* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WholeSystemPaused::GetTypeName() const {
  return "com.mservice.momo.msg.WholeSystemPaused";
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceLayout::kServiceIdFieldNumber;
const int GetServiceLayout::kBillIdFieldNumber;
const int GetServiceLayout::kHasCheckBillFieldNumber;
const int GetServiceLayout::kServiceTypeFieldNumber;
const int GetServiceLayout::kIsPromoFieldNumber;
#endif  // !_MSC_VER

GetServiceLayout::GetServiceLayout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetServiceLayout::InitAsDefaultInstance() {
}

GetServiceLayout::GetServiceLayout(const GetServiceLayout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceLayout::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_check_bill_ = false;
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_promo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceLayout::~GetServiceLayout() {
  SharedDtor();
}

void GetServiceLayout::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bill_id_;
  }
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceLayout& GetServiceLayout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetServiceLayout* GetServiceLayout::default_instance_ = NULL;

GetServiceLayout* GetServiceLayout::New() const {
  return new GetServiceLayout;
}

void GetServiceLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    if (has_bill_id()) {
      if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
        bill_id_->clear();
      }
    }
    has_check_bill_ = false;
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
    is_promo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetServiceLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bill_id;
        break;
      }

      // optional string bill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_check_bill;
        break;
      }

      // optional bool has_check_bill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_check_bill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_check_bill_)));
          set_has_has_check_bill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_service_type;
        break;
      }

      // optional string service_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_promo;
        break;
      }

      // optional bool is_promo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_promo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_promo_)));
          set_has_is_promo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }

  // optional string bill_id = 2;
  if (has_bill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bill_id(), output);
  }

  // optional bool has_check_bill = 3;
  if (has_has_check_bill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_check_bill(), output);
  }

  // optional string service_type = 4;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->service_type(), output);
  }

  // optional bool is_promo = 5;
  if (has_is_promo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_promo(), output);
  }

}

int GetServiceLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }

    // optional string bill_id = 2;
    if (has_bill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill_id());
    }

    // optional bool has_check_bill = 3;
    if (has_has_check_bill()) {
      total_size += 1 + 1;
    }

    // optional string service_type = 4;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }

    // optional bool is_promo = 5;
    if (has_is_promo()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceLayout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceLayout*>(&from));
}

void GetServiceLayout::MergeFrom(const GetServiceLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_bill_id()) {
      set_bill_id(from.bill_id());
    }
    if (from.has_has_check_bill()) {
      set_has_check_bill(from.has_check_bill());
    }
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_is_promo()) {
      set_is_promo(from.is_promo());
    }
  }
}

void GetServiceLayout::CopyFrom(const GetServiceLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceLayout::IsInitialized() const {

  return true;
}

void GetServiceLayout::Swap(GetServiceLayout* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(bill_id_, other->bill_id_);
    std::swap(has_check_bill_, other->has_check_bill_);
    std::swap(service_type_, other->service_type_);
    std::swap(is_promo_, other->is_promo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceLayout::GetTypeName() const {
  return "com.mservice.momo.msg.GetServiceLayout";
}


// ===================================================================

#ifndef _MSC_VER
const int Invitee::kNameFieldNumber;
const int Invitee::kPhoneFieldNumber;
const int Invitee::kTimeFieldNumber;
#endif  // !_MSC_VER

Invitee::Invitee()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Invitee::InitAsDefaultInstance() {
}

Invitee::Invitee(const Invitee& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Invitee::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invitee::~Invitee() {
  SharedDtor();
}

void Invitee::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Invitee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Invitee& Invitee::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Invitee* Invitee::default_instance_ = NULL;

Invitee* Invitee::New() const {
  return new Invitee;
}

void Invitee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Invitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Invitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

}

int Invitee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invitee::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Invitee*>(&from));
}

void Invitee::MergeFrom(const Invitee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void Invitee::CopyFrom(const Invitee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitee::IsInitialized() const {

  return true;
}

void Invitee::Swap(Invitee* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(phone_, other->phone_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Invitee::GetTypeName() const {
  return "com.mservice.momo.msg.Invitee";
}


// ===================================================================

#ifndef _MSC_VER
const int InviteStatisticReply::kInviteeListFieldNumber;
#endif  // !_MSC_VER

InviteStatisticReply::InviteStatisticReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InviteStatisticReply::InitAsDefaultInstance() {
}

InviteStatisticReply::InviteStatisticReply(const InviteStatisticReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InviteStatisticReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteStatisticReply::~InviteStatisticReply() {
  SharedDtor();
}

void InviteStatisticReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteStatisticReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteStatisticReply& InviteStatisticReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

InviteStatisticReply* InviteStatisticReply::default_instance_ = NULL;

InviteStatisticReply* InviteStatisticReply::New() const {
  return new InviteStatisticReply;
}

void InviteStatisticReply::Clear() {
  invitee_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InviteStatisticReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.Invitee invitee_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitee_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitee_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_invitee_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteStatisticReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.Invitee invitee_list = 1;
  for (int i = 0; i < this->invitee_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->invitee_list(i), output);
  }

}

int InviteStatisticReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.Invitee invitee_list = 1;
  total_size += 1 * this->invitee_list_size();
  for (int i = 0; i < this->invitee_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitee_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteStatisticReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteStatisticReply*>(&from));
}

void InviteStatisticReply::MergeFrom(const InviteStatisticReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  invitee_list_.MergeFrom(from.invitee_list_);
}

void InviteStatisticReply::CopyFrom(const InviteStatisticReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteStatisticReply::IsInitialized() const {

  return true;
}

void InviteStatisticReply::Swap(InviteStatisticReply* other) {
  if (other != this) {
    invitee_list_.Swap(&other->invitee_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteStatisticReply::GetTypeName() const {
  return "com.mservice.momo.msg.InviteStatisticReply";
}


// ===================================================================

#ifndef _MSC_VER
const int TextValue::kTextFieldNumber;
const int TextValue::kValueFieldNumber;
const int TextValue::kIdFieldNumber;
#endif  // !_MSC_VER

TextValue::TextValue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextValue::InitAsDefaultInstance() {
}

TextValue::TextValue(const TextValue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextValue::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextValue::~TextValue() {
  SharedDtor();
}

void TextValue::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TextValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextValue& TextValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

TextValue* TextValue::default_instance_ = NULL;

TextValue* TextValue::New() const {
  return new TextValue;
}

void TextValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

}

int TextValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextValue*>(&from));
}

void TextValue::MergeFrom(const TextValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void TextValue::CopyFrom(const TextValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextValue::IsInitialized() const {

  return true;
}

void TextValue::Swap(TextValue* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextValue::GetTypeName() const {
  return "com.mservice.momo.msg.TextValue";
}


// ===================================================================

#ifndef _MSC_VER
const int Service::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

Service::Service()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Service::InitAsDefaultInstance() {
}

Service::Service(const Service& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Service::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service::~Service() {
  SharedDtor();
}

void Service::SharedDtor() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Service& Service::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New() const {
  return new Service;
}

void Service::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_type(), output);
  }

}

int Service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Service*>(&from));
}

void Service::MergeFrom(const Service& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
  }
}

void Service::CopyFrom(const Service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {

  return true;
}

void Service::Swap(Service* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Service::GetTypeName() const {
  return "com.mservice.momo.msg.Service";
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceItem::kServiceTypeFieldNumber;
const int ServiceItem::kPartnerCodeFieldNumber;
const int ServiceItem::kServiceIdFieldNumber;
const int ServiceItem::kServiceNameFieldNumber;
const int ServiceItem::kPartnerSiteFieldNumber;
const int ServiceItem::kIconUrlFieldNumber;
const int ServiceItem::kStatusFieldNumber;
const int ServiceItem::kTextPopupFieldNumber;
const int ServiceItem::kHasCheckDebitFieldNumber;
const int ServiceItem::kTitleDialogFieldNumber;
const int ServiceItem::kLastUpdateFieldNumber;
const int ServiceItem::kBillidTypeFieldNumber;
const int ServiceItem::kIsPromoFieldNumber;
const int ServiceItem::kTotalFormFieldNumber;
const int ServiceItem::kStarFieldNumber;
const int ServiceItem::kCategoryNameFieldNumber;
const int ServiceItem::kCategoryIdFieldNumber;
const int ServiceItem::kWebPaymentUrlFieldNumber;
const int ServiceItem::kSecretKeyFieldNumber;
const int ServiceItem::kOrderFieldNumber;
const int ServiceItem::kBillpayExtraFieldNumber;
#endif  // !_MSC_VER

ServiceItem::ServiceItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServiceItem::InitAsDefaultInstance() {
}

ServiceItem::ServiceItem(const ServiceItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceItem::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partner_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partner_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  text_popup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_check_debit_ = false;
  title_dialog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_update_ = GOOGLE_ULONGLONG(0);
  billid_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_promo_ = false;
  total_form_ = 0u;
  star_ = 0u;
  category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  web_payment_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_ = 0u;
  billpay_extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceItem::~ServiceItem() {
  SharedDtor();
}

void ServiceItem::SharedDtor() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  if (partner_code_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_code_;
  }
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (partner_site_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_site_;
  }
  if (icon_url_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_url_;
  }
  if (text_popup_ != &::google::protobuf::internal::kEmptyString) {
    delete text_popup_;
  }
  if (title_dialog_ != &::google::protobuf::internal::kEmptyString) {
    delete title_dialog_;
  }
  if (billid_type_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_type_;
  }
  if (category_name_ != &::google::protobuf::internal::kEmptyString) {
    delete category_name_;
  }
  if (category_id_ != &::google::protobuf::internal::kEmptyString) {
    delete category_id_;
  }
  if (web_payment_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_payment_url_;
  }
  if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_key_;
  }
  if (billpay_extra_ != &::google::protobuf::internal::kEmptyString) {
    delete billpay_extra_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServiceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceItem& ServiceItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ServiceItem* ServiceItem::default_instance_ = NULL;

ServiceItem* ServiceItem::New() const {
  return new ServiceItem;
}

void ServiceItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
    if (has_partner_code()) {
      if (partner_code_ != &::google::protobuf::internal::kEmptyString) {
        partner_code_->clear();
      }
    }
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_partner_site()) {
      if (partner_site_ != &::google::protobuf::internal::kEmptyString) {
        partner_site_->clear();
      }
    }
    if (has_icon_url()) {
      if (icon_url_ != &::google::protobuf::internal::kEmptyString) {
        icon_url_->clear();
      }
    }
    status_ = 0u;
    if (has_text_popup()) {
      if (text_popup_ != &::google::protobuf::internal::kEmptyString) {
        text_popup_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    has_check_debit_ = false;
    if (has_title_dialog()) {
      if (title_dialog_ != &::google::protobuf::internal::kEmptyString) {
        title_dialog_->clear();
      }
    }
    last_update_ = GOOGLE_ULONGLONG(0);
    if (has_billid_type()) {
      if (billid_type_ != &::google::protobuf::internal::kEmptyString) {
        billid_type_->clear();
      }
    }
    is_promo_ = false;
    total_form_ = 0u;
    star_ = 0u;
    if (has_category_name()) {
      if (category_name_ != &::google::protobuf::internal::kEmptyString) {
        category_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_category_id()) {
      if (category_id_ != &::google::protobuf::internal::kEmptyString) {
        category_id_->clear();
      }
    }
    if (has_web_payment_url()) {
      if (web_payment_url_ != &::google::protobuf::internal::kEmptyString) {
        web_payment_url_->clear();
      }
    }
    if (has_secret_key()) {
      if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
        secret_key_->clear();
      }
    }
    order_ = 0u;
    if (has_billpay_extra()) {
      if (billpay_extra_ != &::google::protobuf::internal::kEmptyString) {
        billpay_extra_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServiceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partner_code;
        break;
      }

      // optional string partner_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_id;
        break;
      }

      // optional string service_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_service_name;
        break;
      }

      // optional string service_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_partner_site;
        break;
      }

      // optional string partner_site = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_site()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon_url;
        break;
      }

      // optional string icon_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text_popup;
        break;
      }

      // optional string text_popup = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_popup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_popup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_check_debit;
        break;
      }

      // optional bool has_check_debit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_check_debit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_check_debit_)));
          set_has_has_check_debit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_title_dialog;
        break;
      }

      // optional string title_dialog = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_dialog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title_dialog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_update;
        break;
      }

      // optional uint64 last_update = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_update_)));
          set_has_last_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_billid_type;
        break;
      }

      // optional string billid_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billid_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_promo;
        break;
      }

      // optional bool is_promo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_promo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_promo_)));
          set_has_is_promo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_total_form;
        break;
      }

      // optional uint32 total_form = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_form:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_form_)));
          set_has_total_form();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_star;
        break;
      }

      // optional uint32 star = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_category_name;
        break;
      }

      // optional string category_name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_category_id;
        break;
      }

      // optional string category_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_web_payment_url;
        break;
      }

      // optional string web_payment_url = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_web_payment_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_payment_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_secret_key;
        break;
      }

      // optional string secret_key = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secret_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_order;
        break;
      }

      // optional uint32 order = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_billpay_extra;
        break;
      }

      // optional string billpay_extra = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billpay_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billpay_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_type(), output);
  }

  // optional string partner_code = 2;
  if (has_partner_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->partner_code(), output);
  }

  // optional string service_id = 3;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->service_id(), output);
  }

  // optional string service_name = 4;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->service_name(), output);
  }

  // optional string partner_site = 5;
  if (has_partner_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->partner_site(), output);
  }

  // optional string icon_url = 6;
  if (has_icon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->icon_url(), output);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional string text_popup = 8;
  if (has_text_popup()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->text_popup(), output);
  }

  // optional bool has_check_debit = 9;
  if (has_has_check_debit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_check_debit(), output);
  }

  // optional string title_dialog = 10;
  if (has_title_dialog()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->title_dialog(), output);
  }

  // optional uint64 last_update = 11;
  if (has_last_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->last_update(), output);
  }

  // optional string billid_type = 12;
  if (has_billid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->billid_type(), output);
  }

  // optional bool is_promo = 13;
  if (has_is_promo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_promo(), output);
  }

  // optional uint32 total_form = 14;
  if (has_total_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_form(), output);
  }

  // optional uint32 star = 15;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->star(), output);
  }

  // optional string category_name = 16;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->category_name(), output);
  }

  // optional string category_id = 17;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->category_id(), output);
  }

  // optional string web_payment_url = 18;
  if (has_web_payment_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->web_payment_url(), output);
  }

  // optional string secret_key = 19;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->secret_key(), output);
  }

  // optional uint32 order = 20;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->order(), output);
  }

  // optional string billpay_extra = 21;
  if (has_billpay_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->billpay_extra(), output);
  }

}

int ServiceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }

    // optional string partner_code = 2;
    if (has_partner_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_code());
    }

    // optional string service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }

    // optional string service_name = 4;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional string partner_site = 5;
    if (has_partner_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_site());
    }

    // optional string icon_url = 6;
    if (has_icon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_url());
    }

    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string text_popup = 8;
    if (has_text_popup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_popup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_check_debit = 9;
    if (has_has_check_debit()) {
      total_size += 1 + 1;
    }

    // optional string title_dialog = 10;
    if (has_title_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title_dialog());
    }

    // optional uint64 last_update = 11;
    if (has_last_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_update());
    }

    // optional string billid_type = 12;
    if (has_billid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid_type());
    }

    // optional bool is_promo = 13;
    if (has_is_promo()) {
      total_size += 1 + 1;
    }

    // optional uint32 total_form = 14;
    if (has_total_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_form());
    }

    // optional uint32 star = 15;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional string category_name = 16;
    if (has_category_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string category_id = 17;
    if (has_category_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_id());
    }

    // optional string web_payment_url = 18;
    if (has_web_payment_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_payment_url());
    }

    // optional string secret_key = 19;
    if (has_secret_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret_key());
    }

    // optional uint32 order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // optional string billpay_extra = 21;
    if (has_billpay_extra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billpay_extra());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceItem*>(&from));
}

void ServiceItem::MergeFrom(const ServiceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_partner_code()) {
      set_partner_code(from.partner_code());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_partner_site()) {
      set_partner_site(from.partner_site());
    }
    if (from.has_icon_url()) {
      set_icon_url(from.icon_url());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_text_popup()) {
      set_text_popup(from.text_popup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_check_debit()) {
      set_has_check_debit(from.has_check_debit());
    }
    if (from.has_title_dialog()) {
      set_title_dialog(from.title_dialog());
    }
    if (from.has_last_update()) {
      set_last_update(from.last_update());
    }
    if (from.has_billid_type()) {
      set_billid_type(from.billid_type());
    }
    if (from.has_is_promo()) {
      set_is_promo(from.is_promo());
    }
    if (from.has_total_form()) {
      set_total_form(from.total_form());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_category_name()) {
      set_category_name(from.category_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
    if (from.has_web_payment_url()) {
      set_web_payment_url(from.web_payment_url());
    }
    if (from.has_secret_key()) {
      set_secret_key(from.secret_key());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_billpay_extra()) {
      set_billpay_extra(from.billpay_extra());
    }
  }
}

void ServiceItem::CopyFrom(const ServiceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceItem::IsInitialized() const {

  return true;
}

void ServiceItem::Swap(ServiceItem* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(partner_code_, other->partner_code_);
    std::swap(service_id_, other->service_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(partner_site_, other->partner_site_);
    std::swap(icon_url_, other->icon_url_);
    std::swap(status_, other->status_);
    std::swap(text_popup_, other->text_popup_);
    std::swap(has_check_debit_, other->has_check_debit_);
    std::swap(title_dialog_, other->title_dialog_);
    std::swap(last_update_, other->last_update_);
    std::swap(billid_type_, other->billid_type_);
    std::swap(is_promo_, other->is_promo_);
    std::swap(total_form_, other->total_form_);
    std::swap(star_, other->star_);
    std::swap(category_name_, other->category_name_);
    std::swap(category_id_, other->category_id_);
    std::swap(web_payment_url_, other->web_payment_url_);
    std::swap(secret_key_, other->secret_key_);
    std::swap(order_, other->order_);
    std::swap(billpay_extra_, other->billpay_extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServiceItem::GetTypeName() const {
  return "com.mservice.momo.msg.ServiceItem";
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceReply::kServiceListFieldNumber;
#endif  // !_MSC_VER

ServiceReply::ServiceReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServiceReply::InitAsDefaultInstance() {
}

ServiceReply::ServiceReply(const ServiceReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReply::~ServiceReply() {
  SharedDtor();
}

void ServiceReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServiceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceReply& ServiceReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ServiceReply* ServiceReply::default_instance_ = NULL;

ServiceReply* ServiceReply::New() const {
  return new ServiceReply;
}

void ServiceReply::Clear() {
  service_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServiceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.ServiceItem service_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_service_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.ServiceItem service_list = 1;
  for (int i = 0; i < this->service_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->service_list(i), output);
  }

}

int ServiceReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.ServiceItem service_list = 1;
  total_size += 1 * this->service_list_size();
  for (int i = 0; i < this->service_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceReply*>(&from));
}

void ServiceReply::MergeFrom(const ServiceReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_list_.MergeFrom(from.service_list_);
}

void ServiceReply::CopyFrom(const ServiceReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply::IsInitialized() const {

  return true;
}

void ServiceReply::Swap(ServiceReply* other) {
  if (other != this) {
    service_list_.Swap(&other->service_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServiceReply::GetTypeName() const {
  return "com.mservice.momo.msg.ServiceReply";
}


// ===================================================================

#ifndef _MSC_VER
const int FieldItem::kFieldLabelFieldNumber;
const int FieldItem::kFieldTypeFieldNumber;
const int FieldItem::kIsAmountFieldNumber;
const int FieldItem::kIsBillIdFieldNumber;
const int FieldItem::kKeyFieldNumber;
const int FieldItem::kRequireFieldNumber;
const int FieldItem::kHasChildFieldNumber;
const int FieldItem::kLineFieldNumber;
const int FieldItem::kReadonlyFieldNumber;
const int FieldItem::kValueFieldNumber;
#endif  // !_MSC_VER

FieldItem::FieldItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FieldItem::InitAsDefaultInstance() {
}

FieldItem::FieldItem(const FieldItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FieldItem::SharedCtor() {
  _cached_size_ = 0;
  field_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_amount_ = false;
  is_bill_id_ = false;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  require_ = 0u;
  has_child_ = 0u;
  line_ = 0u;
  readonly_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldItem::~FieldItem() {
  SharedDtor();
}

void FieldItem::SharedDtor() {
  if (field_label_ != &::google::protobuf::internal::kEmptyString) {
    delete field_label_;
  }
  if (field_type_ != &::google::protobuf::internal::kEmptyString) {
    delete field_type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FieldItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FieldItem& FieldItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

FieldItem* FieldItem::default_instance_ = NULL;

FieldItem* FieldItem::New() const {
  return new FieldItem;
}

void FieldItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field_label()) {
      if (field_label_ != &::google::protobuf::internal::kEmptyString) {
        field_label_->clear();
      }
    }
    if (has_field_type()) {
      if (field_type_ != &::google::protobuf::internal::kEmptyString) {
        field_type_->clear();
      }
    }
    is_amount_ = false;
    is_bill_id_ = false;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    require_ = 0u;
    has_child_ = 0u;
    line_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    readonly_ = false;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FieldItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field_type;
        break;
      }

      // optional string field_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_amount;
        break;
      }

      // optional bool is_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_amount_)));
          set_has_is_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_bill_id;
        break;
      }

      // optional bool is_bill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_bill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bill_id_)));
          set_has_is_bill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // optional string key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_require;
        break;
      }

      // optional uint32 require = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &require_)));
          set_has_require();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_child;
        break;
      }

      // optional uint32 has_child = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_child:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_child_)));
          set_has_has_child();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_line;
        break;
      }

      // optional uint32 line = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_readonly;
        break;
      }

      // optional bool readonly = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
          set_has_readonly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_value;
        break;
      }

      // optional string value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string field_label = 1;
  if (has_field_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_label(), output);
  }

  // optional string field_type = 2;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field_type(), output);
  }

  // optional bool is_amount = 3;
  if (has_is_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_amount(), output);
  }

  // optional bool is_bill_id = 4;
  if (has_is_bill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_bill_id(), output);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->key(), output);
  }

  // optional uint32 require = 6;
  if (has_require()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->require(), output);
  }

  // optional uint32 has_child = 7;
  if (has_has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->has_child(), output);
  }

  // optional uint32 line = 8;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->line(), output);
  }

  // optional bool readonly = 9;
  if (has_readonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->readonly(), output);
  }

  // optional string value = 10;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->value(), output);
  }

}

int FieldItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string field_label = 1;
    if (has_field_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_label());
    }

    // optional string field_type = 2;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_type());
    }

    // optional bool is_amount = 3;
    if (has_is_amount()) {
      total_size += 1 + 1;
    }

    // optional bool is_bill_id = 4;
    if (has_is_bill_id()) {
      total_size += 1 + 1;
    }

    // optional string key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 require = 6;
    if (has_require()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->require());
    }

    // optional uint32 has_child = 7;
    if (has_has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->has_child());
    }

    // optional uint32 line = 8;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool readonly = 9;
    if (has_readonly()) {
      total_size += 1 + 1;
    }

    // optional string value = 10;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FieldItem*>(&from));
}

void FieldItem::MergeFrom(const FieldItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_label()) {
      set_field_label(from.field_label());
    }
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
    if (from.has_is_amount()) {
      set_is_amount(from.is_amount());
    }
    if (from.has_is_bill_id()) {
      set_is_bill_id(from.is_bill_id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_require()) {
      set_require(from.require());
    }
    if (from.has_has_child()) {
      set_has_child(from.has_child());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_readonly()) {
      set_readonly(from.readonly());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void FieldItem::CopyFrom(const FieldItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldItem::IsInitialized() const {

  return true;
}

void FieldItem::Swap(FieldItem* other) {
  if (other != this) {
    std::swap(field_label_, other->field_label_);
    std::swap(field_type_, other->field_type_);
    std::swap(is_amount_, other->is_amount_);
    std::swap(is_bill_id_, other->is_bill_id_);
    std::swap(key_, other->key_);
    std::swap(require_, other->require_);
    std::swap(has_child_, other->has_child_);
    std::swap(line_, other->line_);
    std::swap(readonly_, other->readonly_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FieldItem::GetTypeName() const {
  return "com.mservice.momo.msg.FieldItem";
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraInfo::kBillDetailIdFieldNumber;
const int ExtraInfo::kAmountFieldNumber;
const int ExtraInfo::kFromDateFieldNumber;
const int ExtraInfo::kToDateFieldNumber;
#endif  // !_MSC_VER

ExtraInfo::ExtraInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExtraInfo::InitAsDefaultInstance() {
}

ExtraInfo::ExtraInfo(const ExtraInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  bill_detail_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraInfo::~ExtraInfo() {
  SharedDtor();
}

void ExtraInfo::SharedDtor() {
  if (bill_detail_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bill_detail_id_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (from_date_ != &::google::protobuf::internal::kEmptyString) {
    delete from_date_;
  }
  if (to_date_ != &::google::protobuf::internal::kEmptyString) {
    delete to_date_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExtraInfo& ExtraInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ExtraInfo* ExtraInfo::default_instance_ = NULL;

ExtraInfo* ExtraInfo::New() const {
  return new ExtraInfo;
}

void ExtraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bill_detail_id()) {
      if (bill_detail_id_ != &::google::protobuf::internal::kEmptyString) {
        bill_detail_id_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    if (has_from_date()) {
      if (from_date_ != &::google::protobuf::internal::kEmptyString) {
        from_date_->clear();
      }
    }
    if (has_to_date()) {
      if (to_date_ != &::google::protobuf::internal::kEmptyString) {
        to_date_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bill_detail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill_detail_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_date;
        break;
      }

      // optional string from_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to_date;
        break;
      }

      // optional string to_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bill_detail_id = 1;
  if (has_bill_detail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bill_detail_id(), output);
  }

  // optional string amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->amount(), output);
  }

  // optional string from_date = 3;
  if (has_from_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_date(), output);
  }

  // optional string to_date = 4;
  if (has_to_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to_date(), output);
  }

}

int ExtraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bill_detail_id = 1;
    if (has_bill_detail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill_detail_id());
    }

    // optional string amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional string from_date = 3;
    if (has_from_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_date());
    }

    // optional string to_date = 4;
    if (has_to_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_date());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExtraInfo*>(&from));
}

void ExtraInfo::MergeFrom(const ExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bill_detail_id()) {
      set_bill_detail_id(from.bill_detail_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_from_date()) {
      set_from_date(from.from_date());
    }
    if (from.has_to_date()) {
      set_to_date(from.to_date());
    }
  }
}

void ExtraInfo::CopyFrom(const ExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraInfo::IsInitialized() const {

  return true;
}

void ExtraInfo::Swap(ExtraInfo* other) {
  if (other != this) {
    std::swap(bill_detail_id_, other->bill_detail_id_);
    std::swap(amount_, other->amount_);
    std::swap(from_date_, other->from_date_);
    std::swap(to_date_, other->to_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExtraInfo::GetTypeName() const {
  return "com.mservice.momo.msg.ExtraInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceLayoutReply::kTotalAmountFieldNumber;
const int GetServiceLayoutReply::kListFieldFieldNumber;
const int GetServiceLayoutReply::kArrayPriceFieldNumber;
const int GetServiceLayoutReply::kCustomerInfoFieldNumber;
const int GetServiceLayoutReply::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

GetServiceLayoutReply::GetServiceLayoutReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetServiceLayoutReply::InitAsDefaultInstance() {
}

GetServiceLayoutReply::GetServiceLayoutReply(const GetServiceLayoutReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceLayoutReply::SharedCtor() {
  _cached_size_ = 0;
  total_amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceLayoutReply::~GetServiceLayoutReply() {
  SharedDtor();
}

void GetServiceLayoutReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetServiceLayoutReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetServiceLayoutReply& GetServiceLayoutReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetServiceLayoutReply* GetServiceLayoutReply::default_instance_ = NULL;

GetServiceLayoutReply* GetServiceLayoutReply::New() const {
  return new GetServiceLayoutReply;
}

void GetServiceLayoutReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_amount_ = GOOGLE_ULONGLONG(0);
  }
  list_field_.Clear();
  array_price_.Clear();
  customer_info_.Clear();
  extra_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetServiceLayoutReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 total_amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_amount_)));
          set_has_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_field;
        break;
      }

      // repeated .com.mservice.momo.msg.FieldItem list_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_field;
        if (input->ExpectTag(26)) goto parse_array_price;
        break;
      }

      // repeated .com.mservice.momo.msg.TextValue array_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_array_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_array_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_array_price;
        if (input->ExpectTag(34)) goto parse_customer_info;
        break;
      }

      // repeated .com.mservice.momo.msg.TextValue customer_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customer_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_customer_info;
        if (input->ExpectTag(42)) goto parse_extra_info;
        break;
      }

      // repeated .com.mservice.momo.msg.ExtraInfo extra_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extra_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceLayoutReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 total_amount = 1;
  if (has_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total_amount(), output);
  }

  // repeated .com.mservice.momo.msg.FieldItem list_field = 2;
  for (int i = 0; i < this->list_field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->list_field(i), output);
  }

  // repeated .com.mservice.momo.msg.TextValue array_price = 3;
  for (int i = 0; i < this->array_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->array_price(i), output);
  }

  // repeated .com.mservice.momo.msg.TextValue customer_info = 4;
  for (int i = 0; i < this->customer_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->customer_info(i), output);
  }

  // repeated .com.mservice.momo.msg.ExtraInfo extra_info = 5;
  for (int i = 0; i < this->extra_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->extra_info(i), output);
  }

}

int GetServiceLayoutReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 total_amount = 1;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_amount());
    }

  }
  // repeated .com.mservice.momo.msg.FieldItem list_field = 2;
  total_size += 1 * this->list_field_size();
  for (int i = 0; i < this->list_field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_field(i));
  }

  // repeated .com.mservice.momo.msg.TextValue array_price = 3;
  total_size += 1 * this->array_price_size();
  for (int i = 0; i < this->array_price_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->array_price(i));
  }

  // repeated .com.mservice.momo.msg.TextValue customer_info = 4;
  total_size += 1 * this->customer_info_size();
  for (int i = 0; i < this->customer_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customer_info(i));
  }

  // repeated .com.mservice.momo.msg.ExtraInfo extra_info = 5;
  total_size += 1 * this->extra_info_size();
  for (int i = 0; i < this->extra_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceLayoutReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetServiceLayoutReply*>(&from));
}

void GetServiceLayoutReply::MergeFrom(const GetServiceLayoutReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_field_.MergeFrom(from.list_field_);
  array_price_.MergeFrom(from.array_price_);
  customer_info_.MergeFrom(from.customer_info_);
  extra_info_.MergeFrom(from.extra_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_amount()) {
      set_total_amount(from.total_amount());
    }
  }
}

void GetServiceLayoutReply::CopyFrom(const GetServiceLayoutReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceLayoutReply::IsInitialized() const {

  return true;
}

void GetServiceLayoutReply::Swap(GetServiceLayoutReply* other) {
  if (other != this) {
    std::swap(total_amount_, other->total_amount_);
    list_field_.Swap(&other->list_field_);
    array_price_.Swap(&other->array_price_);
    customer_info_.Swap(&other->customer_info_);
    extra_info_.Swap(&other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetServiceLayoutReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetServiceLayoutReply";
}


// ===================================================================

#ifndef _MSC_VER
const int Promotion::kIdFieldNumber;
const int Promotion::kFromDateFieldNumber;
const int Promotion::kToDateFieldNumber;
const int Promotion::kIsActiveFieldNumber;
const int Promotion::kPromotionNameFieldNumber;
#endif  // !_MSC_VER

Promotion::Promotion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Promotion::InitAsDefaultInstance() {
}

Promotion::Promotion(const Promotion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Promotion::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_date_ = GOOGLE_ULONGLONG(0);
  to_date_ = GOOGLE_ULONGLONG(0);
  is_active_ = false;
  promotion_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Promotion::~Promotion() {
  SharedDtor();
}

void Promotion::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (promotion_name_ != &::google::protobuf::internal::kEmptyString) {
    delete promotion_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Promotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Promotion& Promotion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Promotion* Promotion::default_instance_ = NULL;

Promotion* Promotion::New() const {
  return new Promotion;
}

void Promotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    from_date_ = GOOGLE_ULONGLONG(0);
    to_date_ = GOOGLE_ULONGLONG(0);
    is_active_ = false;
    if (has_promotion_name()) {
      if (promotion_name_ != &::google::protobuf::internal::kEmptyString) {
        promotion_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Promotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_date;
        break;
      }

      // optional uint64 from_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_date_)));
          set_has_from_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_date;
        break;
      }

      // optional uint64 to_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_date_)));
          set_has_to_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_promotion_name;
        break;
      }

      // optional string promotion_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_promotion_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Promotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint64 from_date = 2;
  if (has_from_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_date(), output);
  }

  // optional uint64 to_date = 3;
  if (has_to_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_date(), output);
  }

  // optional bool is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_active(), output);
  }

  // optional string promotion_name = 6;
  if (has_promotion_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->promotion_name(), output);
  }

}

int Promotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 from_date = 2;
    if (has_from_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_date());
    }

    // optional uint64 to_date = 3;
    if (has_to_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_date());
    }

    // optional bool is_active = 4;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // optional string promotion_name = 6;
    if (has_promotion_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->promotion_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Promotion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Promotion*>(&from));
}

void Promotion::MergeFrom(const Promotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_from_date()) {
      set_from_date(from.from_date());
    }
    if (from.has_to_date()) {
      set_to_date(from.to_date());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_promotion_name()) {
      set_promotion_name(from.promotion_name());
    }
  }
}

void Promotion::CopyFrom(const Promotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Promotion::IsInitialized() const {

  return true;
}

void Promotion::Swap(Promotion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(from_date_, other->from_date_);
    std::swap(to_date_, other->to_date_);
    std::swap(is_active_, other->is_active_);
    std::swap(promotion_name_, other->promotion_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Promotion::GetTypeName() const {
  return "com.mservice.momo.msg.Promotion";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPromotionReply::kPromotionListFieldNumber;
#endif  // !_MSC_VER

GetPromotionReply::GetPromotionReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetPromotionReply::InitAsDefaultInstance() {
}

GetPromotionReply::GetPromotionReply(const GetPromotionReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetPromotionReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPromotionReply::~GetPromotionReply() {
  SharedDtor();
}

void GetPromotionReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPromotionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPromotionReply& GetPromotionReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetPromotionReply* GetPromotionReply::default_instance_ = NULL;

GetPromotionReply* GetPromotionReply::New() const {
  return new GetPromotionReply;
}

void GetPromotionReply::Clear() {
  promotion_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetPromotionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.Promotion promotion_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotion_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_promotion_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_promotion_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPromotionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.Promotion promotion_list = 1;
  for (int i = 0; i < this->promotion_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->promotion_list(i), output);
  }

}

int GetPromotionReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.Promotion promotion_list = 1;
  total_size += 1 * this->promotion_list_size();
  for (int i = 0; i < this->promotion_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->promotion_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPromotionReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPromotionReply*>(&from));
}

void GetPromotionReply::MergeFrom(const GetPromotionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  promotion_list_.MergeFrom(from.promotion_list_);
}

void GetPromotionReply::CopyFrom(const GetPromotionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPromotionReply::IsInitialized() const {

  return true;
}

void GetPromotionReply::Swap(GetPromotionReply* other) {
  if (other != this) {
    promotion_list_.Swap(&other->promotion_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPromotionReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetPromotionReply";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPromotionDetail::kIdFieldNumber;
#endif  // !_MSC_VER

GetPromotionDetail::GetPromotionDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetPromotionDetail::InitAsDefaultInstance() {
}

GetPromotionDetail::GetPromotionDetail(const GetPromotionDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetPromotionDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPromotionDetail::~GetPromotionDetail() {
  SharedDtor();
}

void GetPromotionDetail::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPromotionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPromotionDetail& GetPromotionDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetPromotionDetail* GetPromotionDetail::default_instance_ = NULL;

GetPromotionDetail* GetPromotionDetail::New() const {
  return new GetPromotionDetail;
}

void GetPromotionDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetPromotionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPromotionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

}

int GetPromotionDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPromotionDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPromotionDetail*>(&from));
}

void GetPromotionDetail::MergeFrom(const GetPromotionDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void GetPromotionDetail::CopyFrom(const GetPromotionDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPromotionDetail::IsInitialized() const {

  return true;
}

void GetPromotionDetail::Swap(GetPromotionDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPromotionDetail::GetTypeName() const {
  return "com.mservice.momo.msg.GetPromotionDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPromotionDetailReply::kIntroDataFieldNumber;
const int GetPromotionDetailReply::kIntroSmsFieldNumber;
const int GetPromotionDetailReply::kDurationFieldNumber;
#endif  // !_MSC_VER

GetPromotionDetailReply::GetPromotionDetailReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetPromotionDetailReply::InitAsDefaultInstance() {
}

GetPromotionDetailReply::GetPromotionDetailReply(const GetPromotionDetailReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetPromotionDetailReply::SharedCtor() {
  _cached_size_ = 0;
  intro_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intro_sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPromotionDetailReply::~GetPromotionDetailReply() {
  SharedDtor();
}

void GetPromotionDetailReply::SharedDtor() {
  if (intro_data_ != &::google::protobuf::internal::kEmptyString) {
    delete intro_data_;
  }
  if (intro_sms_ != &::google::protobuf::internal::kEmptyString) {
    delete intro_sms_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPromotionDetailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPromotionDetailReply& GetPromotionDetailReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetPromotionDetailReply* GetPromotionDetailReply::default_instance_ = NULL;

GetPromotionDetailReply* GetPromotionDetailReply::New() const {
  return new GetPromotionDetailReply;
}

void GetPromotionDetailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_intro_data()) {
      if (intro_data_ != &::google::protobuf::internal::kEmptyString) {
        intro_data_->clear();
      }
    }
    if (has_intro_sms()) {
      if (intro_sms_ != &::google::protobuf::internal::kEmptyString) {
        intro_sms_->clear();
      }
    }
    duration_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetPromotionDetailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string intro_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intro_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_intro_sms;
        break;
      }

      // optional string intro_sms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intro_sms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intro_sms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPromotionDetailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string intro_data = 1;
  if (has_intro_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->intro_data(), output);
  }

  // optional string intro_sms = 2;
  if (has_intro_sms()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->intro_sms(), output);
  }

  // optional uint32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

}

int GetPromotionDetailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string intro_data = 1;
    if (has_intro_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->intro_data());
    }

    // optional string intro_sms = 2;
    if (has_intro_sms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->intro_sms());
    }

    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPromotionDetailReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPromotionDetailReply*>(&from));
}

void GetPromotionDetailReply::MergeFrom(const GetPromotionDetailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intro_data()) {
      set_intro_data(from.intro_data());
    }
    if (from.has_intro_sms()) {
      set_intro_sms(from.intro_sms());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
}

void GetPromotionDetailReply::CopyFrom(const GetPromotionDetailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPromotionDetailReply::IsInitialized() const {

  return true;
}

void GetPromotionDetailReply::Swap(GetPromotionDetailReply* other) {
  if (other != this) {
    std::swap(intro_data_, other->intro_data_);
    std::swap(intro_sms_, other->intro_sms_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPromotionDetailReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetPromotionDetailReply";
}


// ===================================================================

#ifndef _MSC_VER
const int MinMax::kTranTypeFieldNumber;
const int MinMax::kIsNamedFieldNumber;
const int MinMax::kMinValueFieldNumber;
const int MinMax::kMaxValueFieldNumber;
#endif  // !_MSC_VER

MinMax::MinMax()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MinMax::InitAsDefaultInstance() {
}

MinMax::MinMax(const MinMax& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MinMax::SharedCtor() {
  _cached_size_ = 0;
  tran_type_ = 0u;
  is_named_ = false;
  min_value_ = GOOGLE_ULONGLONG(0);
  max_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MinMax::~MinMax() {
  SharedDtor();
}

void MinMax::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MinMax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MinMax& MinMax::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

MinMax* MinMax::default_instance_ = NULL;

MinMax* MinMax::New() const {
  return new MinMax;
}

void MinMax::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tran_type_ = 0u;
    is_named_ = false;
    min_value_ = GOOGLE_ULONGLONG(0);
    max_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MinMax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tran_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tran_type_)));
          set_has_tran_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_named;
        break;
      }

      // optional bool is_named = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_named:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_named_)));
          set_has_is_named();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_value;
        break;
      }

      // optional uint64 min_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_value;
        break;
      }

      // optional uint64 max_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MinMax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tran_type = 1;
  if (has_tran_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tran_type(), output);
  }

  // optional bool is_named = 2;
  if (has_is_named()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_named(), output);
  }

  // optional uint64 min_value = 3;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->min_value(), output);
  }

  // optional uint64 max_value = 4;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_value(), output);
  }

}

int MinMax::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tran_type = 1;
    if (has_tran_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tran_type());
    }

    // optional bool is_named = 2;
    if (has_is_named()) {
      total_size += 1 + 1;
    }

    // optional uint64 min_value = 3;
    if (has_min_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_value());
    }

    // optional uint64 max_value = 4;
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinMax::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MinMax*>(&from));
}

void MinMax::MergeFrom(const MinMax& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tran_type()) {
      set_tran_type(from.tran_type());
    }
    if (from.has_is_named()) {
      set_is_named(from.is_named());
    }
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
  }
}

void MinMax::CopyFrom(const MinMax& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMax::IsInitialized() const {

  return true;
}

void MinMax::Swap(MinMax* other) {
  if (other != this) {
    std::swap(tran_type_, other->tran_type_);
    std::swap(is_named_, other->is_named_);
    std::swap(min_value_, other->min_value_);
    std::swap(max_value_, other->max_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MinMax::GetTypeName() const {
  return "com.mservice.momo.msg.MinMax";
}


// ===================================================================

#ifndef _MSC_VER
const int MinMaxReply::kMinMaxListFieldNumber;
#endif  // !_MSC_VER

MinMaxReply::MinMaxReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MinMaxReply::InitAsDefaultInstance() {
}

MinMaxReply::MinMaxReply(const MinMaxReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MinMaxReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MinMaxReply::~MinMaxReply() {
  SharedDtor();
}

void MinMaxReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MinMaxReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MinMaxReply& MinMaxReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

MinMaxReply* MinMaxReply::default_instance_ = NULL;

MinMaxReply* MinMaxReply::New() const {
  return new MinMaxReply;
}

void MinMaxReply::Clear() {
  min_max_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MinMaxReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.MinMax min_max_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_max_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_min_max_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_min_max_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MinMaxReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.MinMax min_max_list = 1;
  for (int i = 0; i < this->min_max_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->min_max_list(i), output);
  }

}

int MinMaxReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.MinMax min_max_list = 1;
  total_size += 1 * this->min_max_list_size();
  for (int i = 0; i < this->min_max_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->min_max_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinMaxReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MinMaxReply*>(&from));
}

void MinMaxReply::MergeFrom(const MinMaxReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  min_max_list_.MergeFrom(from.min_max_list_);
}

void MinMaxReply::CopyFrom(const MinMaxReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxReply::IsInitialized() const {

  return true;
}

void MinMaxReply::Swap(MinMaxReply* other) {
  if (other != this) {
    min_max_list_.Swap(&other->min_max_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MinMaxReply::GetTypeName() const {
  return "com.mservice.momo.msg.MinMaxReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateOrder123Phim::kSessionIdFieldNumber;
const int CreateOrder123Phim::kSeatListFieldNumber;
const int CreateOrder123Phim::kDeviceIdFieldNumber;
const int CreateOrder123Phim::kPhoneNumberFieldNumber;
const int CreateOrder123Phim::kEmailFieldNumber;
#endif  // !_MSC_VER

CreateOrder123Phim::CreateOrder123Phim()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CreateOrder123Phim::InitAsDefaultInstance() {
}

CreateOrder123Phim::CreateOrder123Phim(const CreateOrder123Phim& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrder123Phim::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrder123Phim::~CreateOrder123Phim() {
  SharedDtor();
}

void CreateOrder123Phim::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateOrder123Phim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateOrder123Phim& CreateOrder123Phim::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

CreateOrder123Phim* CreateOrder123Phim::default_instance_ = NULL;

CreateOrder123Phim* CreateOrder123Phim::New() const {
  return new CreateOrder123Phim;
}

void CreateOrder123Phim::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
        phone_number_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  seat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CreateOrder123Phim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_list;
        break;
      }

      // repeated string seat_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_seat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_list;
        if (input->ExpectTag(26)) goto parse_device_id;
        break;
      }

      // optional string device_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        break;
      }

      // optional string phone_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrder123Phim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session_id(), output);
  }

  // repeated string seat_list = 2;
  for (int i = 0; i < this->seat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seat_list(i), output);
  }

  // optional string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_id(), output);
  }

  // optional string phone_number = 4;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phone_number(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email(), output);
  }

}

int CreateOrder123Phim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional string device_id = 3;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string phone_number = 4;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_number());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  // repeated string seat_list = 2;
  total_size += 1 * this->seat_list_size();
  for (int i = 0; i < this->seat_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->seat_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrder123Phim::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateOrder123Phim*>(&from));
}

void CreateOrder123Phim::MergeFrom(const CreateOrder123Phim& from) {
  GOOGLE_CHECK_NE(&from, this);
  seat_list_.MergeFrom(from.seat_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
}

void CreateOrder123Phim::CopyFrom(const CreateOrder123Phim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrder123Phim::IsInitialized() const {

  return true;
}

void CreateOrder123Phim::Swap(CreateOrder123Phim* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    seat_list_.Swap(&other->seat_list_);
    std::swap(device_id_, other->device_id_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateOrder123Phim::GetTypeName() const {
  return "com.mservice.momo.msg.CreateOrder123Phim";
}


// ===================================================================

#ifndef _MSC_VER
const int Seat::kSeatFieldNumber;
const int Seat::kPriceFieldNumber;
#endif  // !_MSC_VER

Seat::Seat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Seat::InitAsDefaultInstance() {
}

Seat::Seat(const Seat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Seat::SharedCtor() {
  _cached_size_ = 0;
  seat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Seat::~Seat() {
  SharedDtor();
}

void Seat::SharedDtor() {
  if (seat_ != &::google::protobuf::internal::kEmptyString) {
    delete seat_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Seat& Seat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Seat* Seat::default_instance_ = NULL;

Seat* Seat::New() const {
  return new Seat;
}

void Seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seat()) {
      if (seat_ != &::google::protobuf::internal::kEmptyString) {
        seat_->clear();
      }
    }
    price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seat(), output);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

}

int Seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seat());
    }

    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Seat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Seat*>(&from));
}

void Seat::MergeFrom(const Seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
}

void Seat::CopyFrom(const Seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Seat::IsInitialized() const {

  return true;
}

void Seat::Swap(Seat* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Seat::GetTypeName() const {
  return "com.mservice.momo.msg.Seat";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateOrder123PhimReply::kInvoiceNoFieldNumber;
const int CreateOrder123PhimReply::kTicketCodeFieldNumber;
const int CreateOrder123PhimReply::kTotalAmountFieldNumber;
const int CreateOrder123PhimReply::kSeatListFieldNumber;
const int CreateOrder123PhimReply::kRcodeFieldNumber;
#endif  // !_MSC_VER

CreateOrder123PhimReply::CreateOrder123PhimReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CreateOrder123PhimReply::InitAsDefaultInstance() {
}

CreateOrder123PhimReply::CreateOrder123PhimReply(const CreateOrder123PhimReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrder123PhimReply::SharedCtor() {
  _cached_size_ = 0;
  invoice_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticket_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_amount_ = GOOGLE_ULONGLONG(0);
  rcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrder123PhimReply::~CreateOrder123PhimReply() {
  SharedDtor();
}

void CreateOrder123PhimReply::SharedDtor() {
  if (invoice_no_ != &::google::protobuf::internal::kEmptyString) {
    delete invoice_no_;
  }
  if (ticket_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateOrder123PhimReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateOrder123PhimReply& CreateOrder123PhimReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

CreateOrder123PhimReply* CreateOrder123PhimReply::default_instance_ = NULL;

CreateOrder123PhimReply* CreateOrder123PhimReply::New() const {
  return new CreateOrder123PhimReply;
}

void CreateOrder123PhimReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_invoice_no()) {
      if (invoice_no_ != &::google::protobuf::internal::kEmptyString) {
        invoice_no_->clear();
      }
    }
    if (has_ticket_code()) {
      if (ticket_code_ != &::google::protobuf::internal::kEmptyString) {
        ticket_code_->clear();
      }
    }
    total_amount_ = GOOGLE_ULONGLONG(0);
    rcode_ = 0u;
  }
  seat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CreateOrder123PhimReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invoice_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoice_no()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ticket_code;
        break;
      }

      // optional string ticket_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_amount;
        break;
      }

      // optional uint64 total_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_amount_)));
          set_has_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seat_list;
        break;
      }

      // repeated .com.mservice.momo.msg.Seat seat_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seat_list;
        if (input->ExpectTag(40)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrder123PhimReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string invoice_no = 1;
  if (has_invoice_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->invoice_no(), output);
  }

  // optional string ticket_code = 2;
  if (has_ticket_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ticket_code(), output);
  }

  // optional uint64 total_amount = 3;
  if (has_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_amount(), output);
  }

  // repeated .com.mservice.momo.msg.Seat seat_list = 4;
  for (int i = 0; i < this->seat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->seat_list(i), output);
  }

  // optional uint32 rcode = 5;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rcode(), output);
  }

}

int CreateOrder123PhimReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string invoice_no = 1;
    if (has_invoice_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoice_no());
    }

    // optional string ticket_code = 2;
    if (has_ticket_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket_code());
    }

    // optional uint64 total_amount = 3;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_amount());
    }

    // optional uint32 rcode = 5;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

  }
  // repeated .com.mservice.momo.msg.Seat seat_list = 4;
  total_size += 1 * this->seat_list_size();
  for (int i = 0; i < this->seat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrder123PhimReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateOrder123PhimReply*>(&from));
}

void CreateOrder123PhimReply::MergeFrom(const CreateOrder123PhimReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  seat_list_.MergeFrom(from.seat_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoice_no()) {
      set_invoice_no(from.invoice_no());
    }
    if (from.has_ticket_code()) {
      set_ticket_code(from.ticket_code());
    }
    if (from.has_total_amount()) {
      set_total_amount(from.total_amount());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
  }
}

void CreateOrder123PhimReply::CopyFrom(const CreateOrder123PhimReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrder123PhimReply::IsInitialized() const {

  return true;
}

void CreateOrder123PhimReply::Swap(CreateOrder123PhimReply* other) {
  if (other != this) {
    std::swap(invoice_no_, other->invoice_no_);
    std::swap(ticket_code_, other->ticket_code_);
    std::swap(total_amount_, other->total_amount_);
    seat_list_.Swap(&other->seat_list_);
    std::swap(rcode_, other->rcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateOrder123PhimReply::GetTypeName() const {
  return "com.mservice.momo.msg.CreateOrder123PhimReply";
}


// ===================================================================

#ifndef _MSC_VER
const int StandardSync::kLastUpdateTimeFieldNumber;
const int StandardSync::kTargetTimeFieldNumber;
const int StandardSync::kBatchSizeFieldNumber;
const int StandardSync::kBatchDirectionFieldNumber;
#endif  // !_MSC_VER

StandardSync::StandardSync()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StandardSync::InitAsDefaultInstance() {
}

StandardSync::StandardSync(const StandardSync& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StandardSync::SharedCtor() {
  _cached_size_ = 0;
  last_update_time_ = GOOGLE_ULONGLONG(0);
  target_time_ = GOOGLE_ULONGLONG(0);
  batch_size_ = GOOGLE_ULONGLONG(0);
  batch_direction_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StandardSync::~StandardSync() {
  SharedDtor();
}

void StandardSync::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StandardSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StandardSync& StandardSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StandardSync* StandardSync::default_instance_ = NULL;

StandardSync* StandardSync::New() const {
  return new StandardSync;
}

void StandardSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_update_time_ = GOOGLE_ULONGLONG(0);
    target_time_ = GOOGLE_ULONGLONG(0);
    batch_size_ = GOOGLE_ULONGLONG(0);
    batch_direction_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StandardSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_update_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_update_time_)));
          set_has_last_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_time;
        break;
      }

      // optional uint64 target_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_time_)));
          set_has_target_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_batch_size;
        break;
      }

      // optional uint64 batch_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_batch_direction;
        break;
      }

      // optional uint64 batch_direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batch_direction_)));
          set_has_batch_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StandardSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_update_time = 1;
  if (has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_update_time(), output);
  }

  // optional uint64 target_time = 2;
  if (has_target_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_time(), output);
  }

  // optional uint64 batch_size = 3;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batch_size(), output);
  }

  // optional uint64 batch_direction = 4;
  if (has_batch_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->batch_direction(), output);
  }

}

int StandardSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_update_time = 1;
    if (has_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_update_time());
    }

    // optional uint64 target_time = 2;
    if (has_target_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_time());
    }

    // optional uint64 batch_size = 3;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batch_size());
    }

    // optional uint64 batch_direction = 4;
    if (has_batch_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batch_direction());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandardSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StandardSync*>(&from));
}

void StandardSync::MergeFrom(const StandardSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_update_time()) {
      set_last_update_time(from.last_update_time());
    }
    if (from.has_target_time()) {
      set_target_time(from.target_time());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_batch_direction()) {
      set_batch_direction(from.batch_direction());
    }
  }
}

void StandardSync::CopyFrom(const StandardSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardSync::IsInitialized() const {

  return true;
}

void StandardSync::Swap(StandardSync* other) {
  if (other != this) {
    std::swap(last_update_time_, other->last_update_time_);
    std::swap(target_time_, other->target_time_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(batch_direction_, other->batch_direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StandardSync::GetTypeName() const {
  return "com.mservice.momo.msg.StandardSync";
}


// ===================================================================

#ifndef _MSC_VER
const int StandardReply::kResultFieldNumber;
const int StandardReply::kDescFieldNumber;
const int StandardReply::kRcodeFieldNumber;
#endif  // !_MSC_VER

StandardReply::StandardReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StandardReply::InitAsDefaultInstance() {
}

StandardReply::StandardReply(const StandardReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StandardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StandardReply::~StandardReply() {
  SharedDtor();
}

void StandardReply::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StandardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StandardReply& StandardReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StandardReply* StandardReply::default_instance_ = NULL;

StandardReply* StandardReply::New() const {
  return new StandardReply;
}

void StandardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    rcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StandardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StandardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // optional uint32 rcode = 3;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rcode(), output);
  }

}

int StandardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 rcode = 3;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandardReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StandardReply*>(&from));
}

void StandardReply::MergeFrom(const StandardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
  }
}

void StandardReply::CopyFrom(const StandardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardReply::IsInitialized() const {

  return true;
}

void StandardReply::Swap(StandardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(desc_, other->desc_);
    std::swap(rcode_, other->rcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StandardReply::GetTypeName() const {
  return "com.mservice.momo.msg.StandardReply";
}


// ===================================================================

#ifndef _MSC_VER
const int BanketVerifyOtp::kMerchantTransIdFieldNumber;
const int BanketVerifyOtp::kTransIdFieldNumber;
const int BanketVerifyOtp::kFullAmountFieldNumber;
const int BanketVerifyOtp::kOtpFieldNumber;
const int BanketVerifyOtp::kFeeAmountFieldNumber;
#endif  // !_MSC_VER

BanketVerifyOtp::BanketVerifyOtp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BanketVerifyOtp::InitAsDefaultInstance() {
}

BanketVerifyOtp::BanketVerifyOtp(const BanketVerifyOtp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BanketVerifyOtp::SharedCtor() {
  _cached_size_ = 0;
  merchant_trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  full_amount_ = GOOGLE_ULONGLONG(0);
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fee_amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanketVerifyOtp::~BanketVerifyOtp() {
  SharedDtor();
}

void BanketVerifyOtp::SharedDtor() {
  if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete merchant_trans_id_;
  }
  if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_id_;
  }
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BanketVerifyOtp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BanketVerifyOtp& BanketVerifyOtp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

BanketVerifyOtp* BanketVerifyOtp::default_instance_ = NULL;

BanketVerifyOtp* BanketVerifyOtp::New() const {
  return new BanketVerifyOtp;
}

void BanketVerifyOtp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_merchant_trans_id()) {
      if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
        merchant_trans_id_->clear();
      }
    }
    if (has_trans_id()) {
      if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
        trans_id_->clear();
      }
    }
    full_amount_ = GOOGLE_ULONGLONG(0);
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
    fee_amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BanketVerifyOtp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string merchant_trans_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchant_trans_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trans_id;
        break;
      }

      // optional string trans_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_full_amount;
        break;
      }

      // optional uint64 full_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &full_amount_)));
          set_has_full_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_otp;
        break;
      }

      // optional string otp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fee_amount;
        break;
      }

      // optional uint64 fee_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_amount_)));
          set_has_fee_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BanketVerifyOtp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string merchant_trans_id = 1;
  if (has_merchant_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->merchant_trans_id(), output);
  }

  // optional string trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trans_id(), output);
  }

  // optional uint64 full_amount = 3;
  if (has_full_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->full_amount(), output);
  }

  // optional string otp = 4;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->otp(), output);
  }

  // optional uint64 fee_amount = 5;
  if (has_fee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fee_amount(), output);
  }

}

int BanketVerifyOtp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string merchant_trans_id = 1;
    if (has_merchant_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchant_trans_id());
    }

    // optional string trans_id = 2;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_id());
    }

    // optional uint64 full_amount = 3;
    if (has_full_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->full_amount());
    }

    // optional string otp = 4;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

    // optional uint64 fee_amount = 5;
    if (has_fee_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_amount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanketVerifyOtp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BanketVerifyOtp*>(&from));
}

void BanketVerifyOtp::MergeFrom(const BanketVerifyOtp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_merchant_trans_id()) {
      set_merchant_trans_id(from.merchant_trans_id());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
    if (from.has_full_amount()) {
      set_full_amount(from.full_amount());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
    if (from.has_fee_amount()) {
      set_fee_amount(from.fee_amount());
    }
  }
}

void BanketVerifyOtp::CopyFrom(const BanketVerifyOtp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanketVerifyOtp::IsInitialized() const {

  return true;
}

void BanketVerifyOtp::Swap(BanketVerifyOtp* other) {
  if (other != this) {
    std::swap(merchant_trans_id_, other->merchant_trans_id_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(full_amount_, other->full_amount_);
    std::swap(otp_, other->otp_);
    std::swap(fee_amount_, other->fee_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BanketVerifyOtp::GetTypeName() const {
  return "com.mservice.momo.msg.BanketVerifyOtp";
}


// ===================================================================

#ifndef _MSC_VER
const int IdList::kIdsFieldNumber;
#endif  // !_MSC_VER

IdList::IdList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void IdList::InitAsDefaultInstance() {
}

IdList::IdList(const IdList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void IdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdList::~IdList() {
  SharedDtor();
}

void IdList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IdList& IdList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

IdList* IdList::default_instance_ = NULL;

IdList* IdList::New() const {
  return new IdList;
}

void IdList::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool IdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ids(i), output);
  }

}

int IdList::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IdList*>(&from));
}

void IdList::MergeFrom(const IdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
}

void IdList::CopyFrom(const IdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdList::IsInitialized() const {

  return true;
}

void IdList::Swap(IdList* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IdList::GetTypeName() const {
  return "com.mservice.momo.msg.IdList";
}


// ===================================================================

#ifndef _MSC_VER
const int BankOfBanknet::kBankIdFieldNumber;
const int BankOfBanknet::kBankNameFieldNumber;
#endif  // !_MSC_VER

BankOfBanknet::BankOfBanknet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BankOfBanknet::InitAsDefaultInstance() {
}

BankOfBanknet::BankOfBanknet(const BankOfBanknet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BankOfBanknet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankOfBanknet::~BankOfBanknet() {
  SharedDtor();
}

void BankOfBanknet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BankOfBanknet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BankOfBanknet& BankOfBanknet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

BankOfBanknet* BankOfBanknet::default_instance_ = NULL;

BankOfBanknet* BankOfBanknet::New() const {
  return new BankOfBanknet;
}

void BankOfBanknet::Clear() {
  bank_id_.Clear();
  bank_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BankOfBanknet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string bank_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bank_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bank_id;
        if (input->ExpectTag(18)) goto parse_bank_name;
        break;
      }

      // repeated string bank_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bank_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bank_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankOfBanknet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string bank_id = 1;
  for (int i = 0; i < this->bank_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bank_id(i), output);
  }

  // repeated string bank_name = 2;
  for (int i = 0; i < this->bank_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bank_name(i), output);
  }

}

int BankOfBanknet::ByteSize() const {
  int total_size = 0;

  // repeated string bank_id = 1;
  total_size += 1 * this->bank_id_size();
  for (int i = 0; i < this->bank_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bank_id(i));
  }

  // repeated string bank_name = 2;
  total_size += 1 * this->bank_name_size();
  for (int i = 0; i < this->bank_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bank_name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankOfBanknet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BankOfBanknet*>(&from));
}

void BankOfBanknet::MergeFrom(const BankOfBanknet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bank_id_.MergeFrom(from.bank_id_);
  bank_name_.MergeFrom(from.bank_name_);
}

void BankOfBanknet::CopyFrom(const BankOfBanknet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankOfBanknet::IsInitialized() const {

  return true;
}

void BankOfBanknet::Swap(BankOfBanknet* other) {
  if (other != this) {
    bank_id_.Swap(&other->bank_id_);
    bank_name_.Swap(&other->bank_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BankOfBanknet::GetTypeName() const {
  return "com.mservice.momo.msg.BankOfBanknet";
}


// ===================================================================

#ifndef _MSC_VER
const int TranStatisticPerDayReply::kTotalCountFieldNumber;
const int TranStatisticPerDayReply::kRemainCountFieldNumber;
const int TranStatisticPerDayReply::kTotalAmountFieldNumber;
const int TranStatisticPerDayReply::kMaxAmountFieldNumber;
#endif  // !_MSC_VER

TranStatisticPerDayReply::TranStatisticPerDayReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TranStatisticPerDayReply::InitAsDefaultInstance() {
}

TranStatisticPerDayReply::TranStatisticPerDayReply(const TranStatisticPerDayReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TranStatisticPerDayReply::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  remain_count_ = 0u;
  total_amount_ = GOOGLE_ULONGLONG(0);
  max_amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranStatisticPerDayReply::~TranStatisticPerDayReply() {
  SharedDtor();
}

void TranStatisticPerDayReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TranStatisticPerDayReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranStatisticPerDayReply& TranStatisticPerDayReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

TranStatisticPerDayReply* TranStatisticPerDayReply::default_instance_ = NULL;

TranStatisticPerDayReply* TranStatisticPerDayReply::New() const {
  return new TranStatisticPerDayReply;
}

void TranStatisticPerDayReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_count_ = 0u;
    remain_count_ = 0u;
    total_amount_ = GOOGLE_ULONGLONG(0);
    max_amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TranStatisticPerDayReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_count;
        break;
      }

      // optional uint32 remain_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_count_)));
          set_has_remain_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_amount;
        break;
      }

      // optional uint64 total_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_amount_)));
          set_has_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_amount;
        break;
      }

      // optional uint64 max_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_amount_)));
          set_has_max_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranStatisticPerDayReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_count(), output);
  }

  // optional uint32 remain_count = 2;
  if (has_remain_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_count(), output);
  }

  // optional uint64 total_amount = 3;
  if (has_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_amount(), output);
  }

  // optional uint64 max_amount = 4;
  if (has_max_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_amount(), output);
  }

}

int TranStatisticPerDayReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional uint32 remain_count = 2;
    if (has_remain_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_count());
    }

    // optional uint64 total_amount = 3;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_amount());
    }

    // optional uint64 max_amount = 4;
    if (has_max_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_amount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranStatisticPerDayReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranStatisticPerDayReply*>(&from));
}

void TranStatisticPerDayReply::MergeFrom(const TranStatisticPerDayReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_remain_count()) {
      set_remain_count(from.remain_count());
    }
    if (from.has_total_amount()) {
      set_total_amount(from.total_amount());
    }
    if (from.has_max_amount()) {
      set_max_amount(from.max_amount());
    }
  }
}

void TranStatisticPerDayReply::CopyFrom(const TranStatisticPerDayReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranStatisticPerDayReply::IsInitialized() const {

  return true;
}

void TranStatisticPerDayReply::Swap(TranStatisticPerDayReply* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    std::swap(remain_count_, other->remain_count_);
    std::swap(total_amount_, other->total_amount_);
    std::swap(max_amount_, other->max_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TranStatisticPerDayReply::GetTypeName() const {
  return "com.mservice.momo.msg.TranStatisticPerDayReply";
}


// ===================================================================

#ifndef _MSC_VER
const int GetFee::kBankIdFieldNumber;
const int GetFee::kTranTypeFieldNumber;
const int GetFee::kChannelFieldNumber;
const int GetFee::kIoCityFieldNumber;
const int GetFee::kAmountFieldNumber;
#endif  // !_MSC_VER

GetFee::GetFee()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetFee::InitAsDefaultInstance() {
}

GetFee::GetFee(const GetFee& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetFee::SharedCtor() {
  _cached_size_ = 0;
  bank_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tran_type_ = 0u;
  channel_ = 0u;
  io_city_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFee::~GetFee() {
  SharedDtor();
}

void GetFee::SharedDtor() {
  if (bank_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetFee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetFee& GetFee::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetFee* GetFee::default_instance_ = NULL;

GetFee* GetFee::New() const {
  return new GetFee;
}

void GetFee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bank_id()) {
      if (bank_id_ != &::google::protobuf::internal::kEmptyString) {
        bank_id_->clear();
      }
    }
    tran_type_ = 0u;
    channel_ = 0u;
    io_city_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bank_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tran_type;
        break;
      }

      // optional uint32 tran_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tran_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tran_type_)));
          set_has_tran_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_io_city;
        break;
      }

      // optional uint32 io_city = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_io_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &io_city_)));
          set_has_io_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bank_id = 1;
  if (has_bank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bank_id(), output);
  }

  // optional uint32 tran_type = 2;
  if (has_tran_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tran_type(), output);
  }

  // optional uint32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }

  // optional uint32 io_city = 4;
  if (has_io_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->io_city(), output);
  }

  // optional uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

}

int GetFee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bank_id = 1;
    if (has_bank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_id());
    }

    // optional uint32 tran_type = 2;
    if (has_tran_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tran_type());
    }

    // optional uint32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 io_city = 4;
    if (has_io_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->io_city());
    }

    // optional uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFee::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetFee*>(&from));
}

void GetFee::MergeFrom(const GetFee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bank_id()) {
      set_bank_id(from.bank_id());
    }
    if (from.has_tran_type()) {
      set_tran_type(from.tran_type());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_io_city()) {
      set_io_city(from.io_city());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
}

void GetFee::CopyFrom(const GetFee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFee::IsInitialized() const {

  return true;
}

void GetFee::Swap(GetFee* other) {
  if (other != this) {
    std::swap(bank_id_, other->bank_id_);
    std::swap(tran_type_, other->tran_type_);
    std::swap(channel_, other->channel_);
    std::swap(io_city_, other->io_city_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetFee::GetTypeName() const {
  return "com.mservice.momo.msg.GetFee";
}


// ===================================================================

#ifndef _MSC_VER
const int GetFeeReply::kDymanicFeeFieldNumber;
const int GetFeeReply::kStaticFeeFieldNumber;
const int GetFeeReply::kBankIdFieldNumber;
const int GetFeeReply::kTranTypeFieldNumber;
const int GetFeeReply::kChannelFieldNumber;
const int GetFeeReply::kIoCityFieldNumber;
const int GetFeeReply::kFeeTypeFieldNumber;
#endif  // !_MSC_VER

GetFeeReply::GetFeeReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetFeeReply::InitAsDefaultInstance() {
}

GetFeeReply::GetFeeReply(const GetFeeReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetFeeReply::SharedCtor() {
  _cached_size_ = 0;
  dymanic_fee_ = 0;
  static_fee_ = 0u;
  bank_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tran_type_ = 0u;
  channel_ = 0u;
  io_city_ = 0u;
  fee_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFeeReply::~GetFeeReply() {
  SharedDtor();
}

void GetFeeReply::SharedDtor() {
  if (bank_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetFeeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetFeeReply& GetFeeReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetFeeReply* GetFeeReply::default_instance_ = NULL;

GetFeeReply* GetFeeReply::New() const {
  return new GetFeeReply;
}

void GetFeeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dymanic_fee_ = 0;
    static_fee_ = 0u;
    if (has_bank_id()) {
      if (bank_id_ != &::google::protobuf::internal::kEmptyString) {
        bank_id_->clear();
      }
    }
    tran_type_ = 0u;
    channel_ = 0u;
    io_city_ = 0u;
    fee_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetFeeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dymanic_fee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dymanic_fee_)));
          set_has_dymanic_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_static_fee;
        break;
      }

      // optional uint32 static_fee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_static_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &static_fee_)));
          set_has_static_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bank_id;
        break;
      }

      // optional string bank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tran_type;
        break;
      }

      // optional uint32 tran_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tran_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tran_type_)));
          set_has_tran_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_io_city;
        break;
      }

      // optional uint32 io_city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_io_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &io_city_)));
          set_has_io_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fee_type;
        break;
      }

      // optional uint32 fee_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee_type_)));
          set_has_fee_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFeeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double dymanic_fee = 1;
  if (has_dymanic_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dymanic_fee(), output);
  }

  // optional uint32 static_fee = 2;
  if (has_static_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->static_fee(), output);
  }

  // optional string bank_id = 3;
  if (has_bank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bank_id(), output);
  }

  // optional uint32 tran_type = 4;
  if (has_tran_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tran_type(), output);
  }

  // optional uint32 channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel(), output);
  }

  // optional uint32 io_city = 6;
  if (has_io_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->io_city(), output);
  }

  // optional uint32 fee_type = 7;
  if (has_fee_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fee_type(), output);
  }

}

int GetFeeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double dymanic_fee = 1;
    if (has_dymanic_fee()) {
      total_size += 1 + 8;
    }

    // optional uint32 static_fee = 2;
    if (has_static_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->static_fee());
    }

    // optional string bank_id = 3;
    if (has_bank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_id());
    }

    // optional uint32 tran_type = 4;
    if (has_tran_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tran_type());
    }

    // optional uint32 channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 io_city = 6;
    if (has_io_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->io_city());
    }

    // optional uint32 fee_type = 7;
    if (has_fee_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fee_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFeeReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetFeeReply*>(&from));
}

void GetFeeReply::MergeFrom(const GetFeeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dymanic_fee()) {
      set_dymanic_fee(from.dymanic_fee());
    }
    if (from.has_static_fee()) {
      set_static_fee(from.static_fee());
    }
    if (from.has_bank_id()) {
      set_bank_id(from.bank_id());
    }
    if (from.has_tran_type()) {
      set_tran_type(from.tran_type());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_io_city()) {
      set_io_city(from.io_city());
    }
    if (from.has_fee_type()) {
      set_fee_type(from.fee_type());
    }
  }
}

void GetFeeReply::CopyFrom(const GetFeeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeReply::IsInitialized() const {

  return true;
}

void GetFeeReply::Swap(GetFeeReply* other) {
  if (other != this) {
    std::swap(dymanic_fee_, other->dymanic_fee_);
    std::swap(static_fee_, other->static_fee_);
    std::swap(bank_id_, other->bank_id_);
    std::swap(tran_type_, other->tran_type_);
    std::swap(channel_, other->channel_);
    std::swap(io_city_, other->io_city_);
    std::swap(fee_type_, other->fee_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetFeeReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetFeeReply";
}


// ===================================================================

#ifndef _MSC_VER
const int NewUser::kNewNumberFieldNumber;
const int NewUser::kTimeFieldNumber;
#endif  // !_MSC_VER

NewUser::NewUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NewUser::InitAsDefaultInstance() {
}

NewUser::NewUser(const NewUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NewUser::SharedCtor() {
  _cached_size_ = 0;
  new_number_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewUser::~NewUser() {
  SharedDtor();
}

void NewUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewUser& NewUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

NewUser* NewUser::default_instance_ = NULL;

NewUser* NewUser::New() const {
  return new NewUser;
}

void NewUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_number_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NewUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_number_)));
          set_has_new_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 new_number = 1;
  if (has_new_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_number(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

}

int NewUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 new_number = 1;
    if (has_new_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_number());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewUser*>(&from));
}

void NewUser::MergeFrom(const NewUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_number()) {
      set_new_number(from.new_number());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void NewUser::CopyFrom(const NewUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUser::IsInitialized() const {

  return true;
}

void NewUser::Swap(NewUser* other) {
  if (other != this) {
    std::swap(new_number_, other->new_number_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewUser::GetTypeName() const {
  return "com.mservice.momo.msg.NewUser";
}


// ===================================================================

#ifndef _MSC_VER
const int TicketInfo::kRcodeFieldNumber;
const int TicketInfo::kProviderIdFieldNumber;
const int TicketInfo::kBillIdFieldNumber;
#endif  // !_MSC_VER

TicketInfo::TicketInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TicketInfo::InitAsDefaultInstance() {
}

TicketInfo::TicketInfo(const TicketInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TicketInfo::SharedCtor() {
  _cached_size_ = 0;
  rcode_ = 0u;
  provider_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketInfo::~TicketInfo() {
  SharedDtor();
}

void TicketInfo::SharedDtor() {
  if (provider_id_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_id_;
  }
  if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bill_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TicketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TicketInfo& TicketInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

TicketInfo* TicketInfo::default_instance_ = NULL;

TicketInfo* TicketInfo::New() const {
  return new TicketInfo;
}

void TicketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rcode_ = 0u;
    if (has_provider_id()) {
      if (provider_id_ != &::google::protobuf::internal::kEmptyString) {
        provider_id_->clear();
      }
    }
    if (has_bill_id()) {
      if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
        bill_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TicketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_provider_id;
        break;
      }

      // optional string provider_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bill_id;
        break;
      }

      // optional string bill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rcode = 1;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rcode(), output);
  }

  // optional string provider_id = 2;
  if (has_provider_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->provider_id(), output);
  }

  // optional string bill_id = 3;
  if (has_bill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bill_id(), output);
  }

}

int TicketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rcode = 1;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string provider_id = 2;
    if (has_provider_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider_id());
    }

    // optional string bill_id = 3;
    if (has_bill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TicketInfo*>(&from));
}

void TicketInfo::MergeFrom(const TicketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_provider_id()) {
      set_provider_id(from.provider_id());
    }
    if (from.has_bill_id()) {
      set_bill_id(from.bill_id());
    }
  }
}

void TicketInfo::CopyFrom(const TicketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketInfo::IsInitialized() const {

  return true;
}

void TicketInfo::Swap(TicketInfo* other) {
  if (other != this) {
    std::swap(rcode_, other->rcode_);
    std::swap(provider_id_, other->provider_id_);
    std::swap(bill_id_, other->bill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TicketInfo::GetTypeName() const {
  return "com.mservice.momo.msg.TicketInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RegStatus::kIsSetupFieldNumber;
const int RegStatus::kIsRegedFieldNumber;
const int RegStatus::kIsActiveFieldNumber;
const int RegStatus::kIsNamedFieldNumber;
const int RegStatus::kIsFrozenFieldNumber;
const int RegStatus::kIsSuppendFieldNumber;
const int RegStatus::kIsStoppedFieldNumber;
#endif  // !_MSC_VER

RegStatus::RegStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegStatus::InitAsDefaultInstance() {
}

RegStatus::RegStatus(const RegStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegStatus::SharedCtor() {
  _cached_size_ = 0;
  is_setup_ = false;
  is_reged_ = false;
  is_active_ = false;
  is_named_ = false;
  is_frozen_ = false;
  is_suppend_ = false;
  is_stopped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegStatus::~RegStatus() {
  SharedDtor();
}

void RegStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegStatus& RegStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

RegStatus* RegStatus::default_instance_ = NULL;

RegStatus* RegStatus::New() const {
  return new RegStatus;
}

void RegStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_setup_ = false;
    is_reged_ = false;
    is_active_ = false;
    is_named_ = false;
    is_frozen_ = false;
    is_suppend_ = false;
    is_stopped_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_setup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_setup_)));
          set_has_is_setup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_reged;
        break;
      }

      // optional bool is_reged = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reged_)));
          set_has_is_reged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_named;
        break;
      }

      // optional bool is_named = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_named:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_named_)));
          set_has_is_named();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_frozen;
        break;
      }

      // optional bool is_frozen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_frozen_)));
          set_has_is_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_suppend;
        break;
      }

      // optional bool is_suppend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_suppend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suppend_)));
          set_has_is_suppend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_stopped;
        break;
      }

      // optional bool is_stopped = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_stopped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stopped_)));
          set_has_is_stopped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_setup = 1;
  if (has_is_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_setup(), output);
  }

  // optional bool is_reged = 2;
  if (has_is_reged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reged(), output);
  }

  // optional bool is_active = 3;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  // optional bool is_named = 4;
  if (has_is_named()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_named(), output);
  }

  // optional bool is_frozen = 5;
  if (has_is_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_frozen(), output);
  }

  // optional bool is_suppend = 6;
  if (has_is_suppend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_suppend(), output);
  }

  // optional bool is_stopped = 7;
  if (has_is_stopped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_stopped(), output);
  }

}

int RegStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_setup = 1;
    if (has_is_setup()) {
      total_size += 1 + 1;
    }

    // optional bool is_reged = 2;
    if (has_is_reged()) {
      total_size += 1 + 1;
    }

    // optional bool is_active = 3;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_named = 4;
    if (has_is_named()) {
      total_size += 1 + 1;
    }

    // optional bool is_frozen = 5;
    if (has_is_frozen()) {
      total_size += 1 + 1;
    }

    // optional bool is_suppend = 6;
    if (has_is_suppend()) {
      total_size += 1 + 1;
    }

    // optional bool is_stopped = 7;
    if (has_is_stopped()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegStatus*>(&from));
}

void RegStatus::MergeFrom(const RegStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_setup()) {
      set_is_setup(from.is_setup());
    }
    if (from.has_is_reged()) {
      set_is_reged(from.is_reged());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_is_named()) {
      set_is_named(from.is_named());
    }
    if (from.has_is_frozen()) {
      set_is_frozen(from.is_frozen());
    }
    if (from.has_is_suppend()) {
      set_is_suppend(from.is_suppend());
    }
    if (from.has_is_stopped()) {
      set_is_stopped(from.is_stopped());
    }
  }
}

void RegStatus::CopyFrom(const RegStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegStatus::IsInitialized() const {

  return true;
}

void RegStatus::Swap(RegStatus* other) {
  if (other != this) {
    std::swap(is_setup_, other->is_setup_);
    std::swap(is_reged_, other->is_reged_);
    std::swap(is_active_, other->is_active_);
    std::swap(is_named_, other->is_named_);
    std::swap(is_frozen_, other->is_frozen_);
    std::swap(is_suppend_, other->is_suppend_);
    std::swap(is_stopped_, other->is_stopped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegStatus::GetTypeName() const {
  return "com.mservice.momo.msg.RegStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kImeiFieldNumber;
const int Hello::kImeiKeyFieldNumber;
const int Hello::kSessionKeyFieldNumber;
const int Hello::kDeviceOsFieldNumber;
const int Hello::kDeviceKeyFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  SharedDtor();
}

void Hello::SharedDtor() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (imei_key_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_key_;
  }
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (device_os_ != &::google::protobuf::internal::kEmptyString) {
    delete device_os_;
  }
  if (device_key_ != &::google::protobuf::internal::kEmptyString) {
    delete device_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Hello& Hello::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    if (has_imei_key()) {
      if (imei_key_ != &::google::protobuf::internal::kEmptyString) {
        imei_key_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    if (has_device_os()) {
      if (device_os_ != &::google::protobuf::internal::kEmptyString) {
        device_os_->clear();
      }
    }
    if (has_device_key()) {
      if (device_key_ != &::google::protobuf::internal::kEmptyString) {
        device_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string imei = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_imei_key;
        break;
      }

      // optional string imei_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // optional string session_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_os;
        break;
      }

      // optional string device_os = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_key;
        break;
      }

      // optional string device_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string imei = 1;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->imei(), output);
  }

  // optional string imei_key = 2;
  if (has_imei_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->imei_key(), output);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_key(), output);
  }

  // optional string device_os = 4;
  if (has_device_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_os(), output);
  }

  // optional string device_key = 5;
  if (has_device_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_key(), output);
  }

}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string imei = 1;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string imei_key = 2;
    if (has_imei_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei_key());
    }

    // optional string session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional string device_os = 4;
    if (has_device_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_os());
    }

    // optional string device_key = 5;
    if (has_device_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Hello*>(&from));
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_imei_key()) {
      set_imei_key(from.imei_key());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_device_os()) {
      set_device_os(from.device_os());
    }
    if (from.has_device_key()) {
      set_device_key(from.device_key());
    }
  }
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(imei_, other->imei_);
    std::swap(imei_key_, other->imei_key_);
    std::swap(session_key_, other->session_key_);
    std::swap(device_os_, other->device_os_);
    std::swap(device_key_, other->device_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Hello::GetTypeName() const {
  return "com.mservice.momo.msg.Hello";
}


// ===================================================================

bool HelloReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HelloReply_ResultCode HelloReply::ALL_OK;
const HelloReply_ResultCode HelloReply::PHONE_NOT_CORRECT;
const HelloReply_ResultCode HelloReply::LOG_ON;
const HelloReply_ResultCode HelloReply::LOG_ON_ANOTHER_DEVICE;
const HelloReply_ResultCode HelloReply::NOT_LOG_ON;
const HelloReply_ResultCode HelloReply::ResultCode_MIN;
const HelloReply_ResultCode HelloReply::ResultCode_MAX;
const int HelloReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HelloReply::kRcodeFieldNumber;
const int HelloReply::kRdescFieldNumber;
const int HelloReply::kVersionCodeFieldNumber;
const int HelloReply::kVersionNameFieldNumber;
const int HelloReply::kRegStatusFieldNumber;
#endif  // !_MSC_VER

HelloReply::HelloReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HelloReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reg_status_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(
      ::com::mservice::momo::msg::RegStatus::internal_default_instance());
#else
  reg_status_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(&::com::mservice::momo::msg::RegStatus::default_instance());
#endif
}

HelloReply::HelloReply(const HelloReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HelloReply::SharedCtor() {
  _cached_size_ = 0;
  rcode_ = 0u;
  rdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_code_ = 0u;
  version_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reg_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloReply::~HelloReply() {
  SharedDtor();
}

void HelloReply::SharedDtor() {
  if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete rdesc_;
  }
  if (version_name_ != &::google::protobuf::internal::kEmptyString) {
    delete version_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete reg_status_;
  }
}

void HelloReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HelloReply& HelloReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

HelloReply* HelloReply::default_instance_ = NULL;

HelloReply* HelloReply::New() const {
  return new HelloReply;
}

void HelloReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rcode_ = 0u;
    if (has_rdesc()) {
      if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
        rdesc_->clear();
      }
    }
    version_code_ = 0u;
    if (has_version_name()) {
      if (version_name_ != &::google::protobuf::internal::kEmptyString) {
        version_name_->clear();
      }
    }
    if (has_reg_status()) {
      if (reg_status_ != NULL) reg_status_->::com::mservice::momo::msg::RegStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HelloReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rdesc;
        break;
      }

      // optional string rdesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version_code;
        break;
      }

      // optional uint32 version_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_code_)));
          set_has_version_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version_name;
        break;
      }

      // optional string version_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reg_status;
        break;
      }

      // optional .com.mservice.momo.msg.RegStatus reg_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rcode = 1;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rcode(), output);
  }

  // optional string rdesc = 2;
  if (has_rdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rdesc(), output);
  }

  // optional uint32 version_code = 3;
  if (has_version_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_code(), output);
  }

  // optional string version_name = 4;
  if (has_version_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version_name(), output);
  }

  // optional .com.mservice.momo.msg.RegStatus reg_status = 5;
  if (has_reg_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->reg_status(), output);
  }

}

int HelloReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rcode = 1;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string rdesc = 2;
    if (has_rdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rdesc());
    }

    // optional uint32 version_code = 3;
    if (has_version_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_code());
    }

    // optional string version_name = 4;
    if (has_version_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_name());
    }

    // optional .com.mservice.momo.msg.RegStatus reg_status = 5;
    if (has_reg_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HelloReply*>(&from));
}

void HelloReply::MergeFrom(const HelloReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_rdesc()) {
      set_rdesc(from.rdesc());
    }
    if (from.has_version_code()) {
      set_version_code(from.version_code());
    }
    if (from.has_version_name()) {
      set_version_name(from.version_name());
    }
    if (from.has_reg_status()) {
      mutable_reg_status()->::com::mservice::momo::msg::RegStatus::MergeFrom(from.reg_status());
    }
  }
}

void HelloReply::CopyFrom(const HelloReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {

  return true;
}

void HelloReply::Swap(HelloReply* other) {
  if (other != this) {
    std::swap(rcode_, other->rcode_);
    std::swap(rdesc_, other->rdesc_);
    std::swap(version_code_, other->version_code_);
    std::swap(version_name_, other->version_name_);
    std::swap(reg_status_, other->reg_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HelloReply::GetTypeName() const {
  return "com.mservice.momo.msg.HelloReply";
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyOtp::kOtpFieldNumber;
#endif  // !_MSC_VER

VerifyOtp::VerifyOtp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VerifyOtp::InitAsDefaultInstance() {
}

VerifyOtp::VerifyOtp(const VerifyOtp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyOtp::SharedCtor() {
  _cached_size_ = 0;
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyOtp::~VerifyOtp() {
  SharedDtor();
}

void VerifyOtp::SharedDtor() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VerifyOtp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VerifyOtp& VerifyOtp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

VerifyOtp* VerifyOtp::default_instance_ = NULL;

VerifyOtp* VerifyOtp::New() const {
  return new VerifyOtp;
}

void VerifyOtp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VerifyOtp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string otp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyOtp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string otp = 1;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->otp(), output);
  }

}

int VerifyOtp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string otp = 1;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyOtp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VerifyOtp*>(&from));
}

void VerifyOtp::MergeFrom(const VerifyOtp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otp()) {
      set_otp(from.otp());
    }
  }
}

void VerifyOtp::CopyFrom(const VerifyOtp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyOtp::IsInitialized() const {

  return true;
}

void VerifyOtp::Swap(VerifyOtp* other) {
  if (other != this) {
    std::swap(otp_, other->otp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VerifyOtp::GetTypeName() const {
  return "com.mservice.momo.msg.VerifyOtp";
}


// ===================================================================

bool VerifyOtpReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VerifyOtpReply_ResultCode VerifyOtpReply::ALL_OK;
const VerifyOtpReply_ResultCode VerifyOtpReply::WRONG_OTP;
const VerifyOtpReply_ResultCode VerifyOtpReply::TIME_OUT;
const VerifyOtpReply_ResultCode VerifyOtpReply::ResultCode_MIN;
const VerifyOtpReply_ResultCode VerifyOtpReply::ResultCode_MAX;
const int VerifyOtpReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VerifyOtpReply::kResultFieldNumber;
const int VerifyOtpReply::kRcodeFieldNumber;
const int VerifyOtpReply::kImeiKeyFieldNumber;
const int VerifyOtpReply::kRegStatusFieldNumber;
#endif  // !_MSC_VER

VerifyOtpReply::VerifyOtpReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VerifyOtpReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reg_status_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(
      ::com::mservice::momo::msg::RegStatus::internal_default_instance());
#else
  reg_status_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(&::com::mservice::momo::msg::RegStatus::default_instance());
#endif
}

VerifyOtpReply::VerifyOtpReply(const VerifyOtpReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyOtpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  rcode_ = 0u;
  imei_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reg_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyOtpReply::~VerifyOtpReply() {
  SharedDtor();
}

void VerifyOtpReply::SharedDtor() {
  if (imei_key_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete reg_status_;
  }
}

void VerifyOtpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VerifyOtpReply& VerifyOtpReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

VerifyOtpReply* VerifyOtpReply::default_instance_ = NULL;

VerifyOtpReply* VerifyOtpReply::New() const {
  return new VerifyOtpReply;
}

void VerifyOtpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    rcode_ = 0u;
    if (has_imei_key()) {
      if (imei_key_ != &::google::protobuf::internal::kEmptyString) {
        imei_key_->clear();
      }
    }
    if (has_reg_status()) {
      if (reg_status_ != NULL) reg_status_->::com::mservice::momo::msg::RegStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VerifyOtpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imei_key;
        break;
      }

      // optional string imei_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reg_status;
        break;
      }

      // optional .com.mservice.momo.msg.RegStatus reg_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyOtpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rcode(), output);
  }

  // optional string imei_key = 3;
  if (has_imei_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->imei_key(), output);
  }

  // optional .com.mservice.momo.msg.RegStatus reg_status = 4;
  if (has_reg_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->reg_status(), output);
  }

}

int VerifyOtpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string imei_key = 3;
    if (has_imei_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei_key());
    }

    // optional .com.mservice.momo.msg.RegStatus reg_status = 4;
    if (has_reg_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyOtpReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VerifyOtpReply*>(&from));
}

void VerifyOtpReply::MergeFrom(const VerifyOtpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_imei_key()) {
      set_imei_key(from.imei_key());
    }
    if (from.has_reg_status()) {
      mutable_reg_status()->::com::mservice::momo::msg::RegStatus::MergeFrom(from.reg_status());
    }
  }
}

void VerifyOtpReply::CopyFrom(const VerifyOtpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyOtpReply::IsInitialized() const {

  return true;
}

void VerifyOtpReply::Swap(VerifyOtpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rcode_, other->rcode_);
    std::swap(imei_key_, other->imei_key_);
    std::swap(reg_status_, other->reg_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VerifyOtpReply::GetTypeName() const {
  return "com.mservice.momo.msg.VerifyOtpReply";
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kNameFieldNumber;
const int Register::kCardIdFieldNumber;
const int Register::kAddressFieldNumber;
const int Register::kDobFieldNumber;
const int Register::kPinFieldNumber;
const int Register::kEmailFieldNumber;
const int Register::kQuestionFieldNumber;
const int Register::kAnswerFieldNumber;
const int Register::kReferenceFieldNumber;
const int Register::kKeyValueFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    delete card_id_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (dob_ != &::google::protobuf::internal::kEmptyString) {
    delete dob_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (reference_ != &::google::protobuf::internal::kEmptyString) {
    delete reference_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Register& Register::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_card_id()) {
      if (card_id_ != &::google::protobuf::internal::kEmptyString) {
        card_id_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_dob()) {
      if (dob_ != &::google::protobuf::internal::kEmptyString) {
        dob_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::kEmptyString) {
        question_->clear();
      }
    }
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::kEmptyString) {
        answer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_reference()) {
      if (reference_ != &::google::protobuf::internal::kEmptyString) {
        reference_->clear();
      }
    }
  }
  keyvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_id;
        break;
      }

      // optional string card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dob;
        break;
      }

      // optional string dob = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pin;
        break;
      }

      // optional string pin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_question;
        break;
      }

      // optional string question = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_answer;
        break;
      }

      // optional string answer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reference;
        break;
      }

      // optional string reference = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_keyValue;
        break;
      }

      // repeated .com.mservice.momo.msg.TextValue keyValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_keyValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string card_id = 2;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_id(), output);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // optional string dob = 4;
  if (has_dob()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dob(), output);
  }

  // optional string pin = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pin(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->email(), output);
  }

  // optional string question = 7;
  if (has_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->question(), output);
  }

  // optional string answer = 8;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->answer(), output);
  }

  // optional string reference = 9;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->reference(), output);
  }

  // repeated .com.mservice.momo.msg.TextValue keyValue = 10;
  for (int i = 0; i < this->keyvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->keyvalue(i), output);
  }

}

int Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string card_id = 2;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string dob = 4;
    if (has_dob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dob());
    }

    // optional string pin = 5;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string question = 7;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string answer = 8;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string reference = 9;
    if (has_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reference());
    }

  }
  // repeated .com.mservice.momo.msg.TextValue keyValue = 10;
  total_size += 1 * this->keyvalue_size();
  for (int i = 0; i < this->keyvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvalue(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Register*>(&from));
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyvalue_.MergeFrom(from.keyvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_dob()) {
      set_dob(from.dob());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reference()) {
      set_reference(from.reference());
    }
  }
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {

  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(card_id_, other->card_id_);
    std::swap(address_, other->address_);
    std::swap(dob_, other->dob_);
    std::swap(pin_, other->pin_);
    std::swap(email_, other->email_);
    std::swap(question_, other->question_);
    std::swap(answer_, other->answer_);
    std::swap(reference_, other->reference_);
    keyvalue_.Swap(&other->keyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Register::GetTypeName() const {
  return "com.mservice.momo.msg.Register";
}


// ===================================================================

#ifndef _MSC_VER
const int LogIn::kMpinFieldNumber;
const int LogIn::kDeviceModelFieldNumber;
const int LogIn::kAgentTypeFieldNumber;
const int LogIn::kAppVerFieldNumber;
const int LogIn::kCodeVerFieldNumber;
#endif  // !_MSC_VER

LogIn::LogIn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogIn::InitAsDefaultInstance() {
}

LogIn::LogIn(const LogIn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogIn::SharedCtor() {
  _cached_size_ = 0;
  mpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  codever_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogIn::~LogIn() {
  SharedDtor();
}

void LogIn::SharedDtor() {
  if (mpin_ != &::google::protobuf::internal::kEmptyString) {
    delete mpin_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (agent_type_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_type_;
  }
  if (appver_ != &::google::protobuf::internal::kEmptyString) {
    delete appver_;
  }
  if (codever_ != &::google::protobuf::internal::kEmptyString) {
    delete codever_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LogIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogIn& LogIn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

LogIn* LogIn::default_instance_ = NULL;

LogIn* LogIn::New() const {
  return new LogIn;
}

void LogIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mpin()) {
      if (mpin_ != &::google::protobuf::internal::kEmptyString) {
        mpin_->clear();
      }
    }
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    if (has_agent_type()) {
      if (agent_type_ != &::google::protobuf::internal::kEmptyString) {
        agent_type_->clear();
      }
    }
    if (has_appver()) {
      if (appver_ != &::google::protobuf::internal::kEmptyString) {
        appver_->clear();
      }
    }
    if (has_codever()) {
      if (codever_ != &::google::protobuf::internal::kEmptyString) {
        codever_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mpin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_model;
        break;
      }

      // optional string device_model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agent_type;
        break;
      }

      // optional string agent_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appVer;
        break;
      }

      // optional string appVer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_codeVer;
        break;
      }

      // optional string codeVer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codeVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mpin = 1;
  if (has_mpin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mpin(), output);
  }

  // optional string device_model = 2;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_model(), output);
  }

  // optional string agent_type = 3;
  if (has_agent_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->agent_type(), output);
  }

  // optional string appVer = 4;
  if (has_appver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->appver(), output);
  }

  // optional string codeVer = 5;
  if (has_codever()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->codever(), output);
  }

}

int LogIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mpin = 1;
    if (has_mpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpin());
    }

    // optional string device_model = 2;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string agent_type = 3;
    if (has_agent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent_type());
    }

    // optional string appVer = 4;
    if (has_appver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appver());
    }

    // optional string codeVer = 5;
    if (has_codever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codever());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogIn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogIn*>(&from));
}

void LogIn::MergeFrom(const LogIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpin()) {
      set_mpin(from.mpin());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_agent_type()) {
      set_agent_type(from.agent_type());
    }
    if (from.has_appver()) {
      set_appver(from.appver());
    }
    if (from.has_codever()) {
      set_codever(from.codever());
    }
  }
}

void LogIn::CopyFrom(const LogIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogIn::IsInitialized() const {

  return true;
}

void LogIn::Swap(LogIn* other) {
  if (other != this) {
    std::swap(mpin_, other->mpin_);
    std::swap(device_model_, other->device_model_);
    std::swap(agent_type_, other->agent_type_);
    std::swap(appver_, other->appver_);
    std::swap(codever_, other->codever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogIn::GetTypeName() const {
  return "com.mservice.momo.msg.LogIn";
}


// ===================================================================

bool LogInReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 4:
    case 5:
    case 1012:
    case 1013:
    case 1014:
    case 40000:
    case 40001:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogInReply_ResultCode LogInReply::ALL_OK;
const LogInReply_ResultCode LogInReply::PIN_INVALID;
const LogInReply_ResultCode LogInReply::SYSTEM_ERROR;
const LogInReply_ResultCode LogInReply::AUTH_RETRY_EXCEED;
const LogInReply_ResultCode LogInReply::AUTH_EXPIRED;
const LogInReply_ResultCode LogInReply::NOT_SETUP;
const LogInReply_ResultCode LogInReply::TEMP_LOCK;
const LogInReply_ResultCode LogInReply::AGENT_NOT_FOUND;
const LogInReply_ResultCode LogInReply::AGENT_CANCELLED;
const LogInReply_ResultCode LogInReply::ResultCode_MIN;
const LogInReply_ResultCode LogInReply::ResultCode_MAX;
const int LogInReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogInReply::kResultFieldNumber;
const int LogInReply::kRcodeFieldNumber;
const int LogInReply::kSkeyFieldNumber;
const int LogInReply::kTimeFieldNumber;
const int LogInReply::kLoginRemainCountFieldNumber;
const int LogInReply::kLockedUntilFieldNumber;
#endif  // !_MSC_VER

LogInReply::LogInReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LogInReply::InitAsDefaultInstance() {
}

LogInReply::LogInReply(const LogInReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LogInReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  rcode_ = 0u;
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  login_remain_count_ = 0u;
  locked_until_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogInReply::~LogInReply() {
  SharedDtor();
}

void LogInReply::SharedDtor() {
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    delete skey_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LogInReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogInReply& LogInReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

LogInReply* LogInReply::default_instance_ = NULL;

LogInReply* LogInReply::New() const {
  return new LogInReply;
}

void LogInReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    rcode_ = 0u;
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::kEmptyString) {
        skey_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    login_remain_count_ = 0u;
    locked_until_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LogInReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skey;
        break;
      }

      // optional string skey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_login_remain_count;
        break;
      }

      // optional uint32 login_remain_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_remain_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_remain_count_)));
          set_has_login_remain_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_locked_until;
        break;
      }

      // optional uint64 locked_until = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &locked_until_)));
          set_has_locked_until();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogInReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rcode(), output);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->skey(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional uint32 login_remain_count = 5;
  if (has_login_remain_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->login_remain_count(), output);
  }

  // optional uint64 locked_until = 6;
  if (has_locked_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->locked_until(), output);
  }

}

int LogInReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string skey = 3;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skey());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 login_remain_count = 5;
    if (has_login_remain_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_remain_count());
    }

    // optional uint64 locked_until = 6;
    if (has_locked_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->locked_until());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogInReply*>(&from));
}

void LogInReply::MergeFrom(const LogInReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_skey()) {
      set_skey(from.skey());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_login_remain_count()) {
      set_login_remain_count(from.login_remain_count());
    }
    if (from.has_locked_until()) {
      set_locked_until(from.locked_until());
    }
  }
}

void LogInReply::CopyFrom(const LogInReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInReply::IsInitialized() const {

  return true;
}

void LogInReply::Swap(LogInReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rcode_, other->rcode_);
    std::swap(skey_, other->skey_);
    std::swap(time_, other->time_);
    std::swap(login_remain_count_, other->login_remain_count_);
    std::swap(locked_until_, other->locked_until_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LogInReply::GetTypeName() const {
  return "com.mservice.momo.msg.LogInReply";
}


// ===================================================================

#ifndef _MSC_VER
const int GetBillInfo::kProviderIdFieldNumber;
const int GetBillInfo::kBillIdFieldNumber;
const int GetBillInfo::kGetBillInfoActionFieldNumber;
#endif  // !_MSC_VER

GetBillInfo::GetBillInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetBillInfo::InitAsDefaultInstance() {
}

GetBillInfo::GetBillInfo(const GetBillInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetBillInfo::SharedCtor() {
  _cached_size_ = 0;
  provider_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getbillinfoaction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBillInfo::~GetBillInfo() {
  SharedDtor();
}

void GetBillInfo::SharedDtor() {
  if (provider_id_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_id_;
  }
  if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bill_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetBillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBillInfo& GetBillInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetBillInfo* GetBillInfo::default_instance_ = NULL;

GetBillInfo* GetBillInfo::New() const {
  return new GetBillInfo;
}

void GetBillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_provider_id()) {
      if (provider_id_ != &::google::protobuf::internal::kEmptyString) {
        provider_id_->clear();
      }
    }
    if (has_bill_id()) {
      if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
        bill_id_->clear();
      }
    }
    getbillinfoaction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetBillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string provider_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bill_id;
        break;
      }

      // optional string bill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getBillInfoAction;
        break;
      }

      // optional int32 getBillInfoAction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getBillInfoAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getbillinfoaction_)));
          set_has_getbillinfoaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string provider_id = 1;
  if (has_provider_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->provider_id(), output);
  }

  // optional string bill_id = 2;
  if (has_bill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bill_id(), output);
  }

  // optional int32 getBillInfoAction = 3;
  if (has_getbillinfoaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getbillinfoaction(), output);
  }

}

int GetBillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string provider_id = 1;
    if (has_provider_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider_id());
    }

    // optional string bill_id = 2;
    if (has_bill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill_id());
    }

    // optional int32 getBillInfoAction = 3;
    if (has_getbillinfoaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getbillinfoaction());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBillInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBillInfo*>(&from));
}

void GetBillInfo::MergeFrom(const GetBillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provider_id()) {
      set_provider_id(from.provider_id());
    }
    if (from.has_bill_id()) {
      set_bill_id(from.bill_id());
    }
    if (from.has_getbillinfoaction()) {
      set_getbillinfoaction(from.getbillinfoaction());
    }
  }
}

void GetBillInfo::CopyFrom(const GetBillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillInfo::IsInitialized() const {

  return true;
}

void GetBillInfo::Swap(GetBillInfo* other) {
  if (other != this) {
    std::swap(provider_id_, other->provider_id_);
    std::swap(bill_id_, other->bill_id_);
    std::swap(getbillinfoaction_, other->getbillinfoaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBillInfo::GetTypeName() const {
  return "com.mservice.momo.msg.GetBillInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BillDetail::kBillIdFieldNumber;
const int BillDetail::kAmountFieldNumber;
const int BillDetail::kFromDateFieldNumber;
const int BillDetail::kToDateFieldNumber;
#endif  // !_MSC_VER

BillDetail::BillDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BillDetail::InitAsDefaultInstance() {
}

BillDetail::BillDetail(const BillDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BillDetail::SharedCtor() {
  _cached_size_ = 0;
  bill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  from_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillDetail::~BillDetail() {
  SharedDtor();
}

void BillDetail::SharedDtor() {
  if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete bill_id_;
  }
  if (from_date_ != &::google::protobuf::internal::kEmptyString) {
    delete from_date_;
  }
  if (to_date_ != &::google::protobuf::internal::kEmptyString) {
    delete to_date_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BillDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BillDetail& BillDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

BillDetail* BillDetail::default_instance_ = NULL;

BillDetail* BillDetail::New() const {
  return new BillDetail;
}

void BillDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bill_id()) {
      if (bill_id_ != &::google::protobuf::internal::kEmptyString) {
        bill_id_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_from_date()) {
      if (from_date_ != &::google::protobuf::internal::kEmptyString) {
        from_date_->clear();
      }
    }
    if (has_to_date()) {
      if (to_date_ != &::google::protobuf::internal::kEmptyString) {
        to_date_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BillDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_date;
        break;
      }

      // optional string from_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to_date;
        break;
      }

      // optional string to_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bill_id = 1;
  if (has_bill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bill_id(), output);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional string from_date = 3;
  if (has_from_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_date(), output);
  }

  // optional string to_date = 4;
  if (has_to_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to_date(), output);
  }

}

int BillDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bill_id = 1;
    if (has_bill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill_id());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string from_date = 3;
    if (has_from_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_date());
    }

    // optional string to_date = 4;
    if (has_to_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_date());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BillDetail*>(&from));
}

void BillDetail::MergeFrom(const BillDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bill_id()) {
      set_bill_id(from.bill_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_from_date()) {
      set_from_date(from.from_date());
    }
    if (from.has_to_date()) {
      set_to_date(from.to_date());
    }
  }
}

void BillDetail::CopyFrom(const BillDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillDetail::IsInitialized() const {

  return true;
}

void BillDetail::Swap(BillDetail* other) {
  if (other != this) {
    std::swap(bill_id_, other->bill_id_);
    std::swap(amount_, other->amount_);
    std::swap(from_date_, other->from_date_);
    std::swap(to_date_, other->to_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BillDetail::GetTypeName() const {
  return "com.mservice.momo.msg.BillDetail";
}


// ===================================================================

bool GetBillInfoReply_ResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetBillInfoReply_ResultCode GetBillInfoReply::ALL_OK;
const GetBillInfoReply_ResultCode GetBillInfoReply::WRONG_ACCOUNT_ID;
const GetBillInfoReply_ResultCode GetBillInfoReply::WRONG_AMOUNT;
const GetBillInfoReply_ResultCode GetBillInfoReply::SYSTEM_ERROR;
const GetBillInfoReply_ResultCode GetBillInfoReply::ResultCode_MIN;
const GetBillInfoReply_ResultCode GetBillInfoReply::ResultCode_MAX;
const int GetBillInfoReply::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetBillInfoReply::kResultFieldNumber;
const int GetBillInfoReply::kRcodeFieldNumber;
const int GetBillInfoReply::kRdescFieldNumber;
const int GetBillInfoReply::kNameFieldNumber;
const int GetBillInfoReply::kPhoneFieldNumber;
const int GetBillInfoReply::kAddressFieldNumber;
const int GetBillInfoReply::kBillsFieldNumber;
const int GetBillInfoReply::kActionFieldNumber;
const int GetBillInfoReply::kProviderIdFieldNumber;
const int GetBillInfoReply::kBillIdFieldNumber;
#endif  // !_MSC_VER

GetBillInfoReply::GetBillInfoReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetBillInfoReply::InitAsDefaultInstance() {
}

GetBillInfoReply::GetBillInfoReply(const GetBillInfoReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetBillInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  rcode_ = 0u;
  rdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 1;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBillInfoReply::~GetBillInfoReply() {
  SharedDtor();
}

void GetBillInfoReply::SharedDtor() {
  if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete rdesc_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetBillInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBillInfoReply& GetBillInfoReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetBillInfoReply* GetBillInfoReply::default_instance_ = NULL;

GetBillInfoReply* GetBillInfoReply::New() const {
  return new GetBillInfoReply;
}

void GetBillInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    rcode_ = 0u;
    if (has_rdesc()) {
      if (rdesc_ != &::google::protobuf::internal::kEmptyString) {
        rdesc_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    action_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  bills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetBillInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rdesc;
        break;
      }

      // optional string rdesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }

      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_address;
        break;
      }

      // optional string address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bills;
        break;
      }

      // repeated .com.mservice.momo.msg.BillDetail bills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bills;
        if (input->ExpectTag(64)) goto parse_action;
        break;
      }

      // optional .com.mservice.momo.msg.GetBillInfoAction action = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::GetBillInfoAction_IsValid(value)) {
            set_action(static_cast< ::com::mservice::momo::msg::GetBillInfoAction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_providerId;
        break;
      }

      // optional string providerId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_billId;
        break;
      }

      // optional string billId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBillInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rcode(), output);
  }

  // optional string rdesc = 3;
  if (has_rdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rdesc(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }

  // optional string address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->address(), output);
  }

  // repeated .com.mservice.momo.msg.BillDetail bills = 7;
  for (int i = 0; i < this->bills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->bills(i), output);
  }

  // optional .com.mservice.momo.msg.GetBillInfoAction action = 8;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->action(), output);
  }

  // optional string providerId = 9;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->providerid(), output);
  }

  // optional string billId = 10;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->billid(), output);
  }

}

int GetBillInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string rdesc = 3;
    if (has_rdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rdesc());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string address = 6;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional .com.mservice.momo.msg.GetBillInfoAction action = 8;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string providerId = 9;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string billId = 10;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  // repeated .com.mservice.momo.msg.BillDetail bills = 7;
  total_size += 1 * this->bills_size();
  for (int i = 0; i < this->bills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bills(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBillInfoReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBillInfoReply*>(&from));
}

void GetBillInfoReply::MergeFrom(const GetBillInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bills_.MergeFrom(from.bills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_rdesc()) {
      set_rdesc(from.rdesc());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
}

void GetBillInfoReply::CopyFrom(const GetBillInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillInfoReply::IsInitialized() const {

  return true;
}

void GetBillInfoReply::Swap(GetBillInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rcode_, other->rcode_);
    std::swap(rdesc_, other->rdesc_);
    std::swap(name_, other->name_);
    std::swap(phone_, other->phone_);
    std::swap(address_, other->address_);
    bills_.Swap(&other->bills_);
    std::swap(action_, other->action_);
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBillInfoReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetBillInfoReply";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePin::kNewPinFieldNumber;
const int ChangePin::kOldPinFieldNumber;
#endif  // !_MSC_VER

ChangePin::ChangePin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChangePin::InitAsDefaultInstance() {
}

ChangePin::ChangePin(const ChangePin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePin::SharedCtor() {
  _cached_size_ = 0;
  new_pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePin::~ChangePin() {
  SharedDtor();
}

void ChangePin::SharedDtor() {
  if (new_pin_ != &::google::protobuf::internal::kEmptyString) {
    delete new_pin_;
  }
  if (old_pin_ != &::google::protobuf::internal::kEmptyString) {
    delete old_pin_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangePin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangePin& ChangePin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ChangePin* ChangePin::default_instance_ = NULL;

ChangePin* ChangePin::New() const {
  return new ChangePin;
}

void ChangePin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_pin()) {
      if (new_pin_ != &::google::protobuf::internal::kEmptyString) {
        new_pin_->clear();
      }
    }
    if (has_old_pin()) {
      if (old_pin_ != &::google::protobuf::internal::kEmptyString) {
        old_pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChangePin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_pin;
        break;
      }

      // optional string old_pin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string new_pin = 1;
  if (has_new_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_pin(), output);
  }

  // optional string old_pin = 2;
  if (has_old_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->old_pin(), output);
  }

}

int ChangePin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string new_pin = 1;
    if (has_new_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pin());
    }

    // optional string old_pin = 2;
    if (has_old_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_pin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangePin*>(&from));
}

void ChangePin::MergeFrom(const ChangePin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_pin()) {
      set_new_pin(from.new_pin());
    }
    if (from.has_old_pin()) {
      set_old_pin(from.old_pin());
    }
  }
}

void ChangePin::CopyFrom(const ChangePin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePin::IsInitialized() const {

  return true;
}

void ChangePin::Swap(ChangePin* other) {
  if (other != this) {
    std::swap(new_pin_, other->new_pin_);
    std::swap(old_pin_, other->old_pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangePin::GetTypeName() const {
  return "com.mservice.momo.msg.ChangePin";
}


// ===================================================================

#ifndef _MSC_VER
const int WhoIsMomoer::kNumbersFieldNumber;
#endif  // !_MSC_VER

WhoIsMomoer::WhoIsMomoer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WhoIsMomoer::InitAsDefaultInstance() {
}

WhoIsMomoer::WhoIsMomoer(const WhoIsMomoer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WhoIsMomoer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhoIsMomoer::~WhoIsMomoer() {
  SharedDtor();
}

void WhoIsMomoer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WhoIsMomoer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WhoIsMomoer& WhoIsMomoer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

WhoIsMomoer* WhoIsMomoer::default_instance_ = NULL;

WhoIsMomoer* WhoIsMomoer::New() const {
  return new WhoIsMomoer;
}

void WhoIsMomoer::Clear() {
  numbers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WhoIsMomoer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 numbers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_numbers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_numbers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_numbers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhoIsMomoer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 numbers = 1;
  for (int i = 0; i < this->numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->numbers(i), output);
  }

}

int WhoIsMomoer::ByteSize() const {
  int total_size = 0;

  // repeated uint32 numbers = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->numbers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->numbers(i));
    }
    total_size += 1 * this->numbers_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoIsMomoer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WhoIsMomoer*>(&from));
}

void WhoIsMomoer::MergeFrom(const WhoIsMomoer& from) {
  GOOGLE_CHECK_NE(&from, this);
  numbers_.MergeFrom(from.numbers_);
}

void WhoIsMomoer::CopyFrom(const WhoIsMomoer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoIsMomoer::IsInitialized() const {

  return true;
}

void WhoIsMomoer::Swap(WhoIsMomoer* other) {
  if (other != this) {
    numbers_.Swap(&other->numbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WhoIsMomoer::GetTypeName() const {
  return "com.mservice.momo.msg.WhoIsMomoer";
}


// ===================================================================

#ifndef _MSC_VER
const int ViewPaymentHistoryByBillId::kBillIdFieldNumber;
#endif  // !_MSC_VER

ViewPaymentHistoryByBillId::ViewPaymentHistoryByBillId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ViewPaymentHistoryByBillId::InitAsDefaultInstance() {
}

ViewPaymentHistoryByBillId::ViewPaymentHistoryByBillId(const ViewPaymentHistoryByBillId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ViewPaymentHistoryByBillId::SharedCtor() {
  _cached_size_ = 0;
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewPaymentHistoryByBillId::~ViewPaymentHistoryByBillId() {
  SharedDtor();
}

void ViewPaymentHistoryByBillId::SharedDtor() {
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ViewPaymentHistoryByBillId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewPaymentHistoryByBillId& ViewPaymentHistoryByBillId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ViewPaymentHistoryByBillId* ViewPaymentHistoryByBillId::default_instance_ = NULL;

ViewPaymentHistoryByBillId* ViewPaymentHistoryByBillId::New() const {
  return new ViewPaymentHistoryByBillId;
}

void ViewPaymentHistoryByBillId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ViewPaymentHistoryByBillId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string billId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewPaymentHistoryByBillId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string billId = 1;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->billid(), output);
  }

}

int ViewPaymentHistoryByBillId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string billId = 1;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewPaymentHistoryByBillId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewPaymentHistoryByBillId*>(&from));
}

void ViewPaymentHistoryByBillId::MergeFrom(const ViewPaymentHistoryByBillId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
}

void ViewPaymentHistoryByBillId::CopyFrom(const ViewPaymentHistoryByBillId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewPaymentHistoryByBillId::IsInitialized() const {

  return true;
}

void ViewPaymentHistoryByBillId::Swap(ViewPaymentHistoryByBillId* other) {
  if (other != this) {
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ViewPaymentHistoryByBillId::GetTypeName() const {
  return "com.mservice.momo.msg.ViewPaymentHistoryByBillId";
}


// ===================================================================

#ifndef _MSC_VER
const int ViewPaymentHistoryByBillIdReply::kResultFieldNumber;
const int ViewPaymentHistoryByBillIdReply::kRcodeFieldNumber;
const int ViewPaymentHistoryByBillIdReply::kPaymentHistoryFieldNumber;
#endif  // !_MSC_VER

ViewPaymentHistoryByBillIdReply::ViewPaymentHistoryByBillIdReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ViewPaymentHistoryByBillIdReply::InitAsDefaultInstance() {
}

ViewPaymentHistoryByBillIdReply::ViewPaymentHistoryByBillIdReply(const ViewPaymentHistoryByBillIdReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ViewPaymentHistoryByBillIdReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  rcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payment_history_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewPaymentHistoryByBillIdReply::~ViewPaymentHistoryByBillIdReply() {
  SharedDtor();
}

void ViewPaymentHistoryByBillIdReply::SharedDtor() {
  if (rcode_ != &::google::protobuf::internal::kEmptyString) {
    delete rcode_;
  }
  if (payment_history_ != &::google::protobuf::internal::kEmptyString) {
    delete payment_history_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ViewPaymentHistoryByBillIdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewPaymentHistoryByBillIdReply& ViewPaymentHistoryByBillIdReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

ViewPaymentHistoryByBillIdReply* ViewPaymentHistoryByBillIdReply::default_instance_ = NULL;

ViewPaymentHistoryByBillIdReply* ViewPaymentHistoryByBillIdReply::New() const {
  return new ViewPaymentHistoryByBillIdReply;
}

void ViewPaymentHistoryByBillIdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_rcode()) {
      if (rcode_ != &::google::protobuf::internal::kEmptyString) {
        rcode_->clear();
      }
    }
    if (has_payment_history()) {
      if (payment_history_ != &::google::protobuf::internal::kEmptyString) {
        payment_history_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ViewPaymentHistoryByBillIdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rcode;
        break;
      }

      // optional string rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payment_history;
        break;
      }

      // optional string payment_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payment_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payment_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewPaymentHistoryByBillIdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rcode(), output);
  }

  // optional string payment_history = 3;
  if (has_payment_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->payment_history(), output);
  }

}

int ViewPaymentHistoryByBillIdReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional string rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcode());
    }

    // optional string payment_history = 3;
    if (has_payment_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payment_history());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewPaymentHistoryByBillIdReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewPaymentHistoryByBillIdReply*>(&from));
}

void ViewPaymentHistoryByBillIdReply::MergeFrom(const ViewPaymentHistoryByBillIdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_payment_history()) {
      set_payment_history(from.payment_history());
    }
  }
}

void ViewPaymentHistoryByBillIdReply::CopyFrom(const ViewPaymentHistoryByBillIdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewPaymentHistoryByBillIdReply::IsInitialized() const {

  return true;
}

void ViewPaymentHistoryByBillIdReply::Swap(ViewPaymentHistoryByBillIdReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rcode_, other->rcode_);
    std::swap(payment_history_, other->payment_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ViewPaymentHistoryByBillIdReply::GetTypeName() const {
  return "com.mservice.momo.msg.ViewPaymentHistoryByBillIdReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kDeviceNameFieldNumber;
const int DeviceInfo::kDeviceVersionFieldNumber;
const int DeviceInfo::kDeviceModelFieldNumber;
const int DeviceInfo::kDeviceManufacturerFieldNumber;
const int DeviceInfo::kAppVersionFieldNumber;
const int DeviceInfo::kDeviceSWidthFieldNumber;
const int DeviceInfo::kDeviceSHeightFieldNumber;
const int DeviceInfo::kDevicePrimaryEmailFieldNumber;
const int DeviceInfo::kOsFieldNumber;
const int DeviceInfo::kTokenFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicemodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicemanufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceswidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicesheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceprimaryemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceversion_;
  }
  if (devicemodel_ != &::google::protobuf::internal::kEmptyString) {
    delete devicemodel_;
  }
  if (devicemanufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete devicemanufacturer_;
  }
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (deviceswidth_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceswidth_;
  }
  if (devicesheight_ != &::google::protobuf::internal::kEmptyString) {
    delete devicesheight_;
  }
  if (deviceprimaryemail_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceprimaryemail_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceInfo& DeviceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    if (has_deviceversion()) {
      if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
        deviceversion_->clear();
      }
    }
    if (has_devicemodel()) {
      if (devicemodel_ != &::google::protobuf::internal::kEmptyString) {
        devicemodel_->clear();
      }
    }
    if (has_devicemanufacturer()) {
      if (devicemanufacturer_ != &::google::protobuf::internal::kEmptyString) {
        devicemanufacturer_->clear();
      }
    }
    if (has_appversion()) {
      if (appversion_ != &::google::protobuf::internal::kEmptyString) {
        appversion_->clear();
      }
    }
    if (has_deviceswidth()) {
      if (deviceswidth_ != &::google::protobuf::internal::kEmptyString) {
        deviceswidth_->clear();
      }
    }
    if (has_devicesheight()) {
      if (devicesheight_ != &::google::protobuf::internal::kEmptyString) {
        devicesheight_->clear();
      }
    }
    if (has_deviceprimaryemail()) {
      if (deviceprimaryemail_ != &::google::protobuf::internal::kEmptyString) {
        deviceprimaryemail_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceVersion;
        break;
      }

      // optional string deviceVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceModel;
        break;
      }

      // optional string deviceModel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemodel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceManufacturer;
        break;
      }

      // optional string deviceManufacturer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceManufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemanufacturer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_appVersion;
        break;
      }

      // optional string appVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deviceSWidth;
        break;
      }

      // optional string deviceSWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceSWidth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceswidth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceSHeight;
        break;
      }

      // optional string deviceSHeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceSHeight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicesheight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_devicePrimaryEmail;
        break;
      }

      // optional string devicePrimaryEmail = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicePrimaryEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceprimaryemail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_os;
        break;
      }

      // optional string os = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_token;
        break;
      }

      // optional string token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string deviceName = 1;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->devicename(), output);
  }

  // optional string deviceVersion = 2;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceversion(), output);
  }

  // optional string deviceModel = 3;
  if (has_devicemodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devicemodel(), output);
  }

  // optional string deviceManufacturer = 4;
  if (has_devicemanufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicemanufacturer(), output);
  }

  // optional string appVersion = 5;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->appversion(), output);
  }

  // optional string deviceSWidth = 6;
  if (has_deviceswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deviceswidth(), output);
  }

  // optional string deviceSHeight = 7;
  if (has_devicesheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->devicesheight(), output);
  }

  // optional string devicePrimaryEmail = 8;
  if (has_deviceprimaryemail()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deviceprimaryemail(), output);
  }

  // optional string os = 9;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->os(), output);
  }

  // optional string token = 10;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->token(), output);
  }

}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceName = 1;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string deviceVersion = 2;
    if (has_deviceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceversion());
    }

    // optional string deviceModel = 3;
    if (has_devicemodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemodel());
    }

    // optional string deviceManufacturer = 4;
    if (has_devicemanufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemanufacturer());
    }

    // optional string appVersion = 5;
    if (has_appversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appversion());
    }

    // optional string deviceSWidth = 6;
    if (has_deviceswidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceswidth());
    }

    // optional string deviceSHeight = 7;
    if (has_devicesheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicesheight());
    }

    // optional string devicePrimaryEmail = 8;
    if (has_deviceprimaryemail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceprimaryemail());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string os = 9;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string token = 10;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceInfo*>(&from));
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_deviceversion()) {
      set_deviceversion(from.deviceversion());
    }
    if (from.has_devicemodel()) {
      set_devicemodel(from.devicemodel());
    }
    if (from.has_devicemanufacturer()) {
      set_devicemanufacturer(from.devicemanufacturer());
    }
    if (from.has_appversion()) {
      set_appversion(from.appversion());
    }
    if (from.has_deviceswidth()) {
      set_deviceswidth(from.deviceswidth());
    }
    if (from.has_devicesheight()) {
      set_devicesheight(from.devicesheight());
    }
    if (from.has_deviceprimaryemail()) {
      set_deviceprimaryemail(from.deviceprimaryemail());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(devicename_, other->devicename_);
    std::swap(deviceversion_, other->deviceversion_);
    std::swap(devicemodel_, other->devicemodel_);
    std::swap(devicemanufacturer_, other->devicemanufacturer_);
    std::swap(appversion_, other->appversion_);
    std::swap(deviceswidth_, other->deviceswidth_);
    std::swap(devicesheight_, other->devicesheight_);
    std::swap(deviceprimaryemail_, other->deviceprimaryemail_);
    std::swap(os_, other->os_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceInfo::GetTypeName() const {
  return "com.mservice.momo.msg.DeviceInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccessHistory::kPageNumFieldNumber;
const int GetAccessHistory::kPageSizeFieldNumber;
#endif  // !_MSC_VER

GetAccessHistory::GetAccessHistory()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetAccessHistory::InitAsDefaultInstance() {
}

GetAccessHistory::GetAccessHistory(const GetAccessHistory& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccessHistory::SharedCtor() {
  _cached_size_ = 0;
  page_num_ = 0u;
  page_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccessHistory::~GetAccessHistory() {
  SharedDtor();
}

void GetAccessHistory::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAccessHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAccessHistory& GetAccessHistory::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetAccessHistory* GetAccessHistory::default_instance_ = NULL;

GetAccessHistory* GetAccessHistory::New() const {
  return new GetAccessHistory;
}

void GetAccessHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_num_ = 0u;
    page_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetAccessHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page_size;
        break;
      }

      // optional uint32 page_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccessHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 page_num = 1;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_num(), output);
  }

  // optional uint32 page_size = 2;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_size(), output);
  }

}

int GetAccessHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 page_num = 1;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

    // optional uint32 page_size = 2;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessHistory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAccessHistory*>(&from));
}

void GetAccessHistory::MergeFrom(const GetAccessHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
  }
}

void GetAccessHistory::CopyFrom(const GetAccessHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessHistory::IsInitialized() const {

  return true;
}

void GetAccessHistory::Swap(GetAccessHistory* other) {
  if (other != this) {
    std::swap(page_num_, other->page_num_);
    std::swap(page_size_, other->page_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAccessHistory::GetTypeName() const {
  return "com.mservice.momo.msg.GetAccessHistory";
}


// ===================================================================

#ifndef _MSC_VER
const int AccessHistoryDetail::kIpFieldNumber;
const int AccessHistoryDetail::kTimeInFieldNumber;
const int AccessHistoryDetail::kTimeOutFieldNumber;
const int AccessHistoryDetail::kDeviceModelFieldNumber;
#endif  // !_MSC_VER

AccessHistoryDetail::AccessHistoryDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AccessHistoryDetail::InitAsDefaultInstance() {
}

AccessHistoryDetail::AccessHistoryDetail(const AccessHistoryDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AccessHistoryDetail::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_in_ = GOOGLE_ULONGLONG(0);
  time_out_ = GOOGLE_ULONGLONG(0);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessHistoryDetail::~AccessHistoryDetail() {
  SharedDtor();
}

void AccessHistoryDetail::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AccessHistoryDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AccessHistoryDetail& AccessHistoryDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

AccessHistoryDetail* AccessHistoryDetail::default_instance_ = NULL;

AccessHistoryDetail* AccessHistoryDetail::New() const {
  return new AccessHistoryDetail;
}

void AccessHistoryDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    time_in_ = GOOGLE_ULONGLONG(0);
    time_out_ = GOOGLE_ULONGLONG(0);
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AccessHistoryDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_in;
        break;
      }

      // optional uint64 time_in = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_in_)));
          set_has_time_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_out;
        break;
      }

      // optional uint64 time_out = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_out_)));
          set_has_time_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_model;
        break;
      }

      // optional string device_model = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccessHistoryDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional uint64 time_in = 2;
  if (has_time_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_in(), output);
  }

  // optional uint64 time_out = 3;
  if (has_time_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_out(), output);
  }

  // optional string device_model = 4;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_model(), output);
  }

}

int AccessHistoryDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 time_in = 2;
    if (has_time_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_in());
    }

    // optional uint64 time_out = 3;
    if (has_time_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_out());
    }

    // optional string device_model = 4;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessHistoryDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AccessHistoryDetail*>(&from));
}

void AccessHistoryDetail::MergeFrom(const AccessHistoryDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_time_in()) {
      set_time_in(from.time_in());
    }
    if (from.has_time_out()) {
      set_time_out(from.time_out());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
  }
}

void AccessHistoryDetail::CopyFrom(const AccessHistoryDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessHistoryDetail::IsInitialized() const {

  return true;
}

void AccessHistoryDetail::Swap(AccessHistoryDetail* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(time_in_, other->time_in_);
    std::swap(time_out_, other->time_out_);
    std::swap(device_model_, other->device_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AccessHistoryDetail::GetTypeName() const {
  return "com.mservice.momo.msg.AccessHistoryDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccessHistoryReply::kResultFieldNumber;
const int GetAccessHistoryReply::kAccessDetailFieldNumber;
#endif  // !_MSC_VER

GetAccessHistoryReply::GetAccessHistoryReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetAccessHistoryReply::InitAsDefaultInstance() {
}

GetAccessHistoryReply::GetAccessHistoryReply(const GetAccessHistoryReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccessHistoryReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccessHistoryReply::~GetAccessHistoryReply() {
  SharedDtor();
}

void GetAccessHistoryReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAccessHistoryReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAccessHistoryReply& GetAccessHistoryReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetAccessHistoryReply* GetAccessHistoryReply::default_instance_ = NULL;

GetAccessHistoryReply* GetAccessHistoryReply::New() const {
  return new GetAccessHistoryReply;
}

void GetAccessHistoryReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  access_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetAccessHistoryReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_access_detail;
        break;
      }

      // repeated .com.mservice.momo.msg.AccessHistoryDetail access_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_access_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_access_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccessHistoryReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .com.mservice.momo.msg.AccessHistoryDetail access_detail = 2;
  for (int i = 0; i < this->access_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->access_detail(i), output);
  }

}

int GetAccessHistoryReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.mservice.momo.msg.AccessHistoryDetail access_detail = 2;
  total_size += 1 * this->access_detail_size();
  for (int i = 0; i < this->access_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->access_detail(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccessHistoryReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAccessHistoryReply*>(&from));
}

void GetAccessHistoryReply::MergeFrom(const GetAccessHistoryReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  access_detail_.MergeFrom(from.access_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void GetAccessHistoryReply::CopyFrom(const GetAccessHistoryReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessHistoryReply::IsInitialized() const {

  return true;
}

void GetAccessHistoryReply::Swap(GetAccessHistoryReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    access_detail_.Swap(&other->access_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAccessHistoryReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetAccessHistoryReply";
}


// ===================================================================

#ifndef _MSC_VER
const int StoreInfo::kOwnerFieldNumber;
const int StoreInfo::kPhoneFieldNumber;
const int StoreInfo::kNameFieldNumber;
const int StoreInfo::kAddFieldNumber;
const int StoreInfo::kStreetFieldNumber;
const int StoreInfo::kWardFieldNumber;
const int StoreInfo::kDidFieldNumber;
const int StoreInfo::kCidFieldNumber;
const int StoreInfo::kAidFieldNumber;
const int StoreInfo::kLastUpdateTimeFieldNumber;
const int StoreInfo::kDeletedFieldNumber;
const int StoreInfo::kRowCoreIdFieldNumber;
const int StoreInfo::kLngFieldNumber;
const int StoreInfo::kLatFieldNumber;
const int StoreInfo::kMomoNumberFieldNumber;
#endif  // !_MSC_VER

StoreInfo::StoreInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreInfo::InitAsDefaultInstance() {
}

StoreInfo::StoreInfo(const StoreInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreInfo::SharedCtor() {
  _cached_size_ = 0;
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  did_ = 0u;
  cid_ = 0u;
  aid_ = 0u;
  last_update_time_ = GOOGLE_ULONGLONG(0);
  deleted_ = false;
  rowcoreid_ = 0u;
  lng_ = 0;
  lat_ = 0;
  momo_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreInfo::~StoreInfo() {
  SharedDtor();
}

void StoreInfo::SharedDtor() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (add_ != &::google::protobuf::internal::kEmptyString) {
    delete add_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (ward_ != &::google::protobuf::internal::kEmptyString) {
    delete ward_;
  }
  if (momo_number_ != &::google::protobuf::internal::kEmptyString) {
    delete momo_number_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreInfo& StoreInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StoreInfo* StoreInfo::default_instance_ = NULL;

StoreInfo* StoreInfo::New() const {
  return new StoreInfo;
}

void StoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_add()) {
      if (add_ != &::google::protobuf::internal::kEmptyString) {
        add_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_ward()) {
      if (ward_ != &::google::protobuf::internal::kEmptyString) {
        ward_->clear();
      }
    }
    did_ = 0u;
    cid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aid_ = 0u;
    last_update_time_ = GOOGLE_ULONGLONG(0);
    deleted_ = false;
    rowcoreid_ = 0u;
    lng_ = 0;
    lat_ = 0;
    if (has_momo_number()) {
      if (momo_number_ != &::google::protobuf::internal::kEmptyString) {
        momo_number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_add;
        break;
      }

      // optional string add = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_street;
        break;
      }

      // optional string street = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ward;
        break;
      }

      // optional string ward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_did;
        break;
      }

      // optional uint32 did = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_did:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &did_)));
          set_has_did();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cid;
        break;
      }

      // optional uint32 cid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_aid;
        break;
      }

      // optional uint32 aid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_update_time;
        break;
      }

      // optional uint64 last_update_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_update_time_)));
          set_has_last_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rowCoreId;
        break;
      }

      // optional uint32 rowCoreId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowCoreId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowcoreid_)));
          set_has_rowcoreid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_lng;
        break;
      }

      // optional double lng = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_lat;
        break;
      }

      // optional double lat = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_momo_number;
        break;
      }

      // optional string momo_number = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_momo_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_momo_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->owner(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string add = 4;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->add(), output);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->street(), output);
  }

  // optional string ward = 6;
  if (has_ward()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ward(), output);
  }

  // optional uint32 did = 7;
  if (has_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->did(), output);
  }

  // optional uint32 cid = 8;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cid(), output);
  }

  // optional uint32 aid = 9;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->aid(), output);
  }

  // optional uint64 last_update_time = 10;
  if (has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->last_update_time(), output);
  }

  // optional bool deleted = 11;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->deleted(), output);
  }

  // optional uint32 rowCoreId = 12;
  if (has_rowcoreid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rowcoreid(), output);
  }

  // optional double lng = 13;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lng(), output);
  }

  // optional double lat = 14;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->lat(), output);
  }

  // optional string momo_number = 15;
  if (has_momo_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->momo_number(), output);
  }

}

int StoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string add = 4;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->add());
    }

    // optional string street = 5;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string ward = 6;
    if (has_ward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ward());
    }

    // optional uint32 did = 7;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->did());
    }

    // optional uint32 cid = 8;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 aid = 9;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // optional uint64 last_update_time = 10;
    if (has_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_update_time());
    }

    // optional bool deleted = 11;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional uint32 rowCoreId = 12;
    if (has_rowcoreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowcoreid());
    }

    // optional double lng = 13;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // optional double lat = 14;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional string momo_number = 15;
    if (has_momo_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->momo_number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreInfo*>(&from));
}

void StoreInfo::MergeFrom(const StoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_add()) {
      set_add(from.add());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_ward()) {
      set_ward(from.ward());
    }
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_last_update_time()) {
      set_last_update_time(from.last_update_time());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_rowcoreid()) {
      set_rowcoreid(from.rowcoreid());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_momo_number()) {
      set_momo_number(from.momo_number());
    }
  }
}

void StoreInfo::CopyFrom(const StoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreInfo::IsInitialized() const {

  return true;
}

void StoreInfo::Swap(StoreInfo* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(phone_, other->phone_);
    std::swap(name_, other->name_);
    std::swap(add_, other->add_);
    std::swap(street_, other->street_);
    std::swap(ward_, other->ward_);
    std::swap(did_, other->did_);
    std::swap(cid_, other->cid_);
    std::swap(aid_, other->aid_);
    std::swap(last_update_time_, other->last_update_time_);
    std::swap(deleted_, other->deleted_);
    std::swap(rowcoreid_, other->rowcoreid_);
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(momo_number_, other->momo_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreInfo::GetTypeName() const {
  return "com.mservice.momo.msg.StoreInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncStoreLocationReply::kResultFieldNumber;
const int SyncStoreLocationReply::kStoresFieldNumber;
#endif  // !_MSC_VER

SyncStoreLocationReply::SyncStoreLocationReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncStoreLocationReply::InitAsDefaultInstance() {
}

SyncStoreLocationReply::SyncStoreLocationReply(const SyncStoreLocationReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncStoreLocationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncStoreLocationReply::~SyncStoreLocationReply() {
  SharedDtor();
}

void SyncStoreLocationReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncStoreLocationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncStoreLocationReply& SyncStoreLocationReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

SyncStoreLocationReply* SyncStoreLocationReply::default_instance_ = NULL;

SyncStoreLocationReply* SyncStoreLocationReply::New() const {
  return new SyncStoreLocationReply;
}

void SyncStoreLocationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  stores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SyncStoreLocationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stores;
        break;
      }

      // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncStoreLocationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
  for (int i = 0; i < this->stores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stores(i), output);
  }

}

int SyncStoreLocationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.mservice.momo.msg.StoreInfo stores = 2;
  total_size += 1 * this->stores_size();
  for (int i = 0; i < this->stores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stores(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncStoreLocationReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncStoreLocationReply*>(&from));
}

void SyncStoreLocationReply::MergeFrom(const SyncStoreLocationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  stores_.MergeFrom(from.stores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void SyncStoreLocationReply::CopyFrom(const SyncStoreLocationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncStoreLocationReply::IsInitialized() const {

  return true;
}

void SyncStoreLocationReply::Swap(SyncStoreLocationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    stores_.Swap(&other->stores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncStoreLocationReply::GetTypeName() const {
  return "com.mservice.momo.msg.SyncStoreLocationReply";
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneExist::kNumberFieldNumber;
#endif  // !_MSC_VER

PhoneExist::PhoneExist()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PhoneExist::InitAsDefaultInstance() {
}

PhoneExist::PhoneExist(const PhoneExist& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PhoneExist::SharedCtor() {
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneExist::~PhoneExist() {
  SharedDtor();
}

void PhoneExist::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PhoneExist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneExist& PhoneExist::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

PhoneExist* PhoneExist::default_instance_ = NULL;

PhoneExist* PhoneExist::New() const {
  return new PhoneExist;
}

void PhoneExist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PhoneExist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhoneExist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->number(), output);
  }

}

int PhoneExist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneExist::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneExist*>(&from));
}

void PhoneExist::MergeFrom(const PhoneExist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
}

void PhoneExist::CopyFrom(const PhoneExist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneExist::IsInitialized() const {

  return true;
}

void PhoneExist::Swap(PhoneExist* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhoneExist::GetTypeName() const {
  return "com.mservice.momo.msg.PhoneExist";
}


// ===================================================================

#ifndef _MSC_VER
const int AgentInfo::kResultFieldNumber;
const int AgentInfo::kNameFieldNumber;
const int AgentInfo::kCardIdFieldNumber;
const int AgentInfo::kAddressFieldNumber;
const int AgentInfo::kDateOfBirthFieldNumber;
const int AgentInfo::kPointFieldNumber;
const int AgentInfo::kMomoFieldNumber;
const int AgentInfo::kMloadFieldNumber;
const int AgentInfo::kRegStatusFieldNumber;
const int AgentInfo::kBankNameFieldNumber;
const int AgentInfo::kBankAccountFieldNumber;
const int AgentInfo::kBankCodeFieldNumber;
const int AgentInfo::kEmailFieldNumber;
const int AgentInfo::kNonameCountFieldNumber;
const int AgentInfo::kInPromotionFieldNumber;
const int AgentInfo::kExistFieldNumber;
const int AgentInfo::kListKeyValueFieldNumber;
#endif  // !_MSC_VER

AgentInfo::AgentInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AgentInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  regstatus_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(
      ::com::mservice::momo::msg::RegStatus::internal_default_instance());
#else
  regstatus_ = const_cast< ::com::mservice::momo::msg::RegStatus*>(&::com::mservice::momo::msg::RegStatus::default_instance());
#endif
}

AgentInfo::AgentInfo(const AgentInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AgentInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateofbirth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  point_ = GOOGLE_ULONGLONG(0);
  momo_ = GOOGLE_ULONGLONG(0);
  mload_ = GOOGLE_ULONGLONG(0);
  regstatus_ = NULL;
  bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noname_count_ = 0u;
  in_promotion_ = false;
  exist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInfo::~AgentInfo() {
  SharedDtor();
}

void AgentInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (dateofbirth_ != &::google::protobuf::internal::kEmptyString) {
    delete dateofbirth_;
  }
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (bank_account_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_account_;
  }
  if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_code_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete regstatus_;
  }
}

void AgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AgentInfo& AgentInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

AgentInfo* AgentInfo::default_instance_ = NULL;

AgentInfo* AgentInfo::New() const {
  return new AgentInfo;
}

void AgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_dateofbirth()) {
      if (dateofbirth_ != &::google::protobuf::internal::kEmptyString) {
        dateofbirth_->clear();
      }
    }
    point_ = GOOGLE_ULONGLONG(0);
    momo_ = GOOGLE_ULONGLONG(0);
    mload_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_regstatus()) {
      if (regstatus_ != NULL) regstatus_->::com::mservice::momo::msg::RegStatus::Clear();
    }
    if (has_bank_name()) {
      if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
        bank_name_->clear();
      }
    }
    if (has_bank_account()) {
      if (bank_account_ != &::google::protobuf::internal::kEmptyString) {
        bank_account_->clear();
      }
    }
    if (has_bank_code()) {
      if (bank_code_ != &::google::protobuf::internal::kEmptyString) {
        bank_code_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    noname_count_ = 0u;
    in_promotion_ = false;
    exist_ = false;
  }
  list_key_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardId;
        break;
      }

      // optional string cardId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dateOfBirth;
        break;
      }

      // optional string dateOfBirth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dateOfBirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dateofbirth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_point;
        break;
      }

      // optional uint64 point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_momo;
        break;
      }

      // optional uint64 momo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &momo_)));
          set_has_momo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mload;
        break;
      }

      // optional uint64 mload = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mload_)));
          set_has_mload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_regStatus;
        break;
      }

      // optional .com.mservice.momo.msg.RegStatus regStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bank_name;
        break;
      }

      // optional string bank_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bank_account;
        break;
      }

      // optional string bank_account = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bank_code;
        break;
      }

      // optional string bank_code = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_email;
        break;
      }

      // optional string email = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_noname_count;
        break;
      }

      // optional uint32 noname_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noname_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noname_count_)));
          set_has_noname_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_in_promotion;
        break;
      }

      // optional bool in_promotion = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_promotion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_promotion_)));
          set_has_in_promotion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exist;
        break;
      }

      // optional bool exist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_)));
          set_has_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_list_key_value;
        break;
      }

      // repeated .com.mservice.momo.msg.TextValue list_key_value = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_key_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_list_key_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardid(), output);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address(), output);
  }

  // optional string dateOfBirth = 5;
  if (has_dateofbirth()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dateofbirth(), output);
  }

  // optional uint64 point = 6;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->point(), output);
  }

  // optional uint64 momo = 7;
  if (has_momo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->momo(), output);
  }

  // optional uint64 mload = 8;
  if (has_mload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->mload(), output);
  }

  // optional .com.mservice.momo.msg.RegStatus regStatus = 9;
  if (has_regstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->regstatus(), output);
  }

  // optional string bank_name = 10;
  if (has_bank_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->bank_name(), output);
  }

  // optional string bank_account = 11;
  if (has_bank_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bank_account(), output);
  }

  // optional string bank_code = 12;
  if (has_bank_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bank_code(), output);
  }

  // optional string email = 13;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->email(), output);
  }

  // optional uint32 noname_count = 14;
  if (has_noname_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->noname_count(), output);
  }

  // optional bool in_promotion = 15;
  if (has_in_promotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->in_promotion(), output);
  }

  // optional bool exist = 16;
  if (has_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->exist(), output);
  }

  // repeated .com.mservice.momo.msg.TextValue list_key_value = 17;
  for (int i = 0; i < this->list_key_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->list_key_value(i), output);
  }

}

int AgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cardId = 3;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

    // optional string address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string dateOfBirth = 5;
    if (has_dateofbirth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dateofbirth());
    }

    // optional uint64 point = 6;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->point());
    }

    // optional uint64 momo = 7;
    if (has_momo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->momo());
    }

    // optional uint64 mload = 8;
    if (has_mload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mload());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.mservice.momo.msg.RegStatus regStatus = 9;
    if (has_regstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regstatus());
    }

    // optional string bank_name = 10;
    if (has_bank_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_name());
    }

    // optional string bank_account = 11;
    if (has_bank_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_account());
    }

    // optional string bank_code = 12;
    if (has_bank_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_code());
    }

    // optional string email = 13;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint32 noname_count = 14;
    if (has_noname_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noname_count());
    }

    // optional bool in_promotion = 15;
    if (has_in_promotion()) {
      total_size += 1 + 1;
    }

    // optional bool exist = 16;
    if (has_exist()) {
      total_size += 2 + 1;
    }

  }
  // repeated .com.mservice.momo.msg.TextValue list_key_value = 17;
  total_size += 2 * this->list_key_value_size();
  for (int i = 0; i < this->list_key_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_key_value(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AgentInfo*>(&from));
}

void AgentInfo::MergeFrom(const AgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_key_value_.MergeFrom(from.list_key_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_dateofbirth()) {
      set_dateofbirth(from.dateofbirth());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_momo()) {
      set_momo(from.momo());
    }
    if (from.has_mload()) {
      set_mload(from.mload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_regstatus()) {
      mutable_regstatus()->::com::mservice::momo::msg::RegStatus::MergeFrom(from.regstatus());
    }
    if (from.has_bank_name()) {
      set_bank_name(from.bank_name());
    }
    if (from.has_bank_account()) {
      set_bank_account(from.bank_account());
    }
    if (from.has_bank_code()) {
      set_bank_code(from.bank_code());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_noname_count()) {
      set_noname_count(from.noname_count());
    }
    if (from.has_in_promotion()) {
      set_in_promotion(from.in_promotion());
    }
    if (from.has_exist()) {
      set_exist(from.exist());
    }
  }
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {

  return true;
}

void AgentInfo::Swap(AgentInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(cardid_, other->cardid_);
    std::swap(address_, other->address_);
    std::swap(dateofbirth_, other->dateofbirth_);
    std::swap(point_, other->point_);
    std::swap(momo_, other->momo_);
    std::swap(mload_, other->mload_);
    std::swap(regstatus_, other->regstatus_);
    std::swap(bank_name_, other->bank_name_);
    std::swap(bank_account_, other->bank_account_);
    std::swap(bank_code_, other->bank_code_);
    std::swap(email_, other->email_);
    std::swap(noname_count_, other->noname_count_);
    std::swap(in_promotion_, other->in_promotion_);
    std::swap(exist_, other->exist_);
    list_key_value_.Swap(&other->list_key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AgentInfo::GetTypeName() const {
  return "com.mservice.momo.msg.AgentInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BankNetToMomoRely::kResultFieldNumber;
const int BankNetToMomoRely::kRcodeFieldNumber;
const int BankNetToMomoRely::kMerchantTransIdFieldNumber;
const int BankNetToMomoRely::kTransIdFieldNumber;
#endif  // !_MSC_VER

BankNetToMomoRely::BankNetToMomoRely()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BankNetToMomoRely::InitAsDefaultInstance() {
}

BankNetToMomoRely::BankNetToMomoRely(const BankNetToMomoRely& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BankNetToMomoRely::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  rcode_ = 0u;
  merchant_trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankNetToMomoRely::~BankNetToMomoRely() {
  SharedDtor();
}

void BankNetToMomoRely::SharedDtor() {
  if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete merchant_trans_id_;
  }
  if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BankNetToMomoRely::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BankNetToMomoRely& BankNetToMomoRely::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

BankNetToMomoRely* BankNetToMomoRely::default_instance_ = NULL;

BankNetToMomoRely* BankNetToMomoRely::New() const {
  return new BankNetToMomoRely;
}

void BankNetToMomoRely::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    rcode_ = 0u;
    if (has_merchant_trans_id()) {
      if (merchant_trans_id_ != &::google::protobuf::internal::kEmptyString) {
        merchant_trans_id_->clear();
      }
    }
    if (has_trans_id()) {
      if (trans_id_ != &::google::protobuf::internal::kEmptyString) {
        trans_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BankNetToMomoRely::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rcode;
        break;
      }

      // optional uint32 rcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_merchant_trans_id;
        break;
      }

      // optional string merchant_trans_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merchant_trans_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchant_trans_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trans_id;
        break;
      }

      // optional string trans_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankNetToMomoRely::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 rcode = 2;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rcode(), output);
  }

  // optional string merchant_trans_id = 3;
  if (has_merchant_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->merchant_trans_id(), output);
  }

  // optional string trans_id = 4;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->trans_id(), output);
  }

}

int BankNetToMomoRely::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 rcode = 2;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

    // optional string merchant_trans_id = 3;
    if (has_merchant_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchant_trans_id());
    }

    // optional string trans_id = 4;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankNetToMomoRely::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BankNetToMomoRely*>(&from));
}

void BankNetToMomoRely::MergeFrom(const BankNetToMomoRely& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
    if (from.has_merchant_trans_id()) {
      set_merchant_trans_id(from.merchant_trans_id());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
  }
}

void BankNetToMomoRely::CopyFrom(const BankNetToMomoRely& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankNetToMomoRely::IsInitialized() const {

  return true;
}

void BankNetToMomoRely::Swap(BankNetToMomoRely* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rcode_, other->rcode_);
    std::swap(merchant_trans_id_, other->merchant_trans_id_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BankNetToMomoRely::GetTypeName() const {
  return "com.mservice.momo.msg.BankNetToMomoRely";
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyRequest::kToNumberFieldNumber;
const int MoneyRequest::kAmountFieldNumber;
const int MoneyRequest::kContentFieldNumber;
const int MoneyRequest::kFromNumberFieldNumber;
const int MoneyRequest::kFromNameFieldNumber;
#endif  // !_MSC_VER

MoneyRequest::MoneyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MoneyRequest::InitAsDefaultInstance() {
}

MoneyRequest::MoneyRequest(const MoneyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  to_number_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_number_ = 0u;
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyRequest::~MoneyRequest() {
  SharedDtor();
}

void MoneyRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MoneyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MoneyRequest& MoneyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

MoneyRequest* MoneyRequest::default_instance_ = NULL;

MoneyRequest* MoneyRequest::New() const {
  return new MoneyRequest;
}

void MoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_number_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    from_number_ = 0u;
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 to_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_number_)));
          set_has_to_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from_number;
        break;
      }

      // optional uint32 from_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_number_)));
          set_has_from_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_from_name;
        break;
      }

      // optional string from_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 to_number = 1;
  if (has_to_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->to_number(), output);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional uint32 from_number = 4;
  if (has_from_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_number(), output);
  }

  // optional string from_name = 5;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->from_name(), output);
  }

}

int MoneyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 to_number = 1;
    if (has_to_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_number());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 from_number = 4;
    if (has_from_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_number());
    }

    // optional string from_name = 5;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MoneyRequest*>(&from));
}

void MoneyRequest::MergeFrom(const MoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_number()) {
      set_to_number(from.to_number());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_from_number()) {
      set_from_number(from.from_number());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
  }
}

void MoneyRequest::CopyFrom(const MoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyRequest::IsInitialized() const {

  return true;
}

void MoneyRequest::Swap(MoneyRequest* other) {
  if (other != this) {
    std::swap(to_number_, other->to_number_);
    std::swap(amount_, other->amount_);
    std::swap(content_, other->content_);
    std::swap(from_number_, other->from_number_);
    std::swap(from_name_, other->from_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MoneyRequest::GetTypeName() const {
  return "com.mservice.momo.msg.MoneyRequest";
}


// ===================================================================

bool TranHisV1_TranType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TranHisV1_TranType TranHisV1::BANK_IN;
const TranHisV1_TranType TranHisV1::BANK_OUT;
const TranHisV1_TranType TranHisV1::TOP_UP;
const TranHisV1_TranType TranHisV1::TOP_UP_GAME;
const TranHisV1_TranType TranHisV1::M2C;
const TranHisV1_TranType TranHisV1::M2M;
const TranHisV1_TranType TranHisV1::PAY_ONE_BILL;
const TranHisV1_TranType TranHisV1::QUICK_PAYMENT;
const TranHisV1_TranType TranHisV1::QUICK_DEPOSIT;
const TranHisV1_TranType TranHisV1::BANK_NET_TO_MOMO;
const TranHisV1_TranType TranHisV1::BANK_NET_VERIFY_OTP;
const TranHisV1_TranType TranHisV1::PAY_ONE_BILL_OTHER;
const TranHisV1_TranType TranHisV1::TRANSFER_MONEY_TO_PLACE;
const TranHisV1_TranType TranHisV1::BILL_PAY_TELEPHONE;
const TranHisV1_TranType TranHisV1::BILL_PAY_TICKET_AIRLINE;
const TranHisV1_TranType TranHisV1::BILL_PAY_TICKET_TRAIN;
const TranHisV1_TranType TranHisV1::BILL_PAY_INSURANCE;
const TranHisV1_TranType TranHisV1::BILL_PAY_INTERNET;
const TranHisV1_TranType TranHisV1::BILL_PAY_OTHER;
const TranHisV1_TranType TranHisV1::DEPOSIT_CASH_OTHER;
const TranHisV1_TranType TranHisV1::BUY_MOBILITY_CARD;
const TranHisV1_TranType TranHisV1::BUY_GAME_CARD;
const TranHisV1_TranType TranHisV1::BUY_OTHER;
const TranHisV1_TranType TranHisV1::DEPOSIT_CASH;
const TranHisV1_TranType TranHisV1::BILL_PAY_CINEMA;
const TranHisV1_TranType TranHisV1::MOMO_TO_BANK_MANUAL;
const TranHisV1_TranType TranHisV1::DEPOSIT_AT_HOME;
const TranHisV1_TranType TranHisV1::WITHDRAW_AT_HOME;
const TranHisV1_TranType TranHisV1::BONUS;
const TranHisV1_TranType TranHisV1::FEE;
const TranHisV1_TranType TranHisV1::PHIM123;
const TranHisV1_TranType TranHisV1::PAY_NUOCCL_BILL;
const TranHisV1_TranType TranHisV1::PAY_AVG_BILL;
const TranHisV1_TranType TranHisV1::PAY_ONE_BILL_SERVICE;
const TranHisV1_TranType TranHisV1::BUY_GIFT;
const TranHisV1_TranType TranHisV1::SEND_GIFT;
const TranHisV1_TranType TranHisV1::GIFT_TO_MPOINT;
const TranHisV1_TranType TranHisV1::GIFT_RECEIVE;
const TranHisV1_TranType TranHisV1::NAMED;
const TranHisV1_TranType TranHisV1::PAY_BACK;
const TranHisV1_TranType TranHisV1::PROMOTION;
const TranHisV1_TranType TranHisV1::VOUCHER;
const TranHisV1_TranType TranHisV1::POINT;
const TranHisV1_TranType TranHisV1::GIFT_CLAIM;
const TranHisV1_TranType TranHisV1::MPOINT_CLAIM;
const TranHisV1_TranType TranHisV1::C2C;
const TranHisV1_TranType TranHisV1::C2C_RECEIVE;
const TranHisV1_TranType TranHisV1::C2C_BONUS_SEND;
const TranHisV1_TranType TranHisV1::C2C_BONUS_RECEIVE;
const TranHisV1_TranType TranHisV1::VM_PROCESS_CASH_IN;
const TranHisV1_TranType TranHisV1::BONUS_DGD;
const TranHisV1_TranType TranHisV1::BONUS_300;
const TranHisV1_TranType TranHisV1::PAY_ONE_SALE_OFF_BILL;
const TranHisV1_TranType TranHisV1::TRANSFER_ONE_BILL;
const TranHisV1_TranType TranHisV1::PAY_SDK_BILL;
const TranHisV1_TranType TranHisV1::PAY_IPOS_BILL;
const TranHisV1_TranType TranHisV1::ATM_CASH_IN;
const TranHisV1_TranType TranHisV1::ATM_CASH_IN_REPLY;
const TranHisV1_TranType TranHisV1::ATM_CASH_OUT;
const TranHisV1_TranType TranHisV1::ATM_CASH_OUT_REPLY;
const TranHisV1_TranType TranHisV1::TranType_MIN;
const TranHisV1_TranType TranHisV1::TranType_MAX;
const int TranHisV1::TranType_ARRAYSIZE;
#endif  // _MSC_VER
bool TranHisV1_ResultCode_IsValid(int value) {
  switch(value) {
    case -13:
    case -11:
    case -9:
    case -8:
    case -7:
    case -6:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 1000000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TranHisV1_ResultCode TranHisV1::SYSTEM_ERROR;
const TranHisV1_ResultCode TranHisV1::ALL_OK;
const TranHisV1_ResultCode TranHisV1::PARTNER_NUMBER_NOT_VALID;
const TranHisV1_ResultCode TranHisV1::SESSION_EXPIRED;
const TranHisV1_ResultCode TranHisV1::NOT_SUPPORT;
const TranHisV1_ResultCode TranHisV1::NO_SUCH_GIFT;
const TranHisV1_ResultCode TranHisV1::GIFT_TYPE_NOT_ACTIVE;
const TranHisV1_ResultCode TranHisV1::WRONG_PRICE_AMOUNT;
const TranHisV1_ResultCode TranHisV1::ALREADY_OWNED;
const TranHisV1_ResultCode TranHisV1::NOT_TRANSFERABLE;
const TranHisV1_ResultCode TranHisV1::CUSTOM_ERROR;
const TranHisV1_ResultCode TranHisV1::NOT_OWNED;
const TranHisV1_ResultCode TranHisV1::ResultCode_MIN;
const TranHisV1_ResultCode TranHisV1::ResultCode_MAX;
const int TranHisV1::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
bool TranHisV1_SourceFrom_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TranHisV1_SourceFrom TranHisV1::MOMO;
const TranHisV1_SourceFrom TranHisV1::BANKLINKED;
const TranHisV1_SourceFrom TranHisV1::MASTERCARD;
const TranHisV1_SourceFrom TranHisV1::VISA;
const TranHisV1_SourceFrom TranHisV1::BANK_NET_2_VERIFY_OTP;
const TranHisV1_SourceFrom TranHisV1::PAY123;
const TranHisV1_SourceFrom TranHisV1::SourceFrom_MIN;
const TranHisV1_SourceFrom TranHisV1::SourceFrom_MAX;
const int TranHisV1::SourceFrom_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TranHisV1::kTranIdFieldNumber;
const int TranHisV1::kClientTimeFieldNumber;
const int TranHisV1::kAckTimeFieldNumber;
const int TranHisV1::kFinishTimeFieldNumber;
const int TranHisV1::kTranTypeFieldNumber;
const int TranHisV1::kIoFieldNumber;
const int TranHisV1::kCategoryFieldNumber;
const int TranHisV1::kPartnerIdFieldNumber;
const int TranHisV1::kPartnerCodeFieldNumber;
const int TranHisV1::kPartnerNameFieldNumber;
const int TranHisV1::kPartnerRefFieldNumber;
const int TranHisV1::kBillIdFieldNumber;
const int TranHisV1::kAmountFieldNumber;
const int TranHisV1::kCommentFieldNumber;
const int TranHisV1::kStatusFieldNumber;
const int TranHisV1::kErrorFieldNumber;
const int TranHisV1::kCommandIndFieldNumber;
const int TranHisV1::kSourceFromFieldNumber;
const int TranHisV1::kPartnerExtra1FieldNumber;
const int TranHisV1::kKvpFieldNumber;
const int TranHisV1::kDescFieldNumber;
const int TranHisV1::kShareFieldNumber;
#endif  // !_MSC_VER

TranHisV1::TranHisV1()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TranHisV1::InitAsDefaultInstance() {
}

TranHisV1::TranHisV1(const TranHisV1& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TranHisV1::SharedCtor() {
  _cached_size_ = 0;
  tranid_ = GOOGLE_ULONGLONG(0);
  client_time_ = GOOGLE_ULONGLONG(0);
  acktime_ = GOOGLE_ULONGLONG(0);
  finishtime_ = GOOGLE_ULONGLONG(0);
  trantype_ = 0u;
  io_ = 0u;
  category_ = 0u;
  partnerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partner_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  error_ = 0u;
  command_ind_ = GOOGLE_ULONGLONG(0);
  source_from_ = 0u;
  partner_extra_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  share_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranHisV1::~TranHisV1() {
  SharedDtor();
}

void TranHisV1::SharedDtor() {
  if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerid_;
  }
  if (partnercode_ != &::google::protobuf::internal::kEmptyString) {
    delete partnercode_;
  }
  if (partnername_ != &::google::protobuf::internal::kEmptyString) {
    delete partnername_;
  }
  if (partner_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_ref_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (partner_extra_1_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_extra_1_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (share_ != &::google::protobuf::internal::kEmptyString) {
    delete share_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TranHisV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranHisV1& TranHisV1::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

TranHisV1* TranHisV1::default_instance_ = NULL;

TranHisV1* TranHisV1::New() const {
  return new TranHisV1;
}

void TranHisV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tranid_ = GOOGLE_ULONGLONG(0);
    client_time_ = GOOGLE_ULONGLONG(0);
    acktime_ = GOOGLE_ULONGLONG(0);
    finishtime_ = GOOGLE_ULONGLONG(0);
    trantype_ = 0u;
    io_ = 0u;
    category_ = 0u;
    if (has_partnerid()) {
      if (partnerid_ != &::google::protobuf::internal::kEmptyString) {
        partnerid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_partnercode()) {
      if (partnercode_ != &::google::protobuf::internal::kEmptyString) {
        partnercode_->clear();
      }
    }
    if (has_partnername()) {
      if (partnername_ != &::google::protobuf::internal::kEmptyString) {
        partnername_->clear();
      }
    }
    if (has_partner_ref()) {
      if (partner_ref_ != &::google::protobuf::internal::kEmptyString) {
        partner_ref_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    status_ = 0u;
    error_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    command_ind_ = GOOGLE_ULONGLONG(0);
    source_from_ = 0u;
    if (has_partner_extra_1()) {
      if (partner_extra_1_ != &::google::protobuf::internal::kEmptyString) {
        partner_extra_1_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_share()) {
      if (share_ != &::google::protobuf::internal::kEmptyString) {
        share_->clear();
      }
    }
  }
  kvp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TranHisV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tranId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tranid_)));
          set_has_tranid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_time;
        break;
      }

      // optional uint64 client_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_time_)));
          set_has_client_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ackTime;
        break;
      }

      // optional uint64 ackTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acktime_)));
          set_has_acktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finishTime;
        break;
      }

      // optional uint64 finishTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tranType;
        break;
      }

      // optional uint32 tranType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trantype_)));
          set_has_trantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_io;
        break;
      }

      // optional uint32 io = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_io:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &io_)));
          set_has_io();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_category;
        break;
      }

      // optional uint32 category = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_partnerId;
        break;
      }

      // optional string partnerId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_partnerCode;
        break;
      }

      // optional string partnerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnercode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_partnerName;
        break;
      }

      // optional string partnerName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_partner_ref;
        break;
      }

      // optional string partner_ref = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_ref()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_billId;
        break;
      }

      // optional string billId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_comment;
        break;
      }

      // optional string comment = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_status;
        break;
      }

      // optional uint32 status = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_error;
        break;
      }

      // optional uint32 error = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_command_Ind;
        break;
      }

      // optional uint64 command_Ind = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command_Ind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &command_ind_)));
          set_has_command_ind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_source_from;
        break;
      }

      // optional uint32 source_from = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_from_)));
          set_has_source_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_partner_extra_1;
        break;
      }

      // optional string partner_extra_1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_extra_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_extra_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_kvp;
        break;
      }

      // repeated .com.mservice.momo.msg.TextValue kvp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_kvp;
        if (input->ExpectTag(170)) goto parse_desc;
        break;
      }

      // optional string desc = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_share;
        break;
      }

      // optional string share = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranHisV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tranId = 1;
  if (has_tranid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tranid(), output);
  }

  // optional uint64 client_time = 2;
  if (has_client_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->client_time(), output);
  }

  // optional uint64 ackTime = 3;
  if (has_acktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->acktime(), output);
  }

  // optional uint64 finishTime = 4;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->finishtime(), output);
  }

  // optional uint32 tranType = 5;
  if (has_trantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trantype(), output);
  }

  // optional uint32 io = 6;
  if (has_io()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->io(), output);
  }

  // optional uint32 category = 7;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->category(), output);
  }

  // optional string partnerId = 8;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->partnerid(), output);
  }

  // optional string partnerCode = 9;
  if (has_partnercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->partnercode(), output);
  }

  // optional string partnerName = 10;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->partnername(), output);
  }

  // optional string partner_ref = 11;
  if (has_partner_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->partner_ref(), output);
  }

  // optional string billId = 12;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->billid(), output);
  }

  // optional uint64 amount = 13;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->amount(), output);
  }

  // optional string comment = 14;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->comment(), output);
  }

  // optional uint32 status = 15;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->status(), output);
  }

  // optional uint32 error = 16;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->error(), output);
  }

  // optional uint64 command_Ind = 17;
  if (has_command_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->command_ind(), output);
  }

  // optional uint32 source_from = 18;
  if (has_source_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->source_from(), output);
  }

  // optional string partner_extra_1 = 19;
  if (has_partner_extra_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->partner_extra_1(), output);
  }

  // repeated .com.mservice.momo.msg.TextValue kvp = 20;
  for (int i = 0; i < this->kvp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->kvp(i), output);
  }

  // optional string desc = 21;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->desc(), output);
  }

  // optional string share = 22;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->share(), output);
  }

}

int TranHisV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tranId = 1;
    if (has_tranid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tranid());
    }

    // optional uint64 client_time = 2;
    if (has_client_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_time());
    }

    // optional uint64 ackTime = 3;
    if (has_acktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acktime());
    }

    // optional uint64 finishTime = 4;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finishtime());
    }

    // optional uint32 tranType = 5;
    if (has_trantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trantype());
    }

    // optional uint32 io = 6;
    if (has_io()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->io());
    }

    // optional uint32 category = 7;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // optional string partnerId = 8;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string partnerCode = 9;
    if (has_partnercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnercode());
    }

    // optional string partnerName = 10;
    if (has_partnername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnername());
    }

    // optional string partner_ref = 11;
    if (has_partner_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_ref());
    }

    // optional string billId = 12;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

    // optional uint64 amount = 13;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string comment = 14;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional uint32 status = 15;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 error = 16;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 command_Ind = 17;
    if (has_command_ind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->command_ind());
    }

    // optional uint32 source_from = 18;
    if (has_source_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_from());
    }

    // optional string partner_extra_1 = 19;
    if (has_partner_extra_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_extra_1());
    }

    // optional string desc = 21;
    if (has_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string share = 22;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share());
    }

  }
  // repeated .com.mservice.momo.msg.TextValue kvp = 20;
  total_size += 2 * this->kvp_size();
  for (int i = 0; i < this->kvp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvp(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranHisV1::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranHisV1*>(&from));
}

void TranHisV1::MergeFrom(const TranHisV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvp_.MergeFrom(from.kvp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tranid()) {
      set_tranid(from.tranid());
    }
    if (from.has_client_time()) {
      set_client_time(from.client_time());
    }
    if (from.has_acktime()) {
      set_acktime(from.acktime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_trantype()) {
      set_trantype(from.trantype());
    }
    if (from.has_io()) {
      set_io(from.io());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_partnercode()) {
      set_partnercode(from.partnercode());
    }
    if (from.has_partnername()) {
      set_partnername(from.partnername());
    }
    if (from.has_partner_ref()) {
      set_partner_ref(from.partner_ref());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_command_ind()) {
      set_command_ind(from.command_ind());
    }
    if (from.has_source_from()) {
      set_source_from(from.source_from());
    }
    if (from.has_partner_extra_1()) {
      set_partner_extra_1(from.partner_extra_1());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_share()) {
      set_share(from.share());
    }
  }
}

void TranHisV1::CopyFrom(const TranHisV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranHisV1::IsInitialized() const {

  return true;
}

void TranHisV1::Swap(TranHisV1* other) {
  if (other != this) {
    std::swap(tranid_, other->tranid_);
    std::swap(client_time_, other->client_time_);
    std::swap(acktime_, other->acktime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(trantype_, other->trantype_);
    std::swap(io_, other->io_);
    std::swap(category_, other->category_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(partnercode_, other->partnercode_);
    std::swap(partnername_, other->partnername_);
    std::swap(partner_ref_, other->partner_ref_);
    std::swap(billid_, other->billid_);
    std::swap(amount_, other->amount_);
    std::swap(comment_, other->comment_);
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(command_ind_, other->command_ind_);
    std::swap(source_from_, other->source_from_);
    std::swap(partner_extra_1_, other->partner_extra_1_);
    kvp_.Swap(&other->kvp_);
    std::swap(desc_, other->desc_);
    std::swap(share_, other->share_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TranHisV1::GetTypeName() const {
  return "com.mservice.momo.msg.TranHisV1";
}


// ===================================================================

bool CardItem_LockedType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CardItem_LockedType CardItem::FULL;
const CardItem_LockedType CardItem::PART;
const CardItem_LockedType CardItem::BANKLINKED;
const CardItem_LockedType CardItem::LockedType_MIN;
const CardItem_LockedType CardItem::LockedType_MAX;
const int CardItem::LockedType_ARRAYSIZE;
#endif  // _MSC_VER
bool CardItem_Channel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CardItem_Channel CardItem::BANKNET;
const CardItem_Channel CardItem::ONEPAY;
const CardItem_Channel CardItem::SMARTLINK;
const CardItem_Channel CardItem::MANUAL;
const CardItem_Channel CardItem::Channel_MIN;
const CardItem_Channel CardItem::Channel_MAX;
const int CardItem::Channel_ARRAYSIZE;
#endif  // _MSC_VER
bool CardItem_IOCity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CardItem_IOCity CardItem::OUT;
const CardItem_IOCity CardItem::IN;
const CardItem_IOCity CardItem::IOCity_MIN;
const CardItem_IOCity CardItem::IOCity_MAX;
const int CardItem::IOCity_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CardItem::kCardHolderYearFieldNumber;
const int CardItem::kCardHolderMonthFieldNumber;
const int CardItem::kCardHolderNumberFieldNumber;
const int CardItem::kCardHolderNameFieldNumber;
const int CardItem::kBankIdFieldNumber;
const int CardItem::kAmountFieldNumber;
const int CardItem::kLockedTypeFieldNumber;
const int CardItem::kBankTypeFieldNumber;
const int CardItem::kBankNameFieldNumber;
const int CardItem::kRowIdFieldNumber;
const int CardItem::kLastSyncTimeFieldNumber;
const int CardItem::kStatusFieldNumber;
const int CardItem::kChannelFieldNumber;
const int CardItem::kIoCityFieldNumber;
const int CardItem::kTranTypeFieldNumber;
const int CardItem::kCardIdFieldNumber;
const int CardItem::kCardTypeFieldNumber;
#endif  // !_MSC_VER

CardItem::CardItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardItem::InitAsDefaultInstance() {
}

CardItem::CardItem(const CardItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardItem::SharedCtor() {
  _cached_size_ = 0;
  card_holder_year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_holder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  locked_type_ = 0u;
  bank_type_ = 0u;
  bank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  row_id_ = 0u;
  last_sync_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  channel_ = 0u;
  io_city_ = 0u;
  tran_type_ = 0u;
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardItem::~CardItem() {
  SharedDtor();
}

void CardItem::SharedDtor() {
  if (card_holder_year_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_year_;
  }
  if (card_holder_month_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_month_;
  }
  if (card_holder_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_number_;
  }
  if (card_holder_name_ != &::google::protobuf::internal::kEmptyString) {
    delete card_holder_name_;
  }
  if (bankid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankid_;
  }
  if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_name_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
    delete cardtype_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardItem& CardItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

CardItem* CardItem::default_instance_ = NULL;

CardItem* CardItem::New() const {
  return new CardItem;
}

void CardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_card_holder_year()) {
      if (card_holder_year_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_year_->clear();
      }
    }
    if (has_card_holder_month()) {
      if (card_holder_month_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_month_->clear();
      }
    }
    if (has_card_holder_number()) {
      if (card_holder_number_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_number_->clear();
      }
    }
    if (has_card_holder_name()) {
      if (card_holder_name_ != &::google::protobuf::internal::kEmptyString) {
        card_holder_name_->clear();
      }
    }
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::kEmptyString) {
        bankid_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    locked_type_ = 0u;
    bank_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bank_name()) {
      if (bank_name_ != &::google::protobuf::internal::kEmptyString) {
        bank_name_->clear();
      }
    }
    row_id_ = 0u;
    last_sync_time_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    channel_ = 0u;
    io_city_ = 0u;
    tran_type_ = 0u;
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_cardtype()) {
      if (cardtype_ != &::google::protobuf::internal::kEmptyString) {
        cardtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_holder_year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_year()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_holder_month;
        break;
      }

      // optional string card_holder_month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_month:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_month()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_holder_number;
        break;
      }

      // optional string card_holder_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_card_holder_name;
        break;
      }

      // optional string card_holder_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_holder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_holder_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bankId;
        break;
      }

      // optional string bankId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_locked_type;
        break;
      }

      // optional uint32 locked_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_type_)));
          set_has_locked_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bank_type;
        break;
      }

      // optional uint32 bank_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bank_type_)));
          set_has_bank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bank_name;
        break;
      }

      // optional string bank_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_row_id;
        break;
      }

      // optional uint32 row_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_id_)));
          set_has_row_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_sync_time;
        break;
      }

      // optional uint64 last_sync_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sync_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_sync_time_)));
          set_has_last_sync_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }

      // optional uint32 status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_io_city;
        break;
      }

      // optional uint32 io_city = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_io_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &io_city_)));
          set_has_io_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tran_type;
        break;
      }

      // optional uint32 tran_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tran_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tran_type_)));
          set_has_tran_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_cardId;
        break;
      }

      // optional string cardId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_cardType;
        break;
      }

      // optional string cardType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string card_holder_year = 1;
  if (has_card_holder_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->card_holder_year(), output);
  }

  // optional string card_holder_month = 2;
  if (has_card_holder_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_holder_month(), output);
  }

  // optional string card_holder_number = 3;
  if (has_card_holder_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_holder_number(), output);
  }

  // optional string card_holder_name = 4;
  if (has_card_holder_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->card_holder_name(), output);
  }

  // optional string bankId = 5;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bankid(), output);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->amount(), output);
  }

  // optional uint32 locked_type = 7;
  if (has_locked_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->locked_type(), output);
  }

  // optional uint32 bank_type = 8;
  if (has_bank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bank_type(), output);
  }

  // optional string bank_name = 9;
  if (has_bank_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bank_name(), output);
  }

  // optional uint32 row_id = 10;
  if (has_row_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->row_id(), output);
  }

  // optional uint64 last_sync_time = 11;
  if (has_last_sync_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->last_sync_time(), output);
  }

  // optional uint32 status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->status(), output);
  }

  // optional uint32 channel = 13;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->channel(), output);
  }

  // optional uint32 io_city = 14;
  if (has_io_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->io_city(), output);
  }

  // optional uint32 tran_type = 15;
  if (has_tran_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tran_type(), output);
  }

  // optional string cardId = 16;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->cardid(), output);
  }

  // optional string cardType = 17;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->cardtype(), output);
  }

}

int CardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string card_holder_year = 1;
    if (has_card_holder_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_year());
    }

    // optional string card_holder_month = 2;
    if (has_card_holder_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_month());
    }

    // optional string card_holder_number = 3;
    if (has_card_holder_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_number());
    }

    // optional string card_holder_name = 4;
    if (has_card_holder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_holder_name());
    }

    // optional string bankId = 5;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

    // optional uint64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 locked_type = 7;
    if (has_locked_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->locked_type());
    }

    // optional uint32 bank_type = 8;
    if (has_bank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bank_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bank_name = 9;
    if (has_bank_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_name());
    }

    // optional uint32 row_id = 10;
    if (has_row_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_id());
    }

    // optional uint64 last_sync_time = 11;
    if (has_last_sync_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_sync_time());
    }

    // optional uint32 status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 channel = 13;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 io_city = 14;
    if (has_io_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->io_city());
    }

    // optional uint32 tran_type = 15;
    if (has_tran_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tran_type());
    }

    // optional string cardId = 16;
    if (has_cardid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string cardType = 17;
    if (has_cardtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardtype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardItem*>(&from));
}

void CardItem::MergeFrom(const CardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_holder_year()) {
      set_card_holder_year(from.card_holder_year());
    }
    if (from.has_card_holder_month()) {
      set_card_holder_month(from.card_holder_month());
    }
    if (from.has_card_holder_number()) {
      set_card_holder_number(from.card_holder_number());
    }
    if (from.has_card_holder_name()) {
      set_card_holder_name(from.card_holder_name());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_locked_type()) {
      set_locked_type(from.locked_type());
    }
    if (from.has_bank_type()) {
      set_bank_type(from.bank_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bank_name()) {
      set_bank_name(from.bank_name());
    }
    if (from.has_row_id()) {
      set_row_id(from.row_id());
    }
    if (from.has_last_sync_time()) {
      set_last_sync_time(from.last_sync_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_io_city()) {
      set_io_city(from.io_city());
    }
    if (from.has_tran_type()) {
      set_tran_type(from.tran_type());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
}

void CardItem::CopyFrom(const CardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardItem::IsInitialized() const {

  return true;
}

void CardItem::Swap(CardItem* other) {
  if (other != this) {
    std::swap(card_holder_year_, other->card_holder_year_);
    std::swap(card_holder_month_, other->card_holder_month_);
    std::swap(card_holder_number_, other->card_holder_number_);
    std::swap(card_holder_name_, other->card_holder_name_);
    std::swap(bankid_, other->bankid_);
    std::swap(amount_, other->amount_);
    std::swap(locked_type_, other->locked_type_);
    std::swap(bank_type_, other->bank_type_);
    std::swap(bank_name_, other->bank_name_);
    std::swap(row_id_, other->row_id_);
    std::swap(last_sync_time_, other->last_sync_time_);
    std::swap(status_, other->status_);
    std::swap(channel_, other->channel_);
    std::swap(io_city_, other->io_city_);
    std::swap(tran_type_, other->tran_type_);
    std::swap(cardid_, other->cardid_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardItem::GetTypeName() const {
  return "com.mservice.momo.msg.CardItem";
}


// ===================================================================

#ifndef _MSC_VER
const int CardAddOrUpdate::kCardListFieldNumber;
#endif  // !_MSC_VER

CardAddOrUpdate::CardAddOrUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardAddOrUpdate::InitAsDefaultInstance() {
}

CardAddOrUpdate::CardAddOrUpdate(const CardAddOrUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardAddOrUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardAddOrUpdate::~CardAddOrUpdate() {
  SharedDtor();
}

void CardAddOrUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardAddOrUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardAddOrUpdate& CardAddOrUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

CardAddOrUpdate* CardAddOrUpdate::default_instance_ = NULL;

CardAddOrUpdate* CardAddOrUpdate::New() const {
  return new CardAddOrUpdate;
}

void CardAddOrUpdate::Clear() {
  card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardAddOrUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.CardItem card_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_card_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardAddOrUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.CardItem card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->card_list(i), output);
  }

}

int CardAddOrUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.CardItem card_list = 1;
  total_size += 1 * this->card_list_size();
  for (int i = 0; i < this->card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardAddOrUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardAddOrUpdate*>(&from));
}

void CardAddOrUpdate::MergeFrom(const CardAddOrUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
}

void CardAddOrUpdate::CopyFrom(const CardAddOrUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardAddOrUpdate::IsInitialized() const {

  return true;
}

void CardAddOrUpdate::Swap(CardAddOrUpdate* other) {
  if (other != this) {
    card_list_.Swap(&other->card_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardAddOrUpdate::GetTypeName() const {
  return "com.mservice.momo.msg.CardAddOrUpdate";
}


// ===================================================================

#ifndef _MSC_VER
const int CardAddOrUpdateReply::kBankNetToMomoListFieldNumber;
#endif  // !_MSC_VER

CardAddOrUpdateReply::CardAddOrUpdateReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardAddOrUpdateReply::InitAsDefaultInstance() {
}

CardAddOrUpdateReply::CardAddOrUpdateReply(const CardAddOrUpdateReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardAddOrUpdateReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardAddOrUpdateReply::~CardAddOrUpdateReply() {
  SharedDtor();
}

void CardAddOrUpdateReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardAddOrUpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardAddOrUpdateReply& CardAddOrUpdateReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

CardAddOrUpdateReply* CardAddOrUpdateReply::default_instance_ = NULL;

CardAddOrUpdateReply* CardAddOrUpdateReply::New() const {
  return new CardAddOrUpdateReply;
}

void CardAddOrUpdateReply::Clear() {
  bank_net_to_momo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardAddOrUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.CardItem bank_net_to_momo_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_net_to_momo_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bank_net_to_momo_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bank_net_to_momo_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardAddOrUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.CardItem bank_net_to_momo_list = 1;
  for (int i = 0; i < this->bank_net_to_momo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bank_net_to_momo_list(i), output);
  }

}

int CardAddOrUpdateReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.CardItem bank_net_to_momo_list = 1;
  total_size += 1 * this->bank_net_to_momo_list_size();
  for (int i = 0; i < this->bank_net_to_momo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bank_net_to_momo_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardAddOrUpdateReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardAddOrUpdateReply*>(&from));
}

void CardAddOrUpdateReply::MergeFrom(const CardAddOrUpdateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bank_net_to_momo_list_.MergeFrom(from.bank_net_to_momo_list_);
}

void CardAddOrUpdateReply::CopyFrom(const CardAddOrUpdateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardAddOrUpdateReply::IsInitialized() const {

  return true;
}

void CardAddOrUpdateReply::Swap(CardAddOrUpdateReply* other) {
  if (other != this) {
    bank_net_to_momo_list_.Swap(&other->bank_net_to_momo_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardAddOrUpdateReply::GetTypeName() const {
  return "com.mservice.momo.msg.CardAddOrUpdateReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CardSyncFirstTimeReply::kCardListFieldNumber;
#endif  // !_MSC_VER

CardSyncFirstTimeReply::CardSyncFirstTimeReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardSyncFirstTimeReply::InitAsDefaultInstance() {
}

CardSyncFirstTimeReply::CardSyncFirstTimeReply(const CardSyncFirstTimeReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardSyncFirstTimeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardSyncFirstTimeReply::~CardSyncFirstTimeReply() {
  SharedDtor();
}

void CardSyncFirstTimeReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardSyncFirstTimeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardSyncFirstTimeReply& CardSyncFirstTimeReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

CardSyncFirstTimeReply* CardSyncFirstTimeReply::default_instance_ = NULL;

CardSyncFirstTimeReply* CardSyncFirstTimeReply::New() const {
  return new CardSyncFirstTimeReply;
}

void CardSyncFirstTimeReply::Clear() {
  cardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardSyncFirstTimeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.CardItem CardList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardSyncFirstTimeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.CardItem CardList = 1;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cardlist(i), output);
  }

}

int CardSyncFirstTimeReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.CardItem CardList = 1;
  total_size += 1 * this->cardlist_size();
  for (int i = 0; i < this->cardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSyncFirstTimeReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardSyncFirstTimeReply*>(&from));
}

void CardSyncFirstTimeReply::MergeFrom(const CardSyncFirstTimeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardlist_.MergeFrom(from.cardlist_);
}

void CardSyncFirstTimeReply::CopyFrom(const CardSyncFirstTimeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSyncFirstTimeReply::IsInitialized() const {

  return true;
}

void CardSyncFirstTimeReply::Swap(CardSyncFirstTimeReply* other) {
  if (other != this) {
    cardlist_.Swap(&other->cardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardSyncFirstTimeReply::GetTypeName() const {
  return "com.mservice.momo.msg.CardSyncFirstTimeReply";
}


// ===================================================================

#ifndef _MSC_VER
const int TranHisSyncReply::kResultFieldNumber;
const int TranHisSyncReply::kTranListFieldNumber;
#endif  // !_MSC_VER

TranHisSyncReply::TranHisSyncReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TranHisSyncReply::InitAsDefaultInstance() {
}

TranHisSyncReply::TranHisSyncReply(const TranHisSyncReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TranHisSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranHisSyncReply::~TranHisSyncReply() {
  SharedDtor();
}

void TranHisSyncReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TranHisSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TranHisSyncReply& TranHisSyncReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

TranHisSyncReply* TranHisSyncReply::default_instance_ = NULL;

TranHisSyncReply* TranHisSyncReply::New() const {
  return new TranHisSyncReply;
}

void TranHisSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  tranlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TranHisSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TranList;
        break;
      }

      // repeated .com.mservice.momo.msg.TranHisV1 TranList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TranList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tranlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TranList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranHisSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .com.mservice.momo.msg.TranHisV1 TranList = 2;
  for (int i = 0; i < this->tranlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->tranlist(i), output);
  }

}

int TranHisSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.mservice.momo.msg.TranHisV1 TranList = 2;
  total_size += 1 * this->tranlist_size();
  for (int i = 0; i < this->tranlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tranlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranHisSyncReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TranHisSyncReply*>(&from));
}

void TranHisSyncReply::MergeFrom(const TranHisSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tranlist_.MergeFrom(from.tranlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void TranHisSyncReply::CopyFrom(const TranHisSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranHisSyncReply::IsInitialized() const {

  return true;
}

void TranHisSyncReply::Swap(TranHisSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    tranlist_.Swap(&other->tranlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TranHisSyncReply::GetTypeName() const {
  return "com.mservice.momo.msg.TranHisSyncReply";
}


// ===================================================================

#ifndef _MSC_VER
const int Bill::kProviderIdFieldNumber;
const int Bill::kBillIdFieldNumber;
#endif  // !_MSC_VER

Bill::Bill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Bill::InitAsDefaultInstance() {
}

Bill::Bill(const Bill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Bill::SharedCtor() {
  _cached_size_ = 0;
  providerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bill::~Bill() {
  SharedDtor();
}

void Bill::SharedDtor() {
  if (providerid_ != &::google::protobuf::internal::kEmptyString) {
    delete providerid_;
  }
  if (billid_ != &::google::protobuf::internal::kEmptyString) {
    delete billid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Bill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Bill& Bill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Bill* Bill::default_instance_ = NULL;

Bill* Bill::New() const {
  return new Bill;
}

void Bill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_providerid()) {
      if (providerid_ != &::google::protobuf::internal::kEmptyString) {
        providerid_->clear();
      }
    }
    if (has_billid()) {
      if (billid_ != &::google::protobuf::internal::kEmptyString) {
        billid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Bill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string providerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_billId;
        break;
      }

      // optional string billId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string providerId = 1;
  if (has_providerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->providerid(), output);
  }

  // optional string billId = 2;
  if (has_billid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->billid(), output);
  }

}

int Bill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string providerId = 1;
    if (has_providerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providerid());
    }

    // optional string billId = 2;
    if (has_billid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bill*>(&from));
}

void Bill::MergeFrom(const Bill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_providerid()) {
      set_providerid(from.providerid());
    }
    if (from.has_billid()) {
      set_billid(from.billid());
    }
  }
}

void Bill::CopyFrom(const Bill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bill::IsInitialized() const {

  return true;
}

void Bill::Swap(Bill* other) {
  if (other != this) {
    std::swap(providerid_, other->providerid_);
    std::swap(billid_, other->billid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Bill::GetTypeName() const {
  return "com.mservice.momo.msg.Bill";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSavedBill::kBillsFieldNumber;
#endif  // !_MSC_VER

RemoveSavedBill::RemoveSavedBill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoveSavedBill::InitAsDefaultInstance() {
}

RemoveSavedBill::RemoveSavedBill(const RemoveSavedBill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveSavedBill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSavedBill::~RemoveSavedBill() {
  SharedDtor();
}

void RemoveSavedBill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveSavedBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveSavedBill& RemoveSavedBill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

RemoveSavedBill* RemoveSavedBill::default_instance_ = NULL;

RemoveSavedBill* RemoveSavedBill::New() const {
  return new RemoveSavedBill;
}

void RemoveSavedBill::Clear() {
  bills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoveSavedBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.Bill bills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveSavedBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.Bill bills = 1;
  for (int i = 0; i < this->bills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bills(i), output);
  }

}

int RemoveSavedBill::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.Bill bills = 1;
  total_size += 1 * this->bills_size();
  for (int i = 0; i < this->bills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bills(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSavedBill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveSavedBill*>(&from));
}

void RemoveSavedBill::MergeFrom(const RemoveSavedBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  bills_.MergeFrom(from.bills_);
}

void RemoveSavedBill::CopyFrom(const RemoveSavedBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSavedBill::IsInitialized() const {

  return true;
}

void RemoveSavedBill::Swap(RemoveSavedBill* other) {
  if (other != this) {
    bills_.Swap(&other->bills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveSavedBill::GetTypeName() const {
  return "com.mservice.momo.msg.RemoveSavedBill";
}


// ===================================================================

bool RemoveSavedBillReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RemoveSavedBillReply_Result RemoveSavedBillReply::SUCCESS;
const RemoveSavedBillReply_Result RemoveSavedBillReply::FAIL;
const RemoveSavedBillReply_Result RemoveSavedBillReply::Result_MIN;
const RemoveSavedBillReply_Result RemoveSavedBillReply::Result_MAX;
const int RemoveSavedBillReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RemoveSavedBillReply::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveSavedBillReply::RemoveSavedBillReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoveSavedBillReply::InitAsDefaultInstance() {
}

RemoveSavedBillReply::RemoveSavedBillReply(const RemoveSavedBillReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveSavedBillReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSavedBillReply::~RemoveSavedBillReply() {
  SharedDtor();
}

void RemoveSavedBillReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveSavedBillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveSavedBillReply& RemoveSavedBillReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

RemoveSavedBillReply* RemoveSavedBillReply::default_instance_ = NULL;

RemoveSavedBillReply* RemoveSavedBillReply::New() const {
  return new RemoveSavedBillReply;
}

void RemoveSavedBillReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoveSavedBillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::mservice::momo::msg::RemoveSavedBillReply_Result_IsValid(value)) {
            set_result(static_cast< ::com::mservice::momo::msg::RemoveSavedBillReply_Result >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveSavedBillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

}

int RemoveSavedBillReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mservice.momo.msg.RemoveSavedBillReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSavedBillReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveSavedBillReply*>(&from));
}

void RemoveSavedBillReply::MergeFrom(const RemoveSavedBillReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void RemoveSavedBillReply::CopyFrom(const RemoveSavedBillReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSavedBillReply::IsInitialized() const {

  return true;
}

void RemoveSavedBillReply::Swap(RemoveSavedBillReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveSavedBillReply::GetTypeName() const {
  return "com.mservice.momo.msg.RemoveSavedBillReply";
}


// ===================================================================

#ifndef _MSC_VER
const int Notification::kIdFieldNumber;
const int Notification::kPriorityFieldNumber;
const int Notification::kTypeFieldNumber;
const int Notification::kCaptionFieldNumber;
const int Notification::kBodyFieldNumber;
const int Notification::kTranIdFieldNumber;
const int Notification::kCmdIdFieldNumber;
const int Notification::kTimeFieldNumber;
const int Notification::kSenderFieldNumber;
const int Notification::kStatusFieldNumber;
const int Notification::kTranHisTypeFieldNumber;
const int Notification::kRefIdFieldNumber;
const int Notification::kBtnTitleFieldNumber;
const int Notification::kBtnStatusFieldNumber;
const int Notification::kHtmlBodyFieldNumber;
const int Notification::kExtraFieldNumber;
const int Notification::kCategoryFieldNumber;
#endif  // !_MSC_VER

Notification::Notification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Notification::InitAsDefaultInstance() {
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Notification::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0u;
  type_ = 0u;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tranid_ = GOOGLE_ULONGLONG(0);
  cmdid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  sender_ = 0u;
  status_ = 0u;
  tranhistype_ = 0u;
  refid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  btntitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  btnstatus_ = 0u;
  htmlbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notification::~Notification() {
  SharedDtor();
}

void Notification::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (refid_ != &::google::protobuf::internal::kEmptyString) {
    delete refid_;
  }
  if (btntitle_ != &::google::protobuf::internal::kEmptyString) {
    delete btntitle_;
  }
  if (htmlbody_ != &::google::protobuf::internal::kEmptyString) {
    delete htmlbody_;
  }
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Notification& Notification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Notification* Notification::default_instance_ = NULL;

Notification* Notification::New() const {
  return new Notification;
}

void Notification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    priority_ = 0u;
    type_ = 0u;
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    tranid_ = GOOGLE_ULONGLONG(0);
    cmdid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sender_ = 0u;
    status_ = 0u;
    tranhistype_ = 0u;
    if (has_refid()) {
      if (refid_ != &::google::protobuf::internal::kEmptyString) {
        refid_->clear();
      }
    }
    if (has_btntitle()) {
      if (btntitle_ != &::google::protobuf::internal::kEmptyString) {
        btntitle_->clear();
      }
    }
    btnstatus_ = 0u;
    if (has_htmlbody()) {
      if (htmlbody_ != &::google::protobuf::internal::kEmptyString) {
        htmlbody_->clear();
      }
    }
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::kEmptyString) {
        extra_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    category_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_caption;
        break;
      }

      // optional string caption = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body;
        break;
      }

      // optional string body = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tranId;
        break;
      }

      // optional uint64 tranId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tranid_)));
          set_has_tranid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cmdId;
        break;
      }

      // optional uint64 cmdId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sender;
        break;
      }

      // optional uint32 sender = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }

      // optional uint32 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tranHisType;
        break;
      }

      // optional uint32 tranHisType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranHisType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tranhistype_)));
          set_has_tranhistype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_refId;
        break;
      }

      // optional string refId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_btnTitle;
        break;
      }

      // optional string btnTitle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_btnTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btntitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_btnStatus;
        break;
      }

      // optional uint32 btnStatus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btnstatus_)));
          set_has_btnstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_htmlBody;
        break;
      }

      // optional string htmlBody = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_htmlBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htmlbody()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_extra;
        break;
      }

      // optional string extra = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_category;
        break;
      }

      // optional uint32 category = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint32 priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priority(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string caption = 4;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->caption(), output);
  }

  // optional string body = 5;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->body(), output);
  }

  // optional uint64 tranId = 6;
  if (has_tranid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tranid(), output);
  }

  // optional uint64 cmdId = 7;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cmdid(), output);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time(), output);
  }

  // optional uint32 sender = 9;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sender(), output);
  }

  // optional uint32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->status(), output);
  }

  // optional uint32 tranHisType = 11;
  if (has_tranhistype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tranhistype(), output);
  }

  // optional string refId = 12;
  if (has_refid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->refid(), output);
  }

  // optional string btnTitle = 13;
  if (has_btntitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->btntitle(), output);
  }

  // optional uint32 btnStatus = 14;
  if (has_btnstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->btnstatus(), output);
  }

  // optional string htmlBody = 15;
  if (has_htmlbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->htmlbody(), output);
  }

  // optional string extra = 16;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->extra(), output);
  }

  // optional uint32 category = 17;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->category(), output);
  }

}

int Notification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint32 priority = 2;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string caption = 4;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string body = 5;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional uint64 tranId = 6;
    if (has_tranid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tranid());
    }

    // optional uint64 cmdId = 7;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmdid());
    }

    // optional uint64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sender = 9;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender());
    }

    // optional uint32 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 tranHisType = 11;
    if (has_tranhistype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tranhistype());
    }

    // optional string refId = 12;
    if (has_refid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refid());
    }

    // optional string btnTitle = 13;
    if (has_btntitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btntitle());
    }

    // optional uint32 btnStatus = 14;
    if (has_btnstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btnstatus());
    }

    // optional string htmlBody = 15;
    if (has_htmlbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->htmlbody());
    }

    // optional string extra = 16;
    if (has_extra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 category = 17;
    if (has_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Notification*>(&from));
}

void Notification::MergeFrom(const Notification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_tranid()) {
      set_tranid(from.tranid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_tranhistype()) {
      set_tranhistype(from.tranhistype());
    }
    if (from.has_refid()) {
      set_refid(from.refid());
    }
    if (from.has_btntitle()) {
      set_btntitle(from.btntitle());
    }
    if (from.has_btnstatus()) {
      set_btnstatus(from.btnstatus());
    }
    if (from.has_htmlbody()) {
      set_htmlbody(from.htmlbody());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
  }
}

void Notification::CopyFrom(const Notification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {

  return true;
}

void Notification::Swap(Notification* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(priority_, other->priority_);
    std::swap(type_, other->type_);
    std::swap(caption_, other->caption_);
    std::swap(body_, other->body_);
    std::swap(tranid_, other->tranid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(time_, other->time_);
    std::swap(sender_, other->sender_);
    std::swap(status_, other->status_);
    std::swap(tranhistype_, other->tranhistype_);
    std::swap(refid_, other->refid_);
    std::swap(btntitle_, other->btntitle_);
    std::swap(btnstatus_, other->btnstatus_);
    std::swap(htmlbody_, other->htmlbody_);
    std::swap(extra_, other->extra_);
    std::swap(category_, other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Notification::GetTypeName() const {
  return "com.mservice.momo.msg.Notification";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateNotificationsStatus::kNotificationsFieldNumber;
const int UpdateNotificationsStatus::kFlagFieldNumber;
#endif  // !_MSC_VER

UpdateNotificationsStatus::UpdateNotificationsStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateNotificationsStatus::InitAsDefaultInstance() {
}

UpdateNotificationsStatus::UpdateNotificationsStatus(const UpdateNotificationsStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateNotificationsStatus::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateNotificationsStatus::~UpdateNotificationsStatus() {
  SharedDtor();
}

void UpdateNotificationsStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateNotificationsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateNotificationsStatus& UpdateNotificationsStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

UpdateNotificationsStatus* UpdateNotificationsStatus::default_instance_ = NULL;

UpdateNotificationsStatus* UpdateNotificationsStatus::New() const {
  return new UpdateNotificationsStatus;
}

void UpdateNotificationsStatus::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = 0u;
  }
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateNotificationsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.Notification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateNotificationsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.Notification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notifications(i), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

}

int UpdateNotificationsStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  // repeated .com.mservice.momo.msg.Notification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateNotificationsStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateNotificationsStatus*>(&from));
}

void UpdateNotificationsStatus::MergeFrom(const UpdateNotificationsStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
}

void UpdateNotificationsStatus::CopyFrom(const UpdateNotificationsStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNotificationsStatus::IsInitialized() const {

  return true;
}

void UpdateNotificationsStatus::Swap(UpdateNotificationsStatus* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateNotificationsStatus::GetTypeName() const {
  return "com.mservice.momo.msg.UpdateNotificationsStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateNotificationsStatusReply::kNotificationsFieldNumber;
const int UpdateNotificationsStatusReply::kFlagFieldNumber;
#endif  // !_MSC_VER

UpdateNotificationsStatusReply::UpdateNotificationsStatusReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateNotificationsStatusReply::InitAsDefaultInstance() {
}

UpdateNotificationsStatusReply::UpdateNotificationsStatusReply(const UpdateNotificationsStatusReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateNotificationsStatusReply::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateNotificationsStatusReply::~UpdateNotificationsStatusReply() {
  SharedDtor();
}

void UpdateNotificationsStatusReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateNotificationsStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateNotificationsStatusReply& UpdateNotificationsStatusReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

UpdateNotificationsStatusReply* UpdateNotificationsStatusReply::default_instance_ = NULL;

UpdateNotificationsStatusReply* UpdateNotificationsStatusReply::New() const {
  return new UpdateNotificationsStatusReply;
}

void UpdateNotificationsStatusReply::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = 0u;
  }
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateNotificationsStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.Notification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateNotificationsStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.Notification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notifications(i), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

}

int UpdateNotificationsStatusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  // repeated .com.mservice.momo.msg.Notification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateNotificationsStatusReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateNotificationsStatusReply*>(&from));
}

void UpdateNotificationsStatusReply::MergeFrom(const UpdateNotificationsStatusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
}

void UpdateNotificationsStatusReply::CopyFrom(const UpdateNotificationsStatusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNotificationsStatusReply::IsInitialized() const {

  return true;
}

void UpdateNotificationsStatusReply::Swap(UpdateNotificationsStatusReply* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateNotificationsStatusReply::GetTypeName() const {
  return "com.mservice.momo.msg.UpdateNotificationsStatusReply";
}


// ===================================================================

#ifndef _MSC_VER
const int NotificationSyncReply::kNotificationsFieldNumber;
#endif  // !_MSC_VER

NotificationSyncReply::NotificationSyncReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationSyncReply::InitAsDefaultInstance() {
}

NotificationSyncReply::NotificationSyncReply(const NotificationSyncReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationSyncReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationSyncReply::~NotificationSyncReply() {
  SharedDtor();
}

void NotificationSyncReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotificationSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationSyncReply& NotificationSyncReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

NotificationSyncReply* NotificationSyncReply::default_instance_ = NULL;

NotificationSyncReply* NotificationSyncReply::New() const {
  return new NotificationSyncReply;
}

void NotificationSyncReply::Clear() {
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.Notification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.Notification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notifications(i), output);
  }

}

int NotificationSyncReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.Notification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationSyncReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationSyncReply*>(&from));
}

void NotificationSyncReply::MergeFrom(const NotificationSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
}

void NotificationSyncReply::CopyFrom(const NotificationSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationSyncReply::IsInitialized() const {

  return true;
}

void NotificationSyncReply::Swap(NotificationSyncReply* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationSyncReply::GetTypeName() const {
  return "com.mservice.momo.msg.NotificationSyncReply";
}


// ===================================================================

#ifndef _MSC_VER
const int NotificationNew::kNotificationFieldNumber;
#endif  // !_MSC_VER

NotificationNew::NotificationNew()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationNew::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notification_ = const_cast< ::com::mservice::momo::msg::Notification*>(
      ::com::mservice::momo::msg::Notification::internal_default_instance());
#else
  notification_ = const_cast< ::com::mservice::momo::msg::Notification*>(&::com::mservice::momo::msg::Notification::default_instance());
#endif
}

NotificationNew::NotificationNew(const NotificationNew& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationNew::SharedCtor() {
  _cached_size_ = 0;
  notification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationNew::~NotificationNew() {
  SharedDtor();
}

void NotificationNew::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete notification_;
  }
}

void NotificationNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationNew& NotificationNew::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

NotificationNew* NotificationNew::default_instance_ = NULL;

NotificationNew* NotificationNew::New() const {
  return new NotificationNew;
}

void NotificationNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notification()) {
      if (notification_ != NULL) notification_->::com::mservice::momo::msg::Notification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mservice.momo.msg.Notification notification = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mservice.momo.msg.Notification notification = 1;
  if (has_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notification(), output);
  }

}

int NotificationNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mservice.momo.msg.Notification notification = 1;
    if (has_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notification());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationNew::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationNew*>(&from));
}

void NotificationNew::MergeFrom(const NotificationNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notification()) {
      mutable_notification()->::com::mservice::momo::msg::Notification::MergeFrom(from.notification());
    }
  }
}

void NotificationNew::CopyFrom(const NotificationNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationNew::IsInitialized() const {

  return true;
}

void NotificationNew::Swap(NotificationNew* other) {
  if (other != this) {
    std::swap(notification_, other->notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationNew::GetTypeName() const {
  return "com.mservice.momo.msg.NotificationNew";
}


// ===================================================================

#ifndef _MSC_VER
const int NotificationReceived::kNotificationIdFieldNumber;
const int NotificationReceived::kNotiFieldNumber;
#endif  // !_MSC_VER

NotificationReceived::NotificationReceived()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationReceived::InitAsDefaultInstance() {
}

NotificationReceived::NotificationReceived(const NotificationReceived& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationReceived::SharedCtor() {
  _cached_size_ = 0;
  notificationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationReceived::~NotificationReceived() {
  SharedDtor();
}

void NotificationReceived::SharedDtor() {
  if (notificationid_ != &::google::protobuf::internal::kEmptyString) {
    delete notificationid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotificationReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationReceived& NotificationReceived::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

NotificationReceived* NotificationReceived::default_instance_ = NULL;

NotificationReceived* NotificationReceived::New() const {
  return new NotificationReceived;
}

void NotificationReceived::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notificationid()) {
      if (notificationid_ != &::google::protobuf::internal::kEmptyString) {
        notificationid_->clear();
      }
    }
  }
  noti_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notificationId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notificationid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_noti;
        break;
      }

      // repeated .com.mservice.momo.msg.Notification noti = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noti:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_noti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_noti;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string notificationId = 1;
  if (has_notificationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notificationid(), output);
  }

  // repeated .com.mservice.momo.msg.Notification noti = 2;
  for (int i = 0; i < this->noti_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->noti(i), output);
  }

}

int NotificationReceived::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notificationId = 1;
    if (has_notificationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notificationid());
    }

  }
  // repeated .com.mservice.momo.msg.Notification noti = 2;
  total_size += 1 * this->noti_size();
  for (int i = 0; i < this->noti_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->noti(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationReceived::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationReceived*>(&from));
}

void NotificationReceived::MergeFrom(const NotificationReceived& from) {
  GOOGLE_CHECK_NE(&from, this);
  noti_.MergeFrom(from.noti_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notificationid()) {
      set_notificationid(from.notificationid());
    }
  }
}

void NotificationReceived::CopyFrom(const NotificationReceived& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationReceived::IsInitialized() const {

  return true;
}

void NotificationReceived::Swap(NotificationReceived* other) {
  if (other != this) {
    std::swap(notificationid_, other->notificationid_);
    noti_.Swap(&other->noti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationReceived::GetTypeName() const {
  return "com.mservice.momo.msg.NotificationReceived";
}


// ===================================================================

#ifndef _MSC_VER
const int GetNotification::kNotiIdFieldNumber;
#endif  // !_MSC_VER

GetNotification::GetNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetNotification::InitAsDefaultInstance() {
}

GetNotification::GetNotification(const GetNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetNotification::SharedCtor() {
  _cached_size_ = 0;
  notiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNotification::~GetNotification() {
  SharedDtor();
}

void GetNotification::SharedDtor() {
  if (notiid_ != &::google::protobuf::internal::kEmptyString) {
    delete notiid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetNotification& GetNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetNotification* GetNotification::default_instance_ = NULL;

GetNotification* GetNotification::New() const {
  return new GetNotification;
}

void GetNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notiid()) {
      if (notiid_ != &::google::protobuf::internal::kEmptyString) {
        notiid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notiId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notiid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string notiId = 1;
  if (has_notiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notiid(), output);
  }

}

int GetNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notiId = 1;
    if (has_notiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notiid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetNotification*>(&from));
}

void GetNotification::MergeFrom(const GetNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notiid()) {
      set_notiid(from.notiid());
    }
  }
}

void GetNotification::CopyFrom(const GetNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotification::IsInitialized() const {

  return true;
}

void GetNotification::Swap(GetNotification* other) {
  if (other != this) {
    std::swap(notiid_, other->notiid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetNotification::GetTypeName() const {
  return "com.mservice.momo.msg.GetNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int GetNotificationReply::kNotiFieldNumber;
#endif  // !_MSC_VER

GetNotificationReply::GetNotificationReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetNotificationReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  noti_ = const_cast< ::com::mservice::momo::msg::Notification*>(
      ::com::mservice::momo::msg::Notification::internal_default_instance());
#else
  noti_ = const_cast< ::com::mservice::momo::msg::Notification*>(&::com::mservice::momo::msg::Notification::default_instance());
#endif
}

GetNotificationReply::GetNotificationReply(const GetNotificationReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetNotificationReply::SharedCtor() {
  _cached_size_ = 0;
  noti_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNotificationReply::~GetNotificationReply() {
  SharedDtor();
}

void GetNotificationReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete noti_;
  }
}

void GetNotificationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetNotificationReply& GetNotificationReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetNotificationReply* GetNotificationReply::default_instance_ = NULL;

GetNotificationReply* GetNotificationReply::New() const {
  return new GetNotificationReply;
}

void GetNotificationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_noti()) {
      if (noti_ != NULL) noti_->::com::mservice::momo::msg::Notification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetNotificationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mservice.momo.msg.Notification noti = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noti()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNotificationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mservice.momo.msg.Notification noti = 1;
  if (has_noti()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->noti(), output);
  }

}

int GetNotificationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mservice.momo.msg.Notification noti = 1;
    if (has_noti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->noti());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNotificationReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetNotificationReply*>(&from));
}

void GetNotificationReply::MergeFrom(const GetNotificationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noti()) {
      mutable_noti()->::com::mservice::momo::msg::Notification::MergeFrom(from.noti());
    }
  }
}

void GetNotificationReply::CopyFrom(const GetNotificationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotificationReply::IsInitialized() const {

  return true;
}

void GetNotificationReply::Swap(GetNotificationReply* other) {
  if (other != this) {
    std::swap(noti_, other->noti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetNotificationReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetNotificationReply";
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar::kByteStringFieldNumber;
#endif  // !_MSC_VER

Avatar::Avatar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Avatar::InitAsDefaultInstance() {
}

Avatar::Avatar(const Avatar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Avatar::SharedCtor() {
  _cached_size_ = 0;
  byte_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar::~Avatar() {
  SharedDtor();
}

void Avatar::SharedDtor() {
  if (byte_string_ != &::google::protobuf::internal::kEmptyString) {
    delete byte_string_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Avatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Avatar& Avatar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Avatar* Avatar::default_instance_ = NULL;

Avatar* Avatar::New() const {
  return new Avatar;
}

void Avatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_byte_string()) {
      if (byte_string_ != &::google::protobuf::internal::kEmptyString) {
        byte_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Avatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string byte_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_byte_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Avatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string byte_string = 1;
  if (has_byte_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->byte_string(), output);
  }

}

int Avatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string byte_string = 1;
    if (has_byte_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->byte_string());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Avatar*>(&from));
}

void Avatar::MergeFrom(const Avatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_byte_string()) {
      set_byte_string(from.byte_string());
    }
  }
}

void Avatar::CopyFrom(const Avatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar::IsInitialized() const {

  return true;
}

void Avatar::Swap(Avatar* other) {
  if (other != this) {
    std::swap(byte_string_, other->byte_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Avatar::GetTypeName() const {
  return "com.mservice.momo.msg.Avatar";
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarReply::kResultFieldNumber;
#endif  // !_MSC_VER

AvatarReply::AvatarReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AvatarReply::InitAsDefaultInstance() {
}

AvatarReply::AvatarReply(const AvatarReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AvatarReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarReply::~AvatarReply() {
  SharedDtor();
}

void AvatarReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvatarReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvatarReply& AvatarReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

AvatarReply* AvatarReply::default_instance_ = NULL;

AvatarReply* AvatarReply::New() const {
  return new AvatarReply;
}

void AvatarReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AvatarReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvatarReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

}

int AvatarReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarReply*>(&from));
}

void AvatarReply::MergeFrom(const AvatarReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void AvatarReply::CopyFrom(const AvatarReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarReply::IsInitialized() const {

  return true;
}

void AvatarReply::Swap(AvatarReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AvatarReply::GetTypeName() const {
  return "com.mservice.momo.msg.AvatarReply";
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarUploadReply::kTokenFieldNumber;
#endif  // !_MSC_VER

AvatarUploadReply::AvatarUploadReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AvatarUploadReply::InitAsDefaultInstance() {
}

AvatarUploadReply::AvatarUploadReply(const AvatarUploadReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AvatarUploadReply::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarUploadReply::~AvatarUploadReply() {
  SharedDtor();
}

void AvatarUploadReply::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvatarUploadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvatarUploadReply& AvatarUploadReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

AvatarUploadReply* AvatarUploadReply::default_instance_ = NULL;

AvatarUploadReply* AvatarUploadReply::New() const {
  return new AvatarUploadReply;
}

void AvatarUploadReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AvatarUploadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvatarUploadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

}

int AvatarUploadReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarUploadReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarUploadReply*>(&from));
}

void AvatarUploadReply::MergeFrom(const AvatarUploadReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void AvatarUploadReply::CopyFrom(const AvatarUploadReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarUploadReply::IsInitialized() const {

  return true;
}

void AvatarUploadReply::Swap(AvatarUploadReply* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AvatarUploadReply::GetTypeName() const {
  return "com.mservice.momo.msg.AvatarUploadReply";
}


// ===================================================================

#ifndef _MSC_VER
const int GetDynamicConfig::kNameFieldNumber;
#endif  // !_MSC_VER

GetDynamicConfig::GetDynamicConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetDynamicConfig::InitAsDefaultInstance() {
}

GetDynamicConfig::GetDynamicConfig(const GetDynamicConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetDynamicConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDynamicConfig::~GetDynamicConfig() {
  SharedDtor();
}

void GetDynamicConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetDynamicConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetDynamicConfig& GetDynamicConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetDynamicConfig* GetDynamicConfig::default_instance_ = NULL;

GetDynamicConfig* GetDynamicConfig::New() const {
  return new GetDynamicConfig;
}

void GetDynamicConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetDynamicConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDynamicConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int GetDynamicConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDynamicConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetDynamicConfig*>(&from));
}

void GetDynamicConfig::MergeFrom(const GetDynamicConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void GetDynamicConfig::CopyFrom(const GetDynamicConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDynamicConfig::IsInitialized() const {

  return true;
}

void GetDynamicConfig::Swap(GetDynamicConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetDynamicConfig::GetTypeName() const {
  return "com.mservice.momo.msg.GetDynamicConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int GetDynamicConfigReply::kNameFieldNumber;
const int GetDynamicConfigReply::kValueFieldNumber;
#endif  // !_MSC_VER

GetDynamicConfigReply::GetDynamicConfigReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetDynamicConfigReply::InitAsDefaultInstance() {
}

GetDynamicConfigReply::GetDynamicConfigReply(const GetDynamicConfigReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetDynamicConfigReply::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDynamicConfigReply::~GetDynamicConfigReply() {
  SharedDtor();
}

void GetDynamicConfigReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetDynamicConfigReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetDynamicConfigReply& GetDynamicConfigReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetDynamicConfigReply* GetDynamicConfigReply::default_instance_ = NULL;

GetDynamicConfigReply* GetDynamicConfigReply::New() const {
  return new GetDynamicConfigReply;
}

void GetDynamicConfigReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetDynamicConfigReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDynamicConfigReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int GetDynamicConfigReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDynamicConfigReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetDynamicConfigReply*>(&from));
}

void GetDynamicConfigReply::MergeFrom(const GetDynamicConfigReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void GetDynamicConfigReply::CopyFrom(const GetDynamicConfigReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDynamicConfigReply::IsInitialized() const {

  return true;
}

void GetDynamicConfigReply::Swap(GetDynamicConfigReply* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetDynamicConfigReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetDynamicConfigReply";
}


// ===================================================================

#ifndef _MSC_VER
const int GetSmartLinkUrl::kAmountFieldNumber;
#endif  // !_MSC_VER

GetSmartLinkUrl::GetSmartLinkUrl()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetSmartLinkUrl::InitAsDefaultInstance() {
}

GetSmartLinkUrl::GetSmartLinkUrl(const GetSmartLinkUrl& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetSmartLinkUrl::SharedCtor() {
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSmartLinkUrl::~GetSmartLinkUrl() {
  SharedDtor();
}

void GetSmartLinkUrl::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetSmartLinkUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetSmartLinkUrl& GetSmartLinkUrl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetSmartLinkUrl* GetSmartLinkUrl::default_instance_ = NULL;

GetSmartLinkUrl* GetSmartLinkUrl::New() const {
  return new GetSmartLinkUrl;
}

void GetSmartLinkUrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetSmartLinkUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSmartLinkUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

}

int GetSmartLinkUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSmartLinkUrl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetSmartLinkUrl*>(&from));
}

void GetSmartLinkUrl::MergeFrom(const GetSmartLinkUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
}

void GetSmartLinkUrl::CopyFrom(const GetSmartLinkUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSmartLinkUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSmartLinkUrl::Swap(GetSmartLinkUrl* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetSmartLinkUrl::GetTypeName() const {
  return "com.mservice.momo.msg.GetSmartLinkUrl";
}


// ===================================================================

#ifndef _MSC_VER
const int GetSmartLinkUrlReply::kUrlFieldNumber;
#endif  // !_MSC_VER

GetSmartLinkUrlReply::GetSmartLinkUrlReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetSmartLinkUrlReply::InitAsDefaultInstance() {
}

GetSmartLinkUrlReply::GetSmartLinkUrlReply(const GetSmartLinkUrlReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetSmartLinkUrlReply::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSmartLinkUrlReply::~GetSmartLinkUrlReply() {
  SharedDtor();
}

void GetSmartLinkUrlReply::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetSmartLinkUrlReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetSmartLinkUrlReply& GetSmartLinkUrlReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetSmartLinkUrlReply* GetSmartLinkUrlReply::default_instance_ = NULL;

GetSmartLinkUrlReply* GetSmartLinkUrlReply::New() const {
  return new GetSmartLinkUrlReply;
}

void GetSmartLinkUrlReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetSmartLinkUrlReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSmartLinkUrlReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

}

int GetSmartLinkUrlReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSmartLinkUrlReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetSmartLinkUrlReply*>(&from));
}

void GetSmartLinkUrlReply::MergeFrom(const GetSmartLinkUrlReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
}

void GetSmartLinkUrlReply::CopyFrom(const GetSmartLinkUrlReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSmartLinkUrlReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSmartLinkUrlReply::Swap(GetSmartLinkUrlReply* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetSmartLinkUrlReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetSmartLinkUrlReply";
}


// ===================================================================

#ifndef _MSC_VER
const int StoreRateInfo::kStoreIdFieldNumber;
const int StoreRateInfo::kS1FieldNumber;
const int StoreRateInfo::kS2FieldNumber;
const int StoreRateInfo::kS3FieldNumber;
const int StoreRateInfo::kS4FieldNumber;
const int StoreRateInfo::kS5FieldNumber;
#endif  // !_MSC_VER

StoreRateInfo::StoreRateInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreRateInfo::InitAsDefaultInstance() {
}

StoreRateInfo::StoreRateInfo(const StoreRateInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreRateInfo::SharedCtor() {
  _cached_size_ = 0;
  storeid_ = 0;
  s1_ = 0;
  s2_ = 0;
  s3_ = 0;
  s4_ = 0;
  s5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRateInfo::~StoreRateInfo() {
  SharedDtor();
}

void StoreRateInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreRateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreRateInfo& StoreRateInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StoreRateInfo* StoreRateInfo::default_instance_ = NULL;

StoreRateInfo* StoreRateInfo::New() const {
  return new StoreRateInfo;
}

void StoreRateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storeid_ = 0;
    s1_ = 0;
    s2_ = 0;
    s3_ = 0;
    s4_ = 0;
    s5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoreRateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 storeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_s1;
        break;
      }

      // required int32 s1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_)));
          set_has_s1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_s2;
        break;
      }

      // required int32 s2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s2_)));
          set_has_s2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_s3;
        break;
      }

      // required int32 s3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_)));
          set_has_s3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_s4;
        break;
      }

      // required int32 s4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s4_)));
          set_has_s4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_s5;
        break;
      }

      // required int32 s5 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s5_)));
          set_has_s5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 storeId = 1;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storeid(), output);
  }

  // required int32 s1 = 2;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->s1(), output);
  }

  // required int32 s2 = 3;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->s2(), output);
  }

  // required int32 s3 = 4;
  if (has_s3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->s3(), output);
  }

  // required int32 s4 = 5;
  if (has_s4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->s4(), output);
  }

  // required int32 s5 = 6;
  if (has_s5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->s5(), output);
  }

}

int StoreRateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 storeId = 1;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storeid());
    }

    // required int32 s1 = 2;
    if (has_s1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1());
    }

    // required int32 s2 = 3;
    if (has_s2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s2());
    }

    // required int32 s3 = 4;
    if (has_s3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3());
    }

    // required int32 s4 = 5;
    if (has_s4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s4());
    }

    // required int32 s5 = 6;
    if (has_s5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s5());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreRateInfo*>(&from));
}

void StoreRateInfo::MergeFrom(const StoreRateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_s3()) {
      set_s3(from.s3());
    }
    if (from.has_s4()) {
      set_s4(from.s4());
    }
    if (from.has_s5()) {
      set_s5(from.s5());
    }
  }
}

void StoreRateInfo::CopyFrom(const StoreRateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void StoreRateInfo::Swap(StoreRateInfo* other) {
  if (other != this) {
    std::swap(storeid_, other->storeid_);
    std::swap(s1_, other->s1_);
    std::swap(s2_, other->s2_);
    std::swap(s3_, other->s3_);
    std::swap(s4_, other->s4_);
    std::swap(s5_, other->s5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreRateInfo::GetTypeName() const {
  return "com.mservice.momo.msg.StoreRateInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreRate::kStoreIdsFieldNumber;
#endif  // !_MSC_VER

GetStoreRate::GetStoreRate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetStoreRate::InitAsDefaultInstance() {
}

GetStoreRate::GetStoreRate(const GetStoreRate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreRate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreRate::~GetStoreRate() {
  SharedDtor();
}

void GetStoreRate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetStoreRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetStoreRate& GetStoreRate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetStoreRate* GetStoreRate::default_instance_ = NULL;

GetStoreRate* GetStoreRate::New() const {
  return new GetStoreRate;
}

void GetStoreRate::Clear() {
  storeids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetStoreRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 storeIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_storeids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storeids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_storeIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 storeIds = 1;
  for (int i = 0; i < this->storeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->storeids(i), output);
  }

}

int GetStoreRate::ByteSize() const {
  int total_size = 0;

  // repeated int32 storeIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->storeids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storeids(i));
    }
    total_size += 1 * this->storeids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreRate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetStoreRate*>(&from));
}

void GetStoreRate::MergeFrom(const GetStoreRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  storeids_.MergeFrom(from.storeids_);
}

void GetStoreRate::CopyFrom(const GetStoreRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreRate::IsInitialized() const {

  return true;
}

void GetStoreRate::Swap(GetStoreRate* other) {
  if (other != this) {
    storeids_.Swap(&other->storeids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetStoreRate::GetTypeName() const {
  return "com.mservice.momo.msg.GetStoreRate";
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreRateReply::kRateInfosFieldNumber;
#endif  // !_MSC_VER

GetStoreRateReply::GetStoreRateReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetStoreRateReply::InitAsDefaultInstance() {
}

GetStoreRateReply::GetStoreRateReply(const GetStoreRateReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreRateReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreRateReply::~GetStoreRateReply() {
  SharedDtor();
}

void GetStoreRateReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetStoreRateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetStoreRateReply& GetStoreRateReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetStoreRateReply* GetStoreRateReply::default_instance_ = NULL;

GetStoreRateReply* GetStoreRateReply::New() const {
  return new GetStoreRateReply;
}

void GetStoreRateReply::Clear() {
  rateinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetStoreRateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.StoreRateInfo rateInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rateInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreRateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.StoreRateInfo rateInfos = 1;
  for (int i = 0; i < this->rateinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rateinfos(i), output);
  }

}

int GetStoreRateReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.StoreRateInfo rateInfos = 1;
  total_size += 1 * this->rateinfos_size();
  for (int i = 0; i < this->rateinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rateinfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreRateReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetStoreRateReply*>(&from));
}

void GetStoreRateReply::MergeFrom(const GetStoreRateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  rateinfos_.MergeFrom(from.rateinfos_);
}

void GetStoreRateReply::CopyFrom(const GetStoreRateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreRateReply::IsInitialized() const {

  for (int i = 0; i < rateinfos_size(); i++) {
    if (!this->rateinfos(i).IsInitialized()) return false;
  }
  return true;
}

void GetStoreRateReply::Swap(GetStoreRateReply* other) {
  if (other != this) {
    rateinfos_.Swap(&other->rateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetStoreRateReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetStoreRateReply";
}


// ===================================================================

bool StoreComment_CommentStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StoreComment_CommentStatus StoreComment::STATUS_NEW;
const StoreComment_CommentStatus StoreComment::STATUS_ACCEPTED;
const StoreComment_CommentStatus StoreComment::STATUS_REJECTED;
const StoreComment_CommentStatus StoreComment::CommentStatus_MIN;
const StoreComment_CommentStatus StoreComment::CommentStatus_MAX;
const int StoreComment::CommentStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StoreComment::kCommentIdFieldNumber;
const int StoreComment::kStoreIdFieldNumber;
const int StoreComment::kCommenterPhoneFieldNumber;
const int StoreComment::kCommenterNameFieldNumber;
const int StoreComment::kContentFieldNumber;
const int StoreComment::kDateFieldNumber;
const int StoreComment::kRateStarFieldNumber;
const int StoreComment::kStatusFieldNumber;
#endif  // !_MSC_VER

StoreComment::StoreComment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreComment::InitAsDefaultInstance() {
}

StoreComment::StoreComment(const StoreComment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreComment::SharedCtor() {
  _cached_size_ = 0;
  commentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storeid_ = 0;
  commenterphone_ = 0;
  commentername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = GOOGLE_LONGLONG(0);
  ratestar_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreComment::~StoreComment() {
  SharedDtor();
}

void StoreComment::SharedDtor() {
  if (commentid_ != &::google::protobuf::internal::kEmptyString) {
    delete commentid_;
  }
  if (commentername_ != &::google::protobuf::internal::kEmptyString) {
    delete commentername_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreComment& StoreComment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StoreComment* StoreComment::default_instance_ = NULL;

StoreComment* StoreComment::New() const {
  return new StoreComment;
}

void StoreComment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commentid()) {
      if (commentid_ != &::google::protobuf::internal::kEmptyString) {
        commentid_->clear();
      }
    }
    storeid_ = 0;
    commenterphone_ = 0;
    if (has_commentername()) {
      if (commentername_ != &::google::protobuf::internal::kEmptyString) {
        commentername_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    date_ = GOOGLE_LONGLONG(0);
    ratestar_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoreComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string commentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storeId;
        break;
      }

      // required int32 storeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commenterPhone;
        break;
      }

      // required int32 commenterPhone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commenterPhone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commenterphone_)));
          set_has_commenterphone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commenterName;
        break;
      }

      // required string commenterName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commenterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commentername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // required string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_date;
        break;
      }

      // required int64 date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rateStar;
        break;
      }

      // required int32 rateStar = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rateStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratestar_)));
          set_has_ratestar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // required int32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string commentId = 1;
  if (has_commentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->commentid(), output);
  }

  // required int32 storeId = 2;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->storeid(), output);
  }

  // required int32 commenterPhone = 3;
  if (has_commenterphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->commenterphone(), output);
  }

  // required string commenterName = 4;
  if (has_commentername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->commentername(), output);
  }

  // required string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  // required int64 date = 6;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->date(), output);
  }

  // required int32 rateStar = 7;
  if (has_ratestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ratestar(), output);
  }

  // required int32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }

}

int StoreComment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string commentId = 1;
    if (has_commentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commentid());
    }

    // required int32 storeId = 2;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storeid());
    }

    // required int32 commenterPhone = 3;
    if (has_commenterphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commenterphone());
    }

    // required string commenterName = 4;
    if (has_commentername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commentername());
    }

    // required string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required int64 date = 6;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

    // required int32 rateStar = 7;
    if (has_ratestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratestar());
    }

    // required int32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreComment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreComment*>(&from));
}

void StoreComment::MergeFrom(const StoreComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commentid()) {
      set_commentid(from.commentid());
    }
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
    if (from.has_commenterphone()) {
      set_commenterphone(from.commenterphone());
    }
    if (from.has_commentername()) {
      set_commentername(from.commentername());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_ratestar()) {
      set_ratestar(from.ratestar());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void StoreComment::CopyFrom(const StoreComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreComment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void StoreComment::Swap(StoreComment* other) {
  if (other != this) {
    std::swap(commentid_, other->commentid_);
    std::swap(storeid_, other->storeid_);
    std::swap(commenterphone_, other->commenterphone_);
    std::swap(commentername_, other->commentername_);
    std::swap(content_, other->content_);
    std::swap(date_, other->date_);
    std::swap(ratestar_, other->ratestar_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreComment::GetTypeName() const {
  return "com.mservice.momo.msg.StoreComment";
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreCommentPage::kStoreIdFieldNumber;
const int GetStoreCommentPage::kCommenterPhoneFieldNumber;
const int GetStoreCommentPage::kLowestTimeFieldNumber;
#endif  // !_MSC_VER

GetStoreCommentPage::GetStoreCommentPage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetStoreCommentPage::InitAsDefaultInstance() {
}

GetStoreCommentPage::GetStoreCommentPage(const GetStoreCommentPage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreCommentPage::SharedCtor() {
  _cached_size_ = 0;
  storeid_ = 0;
  commenterphone_ = 0;
  lowesttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreCommentPage::~GetStoreCommentPage() {
  SharedDtor();
}

void GetStoreCommentPage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetStoreCommentPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetStoreCommentPage& GetStoreCommentPage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetStoreCommentPage* GetStoreCommentPage::default_instance_ = NULL;

GetStoreCommentPage* GetStoreCommentPage::New() const {
  return new GetStoreCommentPage;
}

void GetStoreCommentPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storeid_ = 0;
    commenterphone_ = 0;
    lowesttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetStoreCommentPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 storeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_commenterPhone;
        break;
      }

      // required int32 commenterPhone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commenterPhone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commenterphone_)));
          set_has_commenterphone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lowestTime;
        break;
      }

      // required int64 lowestTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowesttime_)));
          set_has_lowesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreCommentPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 storeId = 1;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storeid(), output);
  }

  // required int32 commenterPhone = 2;
  if (has_commenterphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->commenterphone(), output);
  }

  // required int64 lowestTime = 3;
  if (has_lowesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lowesttime(), output);
  }

}

int GetStoreCommentPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 storeId = 1;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storeid());
    }

    // required int32 commenterPhone = 2;
    if (has_commenterphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commenterphone());
    }

    // required int64 lowestTime = 3;
    if (has_lowesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowesttime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreCommentPage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetStoreCommentPage*>(&from));
}

void GetStoreCommentPage::MergeFrom(const GetStoreCommentPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
    if (from.has_commenterphone()) {
      set_commenterphone(from.commenterphone());
    }
    if (from.has_lowesttime()) {
      set_lowesttime(from.lowesttime());
    }
  }
}

void GetStoreCommentPage::CopyFrom(const GetStoreCommentPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreCommentPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetStoreCommentPage::Swap(GetStoreCommentPage* other) {
  if (other != this) {
    std::swap(storeid_, other->storeid_);
    std::swap(commenterphone_, other->commenterphone_);
    std::swap(lowesttime_, other->lowesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetStoreCommentPage::GetTypeName() const {
  return "com.mservice.momo.msg.GetStoreCommentPage";
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreCommentPageReply::kCommentsFieldNumber;
#endif  // !_MSC_VER

GetStoreCommentPageReply::GetStoreCommentPageReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetStoreCommentPageReply::InitAsDefaultInstance() {
}

GetStoreCommentPageReply::GetStoreCommentPageReply(const GetStoreCommentPageReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreCommentPageReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreCommentPageReply::~GetStoreCommentPageReply() {
  SharedDtor();
}

void GetStoreCommentPageReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetStoreCommentPageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetStoreCommentPageReply& GetStoreCommentPageReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetStoreCommentPageReply* GetStoreCommentPageReply::default_instance_ = NULL;

GetStoreCommentPageReply* GetStoreCommentPageReply::New() const {
  return new GetStoreCommentPageReply;
}

void GetStoreCommentPageReply::Clear() {
  comments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetStoreCommentPageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.StoreComment comments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreCommentPageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.StoreComment comments = 3;
  for (int i = 0; i < this->comments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->comments(i), output);
  }

}

int GetStoreCommentPageReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.StoreComment comments = 3;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreCommentPageReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetStoreCommentPageReply*>(&from));
}

void GetStoreCommentPageReply::MergeFrom(const GetStoreCommentPageReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  comments_.MergeFrom(from.comments_);
}

void GetStoreCommentPageReply::CopyFrom(const GetStoreCommentPageReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreCommentPageReply::IsInitialized() const {

  for (int i = 0; i < comments_size(); i++) {
    if (!this->comments(i).IsInitialized()) return false;
  }
  return true;
}

void GetStoreCommentPageReply::Swap(GetStoreCommentPageReply* other) {
  if (other != this) {
    comments_.Swap(&other->comments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetStoreCommentPageReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetStoreCommentPageReply";
}


// ===================================================================

bool StoreCommentCrud_CrudCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StoreCommentCrud_CrudCmd StoreCommentCrud::CMD_CREATE;
const StoreCommentCrud_CrudCmd StoreCommentCrud::CMD_READ;
const StoreCommentCrud_CrudCmd StoreCommentCrud::CMD_UPDATE;
const StoreCommentCrud_CrudCmd StoreCommentCrud::CMD_DELETE;
const StoreCommentCrud_CrudCmd StoreCommentCrud::CrudCmd_MIN;
const StoreCommentCrud_CrudCmd StoreCommentCrud::CrudCmd_MAX;
const int StoreCommentCrud::CrudCmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StoreCommentCrud::kCmdFieldNumber;
const int StoreCommentCrud::kCommentFieldNumber;
#endif  // !_MSC_VER

StoreCommentCrud::StoreCommentCrud()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreCommentCrud::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comment_ = const_cast< ::com::mservice::momo::msg::StoreComment*>(
      ::com::mservice::momo::msg::StoreComment::internal_default_instance());
#else
  comment_ = const_cast< ::com::mservice::momo::msg::StoreComment*>(&::com::mservice::momo::msg::StoreComment::default_instance());
#endif
}

StoreCommentCrud::StoreCommentCrud(const StoreCommentCrud& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreCommentCrud::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreCommentCrud::~StoreCommentCrud() {
  SharedDtor();
}

void StoreCommentCrud::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comment_;
  }
}

void StoreCommentCrud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreCommentCrud& StoreCommentCrud::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StoreCommentCrud* StoreCommentCrud::default_instance_ = NULL;

StoreCommentCrud* StoreCommentCrud::New() const {
  return new StoreCommentCrud;
}

void StoreCommentCrud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_comment()) {
      if (comment_ != NULL) comment_->::com::mservice::momo::msg::StoreComment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoreCommentCrud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment;
        break;
      }

      // required .com.mservice.momo.msg.StoreComment comment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreCommentCrud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required .com.mservice.momo.msg.StoreComment comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->comment(), output);
  }

}

int StoreCommentCrud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required .com.mservice.momo.msg.StoreComment comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreCommentCrud::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreCommentCrud*>(&from));
}

void StoreCommentCrud::MergeFrom(const StoreCommentCrud& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_comment()) {
      mutable_comment()->::com::mservice::momo::msg::StoreComment::MergeFrom(from.comment());
    }
  }
}

void StoreCommentCrud::CopyFrom(const StoreCommentCrud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCommentCrud::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_comment()) {
    if (!this->comment().IsInitialized()) return false;
  }
  return true;
}

void StoreCommentCrud::Swap(StoreCommentCrud* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreCommentCrud::GetTypeName() const {
  return "com.mservice.momo.msg.StoreCommentCrud";
}


// ===================================================================

#ifndef _MSC_VER
const int StoreCommentCrudReply::kErrorFieldNumber;
const int StoreCommentCrudReply::kDescFieldNumber;
const int StoreCommentCrudReply::kCommentIdFieldNumber;
#endif  // !_MSC_VER

StoreCommentCrudReply::StoreCommentCrudReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreCommentCrudReply::InitAsDefaultInstance() {
}

StoreCommentCrudReply::StoreCommentCrudReply(const StoreCommentCrudReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreCommentCrudReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreCommentCrudReply::~StoreCommentCrudReply() {
  SharedDtor();
}

void StoreCommentCrudReply::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (commentid_ != &::google::protobuf::internal::kEmptyString) {
    delete commentid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreCommentCrudReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreCommentCrudReply& StoreCommentCrudReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StoreCommentCrudReply* StoreCommentCrudReply::default_instance_ = NULL;

StoreCommentCrudReply* StoreCommentCrudReply::New() const {
  return new StoreCommentCrudReply;
}

void StoreCommentCrudReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_commentid()) {
      if (commentid_ != &::google::protobuf::internal::kEmptyString) {
        commentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoreCommentCrudReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commentId;
        break;
      }

      // required string commentId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreCommentCrudReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // required string commentId = 3;
  if (has_commentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->commentid(), output);
  }

}

int StoreCommentCrudReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string commentId = 3;
    if (has_commentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commentid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreCommentCrudReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreCommentCrudReply*>(&from));
}

void StoreCommentCrudReply::MergeFrom(const StoreCommentCrudReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_commentid()) {
      set_commentid(from.commentid());
    }
  }
}

void StoreCommentCrudReply::CopyFrom(const StoreCommentCrudReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCommentCrudReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StoreCommentCrudReply::Swap(StoreCommentCrudReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(desc_, other->desc_);
    std::swap(commentid_, other->commentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreCommentCrudReply::GetTypeName() const {
  return "com.mservice.momo.msg.StoreCommentCrudReply";
}


// ===================================================================

#ifndef _MSC_VER
const int StoreWarningType::kIdFieldNumber;
const int StoreWarningType::kNameFieldNumber;
#endif  // !_MSC_VER

StoreWarningType::StoreWarningType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoreWarningType::InitAsDefaultInstance() {
}

StoreWarningType::StoreWarningType(const StoreWarningType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoreWarningType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreWarningType::~StoreWarningType() {
  SharedDtor();
}

void StoreWarningType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreWarningType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreWarningType& StoreWarningType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

StoreWarningType* StoreWarningType::default_instance_ = NULL;

StoreWarningType* StoreWarningType::New() const {
  return new StoreWarningType;
}

void StoreWarningType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoreWarningType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreWarningType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

}

int StoreWarningType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreWarningType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreWarningType*>(&from));
}

void StoreWarningType::MergeFrom(const StoreWarningType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void StoreWarningType::CopyFrom(const StoreWarningType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreWarningType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StoreWarningType::Swap(StoreWarningType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoreWarningType::GetTypeName() const {
  return "com.mservice.momo.msg.StoreWarningType";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStoreWarningType::GetStoreWarningType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetStoreWarningType::InitAsDefaultInstance() {
}

GetStoreWarningType::GetStoreWarningType(const GetStoreWarningType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreWarningType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreWarningType::~GetStoreWarningType() {
  SharedDtor();
}

void GetStoreWarningType::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetStoreWarningType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetStoreWarningType& GetStoreWarningType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetStoreWarningType* GetStoreWarningType::default_instance_ = NULL;

GetStoreWarningType* GetStoreWarningType::New() const {
  return new GetStoreWarningType;
}

void GetStoreWarningType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetStoreWarningType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void GetStoreWarningType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int GetStoreWarningType::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreWarningType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetStoreWarningType*>(&from));
}

void GetStoreWarningType::MergeFrom(const GetStoreWarningType& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void GetStoreWarningType::CopyFrom(const GetStoreWarningType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreWarningType::IsInitialized() const {

  return true;
}

void GetStoreWarningType::Swap(GetStoreWarningType* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetStoreWarningType::GetTypeName() const {
  return "com.mservice.momo.msg.GetStoreWarningType";
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreWarningTypeReply::kTypesFieldNumber;
#endif  // !_MSC_VER

GetStoreWarningTypeReply::GetStoreWarningTypeReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetStoreWarningTypeReply::InitAsDefaultInstance() {
}

GetStoreWarningTypeReply::GetStoreWarningTypeReply(const GetStoreWarningTypeReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreWarningTypeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreWarningTypeReply::~GetStoreWarningTypeReply() {
  SharedDtor();
}

void GetStoreWarningTypeReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetStoreWarningTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetStoreWarningTypeReply& GetStoreWarningTypeReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetStoreWarningTypeReply* GetStoreWarningTypeReply::default_instance_ = NULL;

GetStoreWarningTypeReply* GetStoreWarningTypeReply::New() const {
  return new GetStoreWarningTypeReply;
}

void GetStoreWarningTypeReply::Clear() {
  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetStoreWarningTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.StoreWarningType types = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreWarningTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.StoreWarningType types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->types(i), output);
  }

}

int GetStoreWarningTypeReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.StoreWarningType types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreWarningTypeReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetStoreWarningTypeReply*>(&from));
}

void GetStoreWarningTypeReply::MergeFrom(const GetStoreWarningTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
}

void GetStoreWarningTypeReply::CopyFrom(const GetStoreWarningTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreWarningTypeReply::IsInitialized() const {

  for (int i = 0; i < types_size(); i++) {
    if (!this->types(i).IsInitialized()) return false;
  }
  return true;
}

void GetStoreWarningTypeReply::Swap(GetStoreWarningTypeReply* other) {
  if (other != this) {
    types_.Swap(&other->types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetStoreWarningTypeReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetStoreWarningTypeReply";
}


// ===================================================================

#ifndef _MSC_VER
const int WarnStore::kStoreIdFieldNumber;
const int WarnStore::kWarningTypeFieldNumber;
#endif  // !_MSC_VER

WarnStore::WarnStore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarnStore::InitAsDefaultInstance() {
}

WarnStore::WarnStore(const WarnStore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarnStore::SharedCtor() {
  _cached_size_ = 0;
  storeid_ = 0;
  warningtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarnStore::~WarnStore() {
  SharedDtor();
}

void WarnStore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarnStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarnStore& WarnStore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

WarnStore* WarnStore::default_instance_ = NULL;

WarnStore* WarnStore::New() const {
  return new WarnStore;
}

void WarnStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storeid_ = 0;
    warningtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarnStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 storeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_warningType;
        break;
      }

      // required int32 warningType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warningType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warningtype_)));
          set_has_warningtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarnStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 storeId = 1;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storeid(), output);
  }

  // required int32 warningType = 3;
  if (has_warningtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->warningtype(), output);
  }

}

int WarnStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 storeId = 1;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storeid());
    }

    // required int32 warningType = 3;
    if (has_warningtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warningtype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarnStore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarnStore*>(&from));
}

void WarnStore::MergeFrom(const WarnStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
    if (from.has_warningtype()) {
      set_warningtype(from.warningtype());
    }
  }
}

void WarnStore::CopyFrom(const WarnStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WarnStore::Swap(WarnStore* other) {
  if (other != this) {
    std::swap(storeid_, other->storeid_);
    std::swap(warningtype_, other->warningtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarnStore::GetTypeName() const {
  return "com.mservice.momo.msg.WarnStore";
}


// ===================================================================

#ifndef _MSC_VER
const int WarnStoreReply::kErrorFieldNumber;
const int WarnStoreReply::kDescFieldNumber;
#endif  // !_MSC_VER

WarnStoreReply::WarnStoreReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarnStoreReply::InitAsDefaultInstance() {
}

WarnStoreReply::WarnStoreReply(const WarnStoreReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarnStoreReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarnStoreReply::~WarnStoreReply() {
  SharedDtor();
}

void WarnStoreReply::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarnStoreReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarnStoreReply& WarnStoreReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

WarnStoreReply* WarnStoreReply::default_instance_ = NULL;

WarnStoreReply* WarnStoreReply::New() const {
  return new WarnStoreReply;
}

void WarnStoreReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarnStoreReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarnStoreReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

}

int WarnStoreReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarnStoreReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarnStoreReply*>(&from));
}

void WarnStoreReply::MergeFrom(const WarnStoreReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
}

void WarnStoreReply::CopyFrom(const WarnStoreReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarnStoreReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WarnStoreReply::Swap(WarnStoreReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarnStoreReply::GetTypeName() const {
  return "com.mservice.momo.msg.WarnStoreReply";
}


// ===================================================================

bool GiftType_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GiftType_Status GiftType::ACTIVE;
const GiftType_Status GiftType::INACTIVE;
const GiftType_Status GiftType::DELETED;
const GiftType_Status GiftType::TIMED;
const GiftType_Status GiftType::Status_MIN;
const GiftType_Status GiftType::Status_MAX;
const int GiftType::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GiftType::kIdFieldNumber;
const int GiftType::kServiceIdFieldNumber;
const int GiftType::kNameFieldNumber;
const int GiftType::kDescFieldNumber;
const int GiftType::kIconFieldNumber;
const int GiftType::kImageFieldNumber;
const int GiftType::kTransferFieldNumber;
const int GiftType::kStatusFieldNumber;
const int GiftType::kModifyDateFieldNumber;
const int GiftType::kIsNewFieldNumber;
const int GiftType::kPriceFieldNumber;
const int GiftType::kPolicyFieldNumber;
#endif  // !_MSC_VER

GiftType::GiftType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftType::InitAsDefaultInstance() {
}

GiftType::GiftType(const GiftType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftType::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transfer_ = false;
  status_ = 0u;
  modifydate_ = GOOGLE_ULONGLONG(0);
  isnew_ = false;
  policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftType::~GiftType() {
  SharedDtor();
}

void GiftType::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (serviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete serviceid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (policy_ != &::google::protobuf::internal::kEmptyString) {
    delete policy_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiftType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftType& GiftType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GiftType* GiftType::default_instance_ = NULL;

GiftType* GiftType::New() const {
  return new GiftType;
}

void GiftType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::kEmptyString) {
        serviceid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    transfer_ = false;
    status_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modifydate_ = GOOGLE_ULONGLONG(0);
    isnew_ = false;
    if (has_policy()) {
      if (policy_ != &::google::protobuf::internal::kEmptyString) {
        policy_->clear();
      }
    }
  }
  price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serviceId;
        break;
      }

      // optional string serviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // optional string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_image;
        break;
      }

      // optional string image = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transfer;
        break;
      }

      // optional bool transfer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_)));
          set_has_transfer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_modifyDate;
        break;
      }

      // optional uint64 modifyDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifyDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modifydate_)));
          set_has_modifydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isNew;
        break;
      }

      // optional bool isNew = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_price;
        break;
      }

      // repeated int64 price = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 88, input, this->mutable_price())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_price())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_price;
        if (input->ExpectTag(98)) goto parse_policy;
        break;
      }

      // optional string policy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string serviceId = 2;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serviceid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }

  // optional string image = 6;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->image(), output);
  }

  // optional bool transfer = 7;
  if (has_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->transfer(), output);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional uint64 modifyDate = 9;
  if (has_modifydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->modifydate(), output);
  }

  // optional bool isNew = 10;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isnew(), output);
  }

  // repeated int64 price = 11;
  for (int i = 0; i < this->price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      11, this->price(i), output);
  }

  // optional string policy = 12;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->policy(), output);
  }

}

int GiftType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string serviceId = 2;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string image = 6;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional bool transfer = 7;
    if (has_transfer()) {
      total_size += 1 + 1;
    }

    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 modifyDate = 9;
    if (has_modifydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->modifydate());
    }

    // optional bool isNew = 10;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // optional string policy = 12;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

  }
  // repeated int64 price = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->price_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->price(i));
    }
    total_size += 1 * this->price_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftType*>(&from));
}

void GiftType::MergeFrom(const GiftType& from) {
  GOOGLE_CHECK_NE(&from, this);
  price_.MergeFrom(from.price_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_transfer()) {
      set_transfer(from.transfer());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modifydate()) {
      set_modifydate(from.modifydate());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_policy()) {
      set_policy(from.policy());
    }
  }
}

void GiftType::CopyFrom(const GiftType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftType::IsInitialized() const {

  return true;
}

void GiftType::Swap(GiftType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(image_, other->image_);
    std::swap(transfer_, other->transfer_);
    std::swap(status_, other->status_);
    std::swap(modifydate_, other->modifydate_);
    std::swap(isnew_, other->isnew_);
    price_.Swap(&other->price_);
    std::swap(policy_, other->policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftType::GetTypeName() const {
  return "com.mservice.momo.msg.GiftType";
}


// ===================================================================

bool Gift_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Gift_Status Gift::NEW;
const Gift_Status Gift::VIEWED;
const Gift_Status Gift::USED;
const Gift_Status Gift::TIMED;
const Gift_Status Gift::Status_MIN;
const Gift_Status Gift::Status_MAX;
const int Gift::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Gift::kIdFieldNumber;
const int Gift::kCodeFieldNumber;
const int Gift::kAmountFieldNumber;
const int Gift::kDescFieldNumber;
const int Gift::kTypeIdFieldNumber;
const int Gift::kStartDateFieldNumber;
const int Gift::kEndDateFieldNumber;
const int Gift::kModifyDateFieldNumber;
const int Gift::kStatusFieldNumber;
const int Gift::kExtraFieldNumber;
#endif  // !_MSC_VER

Gift::Gift()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Gift::InitAsDefaultInstance() {
}

Gift::Gift(const Gift& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Gift::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeid__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startdate_ = GOOGLE_ULONGLONG(0);
  enddate_ = GOOGLE_ULONGLONG(0);
  modifydate_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gift::~Gift() {
  SharedDtor();
}

void Gift::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (typeid__ != &::google::protobuf::internal::kEmptyString) {
    delete typeid__;
  }
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Gift& Gift::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

Gift* Gift::default_instance_ = NULL;

Gift* Gift::New() const {
  return new Gift;
}

void Gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_typeid_()) {
      if (typeid__ != &::google::protobuf::internal::kEmptyString) {
        typeid__->clear();
      }
    }
    startdate_ = GOOGLE_ULONGLONG(0);
    enddate_ = GOOGLE_ULONGLONG(0);
    modifydate_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::kEmptyString) {
        extra_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_typeId;
        break;
      }

      // optional string typeId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeid_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_startDate;
        break;
      }

      // optional uint64 startDate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_endDate;
        break;
      }

      // optional uint64 endDate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enddate_)));
          set_has_enddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_modifyDate;
        break;
      }

      // optional uint64 modifyDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifyDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modifydate_)));
          set_has_modifydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }

      // optional int32 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_extra;
        break;
      }

      // optional string extra = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }

  // optional string typeId = 6;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->typeid_(), output);
  }

  // optional uint64 startDate = 7;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->startdate(), output);
  }

  // optional uint64 endDate = 8;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->enddate(), output);
  }

  // optional uint64 modifyDate = 9;
  if (has_modifydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->modifydate(), output);
  }

  // optional int32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->status(), output);
  }

  // optional string extra = 11;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->extra(), output);
  }

}

int Gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string typeId = 6;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeid_());
    }

    // optional uint64 startDate = 7;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startdate());
    }

    // optional uint64 endDate = 8;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enddate());
    }

    // optional uint64 modifyDate = 9;
    if (has_modifydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->modifydate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string extra = 11;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gift::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Gift*>(&from));
}

void Gift::MergeFrom(const Gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_modifydate()) {
      set_modifydate(from.modifydate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
}

void Gift::CopyFrom(const Gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gift::IsInitialized() const {

  return true;
}

void Gift::Swap(Gift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(amount_, other->amount_);
    std::swap(desc_, other->desc_);
    std::swap(typeid__, other->typeid__);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(modifydate_, other->modifydate_);
    std::swap(status_, other->status_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Gift::GetTypeName() const {
  return "com.mservice.momo.msg.Gift";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftClaim::kCodeFieldNumber;
#endif  // !_MSC_VER

GiftClaim::GiftClaim()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftClaim::InitAsDefaultInstance() {
}

GiftClaim::GiftClaim(const GiftClaim& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftClaim::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftClaim::~GiftClaim() {
  SharedDtor();
}

void GiftClaim::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiftClaim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftClaim& GiftClaim::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GiftClaim* GiftClaim::default_instance_ = NULL;

GiftClaim* GiftClaim::New() const {
  return new GiftClaim;
}

void GiftClaim::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftClaim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftClaim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

}

int GiftClaim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftClaim::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftClaim*>(&from));
}

void GiftClaim::MergeFrom(const GiftClaim& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void GiftClaim::CopyFrom(const GiftClaim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftClaim::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GiftClaim::Swap(GiftClaim* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftClaim::GetTypeName() const {
  return "com.mservice.momo.msg.GiftClaim";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftClaimReply::kErrorFieldNumber;
const int GiftClaimReply::kPointFieldNumber;
const int GiftClaimReply::kGiftFieldNumber;
#endif  // !_MSC_VER

GiftClaimReply::GiftClaimReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftClaimReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gift_ = const_cast< ::com::mservice::momo::msg::Gift*>(
      ::com::mservice::momo::msg::Gift::internal_default_instance());
#else
  gift_ = const_cast< ::com::mservice::momo::msg::Gift*>(&::com::mservice::momo::msg::Gift::default_instance());
#endif
}

GiftClaimReply::GiftClaimReply(const GiftClaimReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftClaimReply::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  point_ = GOOGLE_LONGLONG(0);
  gift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftClaimReply::~GiftClaimReply() {
  SharedDtor();
}

void GiftClaimReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gift_;
  }
}

void GiftClaimReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftClaimReply& GiftClaimReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GiftClaimReply* GiftClaimReply::default_instance_ = NULL;

GiftClaimReply* GiftClaimReply::New() const {
  return new GiftClaimReply;
}

void GiftClaimReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    point_ = GOOGLE_LONGLONG(0);
    if (has_gift()) {
      if (gift_ != NULL) gift_->::com::mservice::momo::msg::Gift::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftClaimReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional int64 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gift;
        break;
      }

      // optional .com.mservice.momo.msg.Gift gift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftClaimReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int64 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->point(), output);
  }

  // optional .com.mservice.momo.msg.Gift gift = 3;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gift(), output);
  }

}

int GiftClaimReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int64 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->point());
    }

    // optional .com.mservice.momo.msg.Gift gift = 3;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gift());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftClaimReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftClaimReply*>(&from));
}

void GiftClaimReply::MergeFrom(const GiftClaimReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_gift()) {
      mutable_gift()->::com::mservice::momo::msg::Gift::MergeFrom(from.gift());
    }
  }
}

void GiftClaimReply::CopyFrom(const GiftClaimReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftClaimReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GiftClaimReply::Swap(GiftClaimReply* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(point_, other->point_);
    std::swap(gift_, other->gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftClaimReply::GetTypeName() const {
  return "com.mservice.momo.msg.GiftClaimReply";
}


// ===================================================================

#ifndef _MSC_VER
const int UserSetting::kUseMpointFieldNumber;
#endif  // !_MSC_VER

UserSetting::UserSetting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserSetting::InitAsDefaultInstance() {
}

UserSetting::UserSetting(const UserSetting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserSetting::SharedCtor() {
  _cached_size_ = 0;
  usempoint_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSetting::~UserSetting() {
  SharedDtor();
}

void UserSetting::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserSetting& UserSetting::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

UserSetting* UserSetting::default_instance_ = NULL;

UserSetting* UserSetting::New() const {
  return new UserSetting;
}

void UserSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usempoint_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool useMpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usempoint_)));
          set_has_usempoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool useMpoint = 1;
  if (has_usempoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->usempoint(), output);
  }

}

int UserSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool useMpoint = 1;
    if (has_usempoint()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserSetting*>(&from));
}

void UserSetting::MergeFrom(const UserSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usempoint()) {
      set_usempoint(from.usempoint());
    }
  }
}

void UserSetting::CopyFrom(const UserSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSetting::IsInitialized() const {

  return true;
}

void UserSetting::Swap(UserSetting* other) {
  if (other != this) {
    std::swap(usempoint_, other->usempoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserSetting::GetTypeName() const {
  return "com.mservice.momo.msg.UserSetting";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGiftType::kTimeFieldNumber;
const int GetGiftType::kGiftTypeIdFieldNumber;
#endif  // !_MSC_VER

GetGiftType::GetGiftType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetGiftType::InitAsDefaultInstance() {
}

GetGiftType::GetGiftType(const GetGiftType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetGiftType::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  gifttypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGiftType::~GetGiftType() {
  SharedDtor();
}

void GetGiftType::SharedDtor() {
  if (gifttypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete gifttypeid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGiftType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGiftType& GetGiftType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetGiftType* GetGiftType::default_instance_ = NULL;

GetGiftType* GetGiftType::New() const {
  return new GetGiftType;
}

void GetGiftType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    if (has_gifttypeid()) {
      if (gifttypeid_ != &::google::protobuf::internal::kEmptyString) {
        gifttypeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetGiftType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_giftTypeId;
        break;
      }

      // optional string giftTypeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftTypeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gifttypeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGiftType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional string giftTypeId = 2;
  if (has_gifttypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gifttypeid(), output);
  }

}

int GetGiftType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string giftTypeId = 2;
    if (has_gifttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gifttypeid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGiftType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGiftType*>(&from));
}

void GetGiftType::MergeFrom(const GetGiftType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gifttypeid()) {
      set_gifttypeid(from.gifttypeid());
    }
  }
}

void GetGiftType::CopyFrom(const GetGiftType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGiftType::IsInitialized() const {

  return true;
}

void GetGiftType::Swap(GetGiftType* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(gifttypeid_, other->gifttypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGiftType::GetTypeName() const {
  return "com.mservice.momo.msg.GetGiftType";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGiftTypeReply::kGiftTypeFieldNumber;
#endif  // !_MSC_VER

GetGiftTypeReply::GetGiftTypeReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetGiftTypeReply::InitAsDefaultInstance() {
}

GetGiftTypeReply::GetGiftTypeReply(const GetGiftTypeReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetGiftTypeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGiftTypeReply::~GetGiftTypeReply() {
  SharedDtor();
}

void GetGiftTypeReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGiftTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGiftTypeReply& GetGiftTypeReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetGiftTypeReply* GetGiftTypeReply::default_instance_ = NULL;

GetGiftTypeReply* GetGiftTypeReply::New() const {
  return new GetGiftTypeReply;
}

void GetGiftTypeReply::Clear() {
  gifttype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetGiftTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.GiftType giftType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_giftType;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGiftTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.GiftType giftType = 1;
  for (int i = 0; i < this->gifttype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gifttype(i), output);
  }

}

int GetGiftTypeReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.GiftType giftType = 1;
  total_size += 1 * this->gifttype_size();
  for (int i = 0; i < this->gifttype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifttype(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGiftTypeReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGiftTypeReply*>(&from));
}

void GetGiftTypeReply::MergeFrom(const GetGiftTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifttype_.MergeFrom(from.gifttype_);
}

void GetGiftTypeReply::CopyFrom(const GetGiftTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGiftTypeReply::IsInitialized() const {

  return true;
}

void GetGiftTypeReply::Swap(GetGiftTypeReply* other) {
  if (other != this) {
    gifttype_.Swap(&other->gifttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGiftTypeReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetGiftTypeReply";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGift::kGiftIdFieldNumber;
#endif  // !_MSC_VER

GetGift::GetGift()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetGift::InitAsDefaultInstance() {
}

GetGift::GetGift(const GetGift& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetGift::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGift::~GetGift() {
  SharedDtor();
}

void GetGift::SharedDtor() {
  if (giftid_ != &::google::protobuf::internal::kEmptyString) {
    delete giftid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGift& GetGift::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetGift* GetGift::default_instance_ = NULL;

GetGift* GetGift::New() const {
  return new GetGift;
}

void GetGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftid()) {
      if (giftid_ != &::google::protobuf::internal::kEmptyString) {
        giftid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string giftId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->giftid(), output);
  }

}

int GetGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGift::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGift*>(&from));
}

void GetGift::MergeFrom(const GetGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
  }
}

void GetGift::CopyFrom(const GetGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGift::IsInitialized() const {

  return true;
}

void GetGift::Swap(GetGift* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGift::GetTypeName() const {
  return "com.mservice.momo.msg.GetGift";
}


// ===================================================================

#ifndef _MSC_VER
const int GetGiftReply::kIndexFieldNumber;
const int GetGiftReply::kGiftFieldNumber;
#endif  // !_MSC_VER

GetGiftReply::GetGiftReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetGiftReply::InitAsDefaultInstance() {
}

GetGiftReply::GetGiftReply(const GetGiftReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetGiftReply::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGiftReply::~GetGiftReply() {
  SharedDtor();
}

void GetGiftReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGiftReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGiftReply& GetGiftReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetGiftReply* GetGiftReply::default_instance_ = NULL;

GetGiftReply* GetGiftReply::New() const {
  return new GetGiftReply;
}

void GetGiftReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  gift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetGiftReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift;
        break;
      }

      // repeated .com.mservice.momo.msg.Gift gift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGiftReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .com.mservice.momo.msg.Gift gift = 2;
  for (int i = 0; i < this->gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->gift(i), output);
  }

}

int GetGiftReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .com.mservice.momo.msg.Gift gift = 2;
  total_size += 1 * this->gift_size();
  for (int i = 0; i < this->gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGiftReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetGiftReply*>(&from));
}

void GetGiftReply::MergeFrom(const GetGiftReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_.MergeFrom(from.gift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void GetGiftReply::CopyFrom(const GetGiftReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGiftReply::IsInitialized() const {

  return true;
}

void GetGiftReply::Swap(GetGiftReply* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    gift_.Swap(&other->gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGiftReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetGiftReply";
}


// ===================================================================

#ifndef _MSC_VER
const int SetGiftStatus::kGiftIdFieldNumber;
#endif  // !_MSC_VER

SetGiftStatus::SetGiftStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SetGiftStatus::InitAsDefaultInstance() {
}

SetGiftStatus::SetGiftStatus(const SetGiftStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SetGiftStatus::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGiftStatus::~SetGiftStatus() {
  SharedDtor();
}

void SetGiftStatus::SharedDtor() {
  if (giftid_ != &::google::protobuf::internal::kEmptyString) {
    delete giftid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetGiftStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetGiftStatus& SetGiftStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

SetGiftStatus* SetGiftStatus::default_instance_ = NULL;

SetGiftStatus* SetGiftStatus::New() const {
  return new SetGiftStatus;
}

void SetGiftStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftid()) {
      if (giftid_ != &::google::protobuf::internal::kEmptyString) {
        giftid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SetGiftStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string giftId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGiftStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->giftid(), output);
  }

}

int SetGiftStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGiftStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetGiftStatus*>(&from));
}

void SetGiftStatus::MergeFrom(const SetGiftStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
  }
}

void SetGiftStatus::CopyFrom(const SetGiftStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGiftStatus::IsInitialized() const {

  return true;
}

void SetGiftStatus::Swap(SetGiftStatus* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetGiftStatus::GetTypeName() const {
  return "com.mservice.momo.msg.SetGiftStatus";
}


// ===================================================================

bool SendMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SendMessage_Type SendMessage::MONEY_THANKS;
const SendMessage_Type SendMessage::GIFT_THANKS;
const SendMessage_Type SendMessage::Type_MIN;
const SendMessage_Type SendMessage::Type_MAX;
const int SendMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SendMessage::kToPhoneFieldNumber;
const int SendMessage::kTranIdFieldNumber;
const int SendMessage::kSenderNameFieldNumber;
const int SendMessage::kMsgFieldNumber;
const int SendMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

SendMessage::SendMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SendMessage::InitAsDefaultInstance() {
}

SendMessage::SendMessage(const SendMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessage::SharedCtor() {
  _cached_size_ = 0;
  tophone_ = 0;
  tranid_ = GOOGLE_LONGLONG(0);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessage::~SendMessage() {
  SharedDtor();
}

void SendMessage::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMessage& SendMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

SendMessage* SendMessage::default_instance_ = NULL;

SendMessage* SendMessage::New() const {
  return new SendMessage;
}

void SendMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tophone_ = 0;
    tranid_ = GOOGLE_LONGLONG(0);
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 toPhone = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tophone_)));
          set_has_tophone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tranId;
        break;
      }

      // optional int64 tranId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tranId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tranid_)));
          set_has_tranid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_senderName;
        break;
      }

      // optional string senderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 toPhone = 1;
  if (has_tophone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tophone(), output);
  }

  // optional int64 tranId = 2;
  if (has_tranid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tranid(), output);
  }

  // optional string senderName = 3;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sendername(), output);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

}

int SendMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 toPhone = 1;
    if (has_tophone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tophone());
    }

    // optional int64 tranId = 2;
    if (has_tranid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tranid());
    }

    // optional string senderName = 3;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendMessage*>(&from));
}

void SendMessage::MergeFrom(const SendMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tophone()) {
      set_tophone(from.tophone());
    }
    if (from.has_tranid()) {
      set_tranid(from.tranid());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void SendMessage::CopyFrom(const SendMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessage::IsInitialized() const {

  return true;
}

void SendMessage::Swap(SendMessage* other) {
  if (other != this) {
    std::swap(tophone_, other->tophone_);
    std::swap(tranid_, other->tranid_);
    std::swap(sendername_, other->sendername_);
    std::swap(msg_, other->msg_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendMessage::GetTypeName() const {
  return "com.mservice.momo.msg.SendMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftRequest::kGiftIdFieldNumber;
const int GiftRequest::kServiceIdFieldNumber;
#endif  // !_MSC_VER

GiftRequest::GiftRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftRequest::InitAsDefaultInstance() {
}

GiftRequest::GiftRequest(const GiftRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftRequest::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftRequest::~GiftRequest() {
  SharedDtor();
}

void GiftRequest::SharedDtor() {
  if (giftid_ != &::google::protobuf::internal::kEmptyString) {
    delete giftid_;
  }
  if (serviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete serviceid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftRequest& GiftRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GiftRequest* GiftRequest::default_instance_ = NULL;

GiftRequest* GiftRequest::New() const {
  return new GiftRequest;
}

void GiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftid()) {
      if (giftid_ != &::google::protobuf::internal::kEmptyString) {
        giftid_->clear();
      }
    }
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::kEmptyString) {
        serviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string giftId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serviceId;
        break;
      }

      // optional string serviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->giftid(), output);
  }

  // optional string serviceId = 2;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serviceid(), output);
  }

}

int GiftRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftid());
    }

    // optional string serviceId = 2;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftRequest*>(&from));
}

void GiftRequest::MergeFrom(const GiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
  }
}

void GiftRequest::CopyFrom(const GiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftRequest::IsInitialized() const {

  return true;
}

void GiftRequest::Swap(GiftRequest* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftRequest::GetTypeName() const {
  return "com.mservice.momo.msg.GiftRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTranConfirmReply::kPointFieldNumber;
const int GetTranConfirmReply::kMomoFieldNumber;
const int GetTranConfirmReply::kGiftFieldNumber;
#endif  // !_MSC_VER

GetTranConfirmReply::GetTranConfirmReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetTranConfirmReply::InitAsDefaultInstance() {
}

GetTranConfirmReply::GetTranConfirmReply(const GetTranConfirmReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetTranConfirmReply::SharedCtor() {
  _cached_size_ = 0;
  point_ = GOOGLE_LONGLONG(0);
  momo_ = GOOGLE_LONGLONG(0);
  gift_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTranConfirmReply::~GetTranConfirmReply() {
  SharedDtor();
}

void GetTranConfirmReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTranConfirmReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTranConfirmReply& GetTranConfirmReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetTranConfirmReply* GetTranConfirmReply::default_instance_ = NULL;

GetTranConfirmReply* GetTranConfirmReply::New() const {
  return new GetTranConfirmReply;
}

void GetTranConfirmReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    point_ = GOOGLE_LONGLONG(0);
    momo_ = GOOGLE_LONGLONG(0);
    gift_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetTranConfirmReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_momo;
        break;
      }

      // optional int64 momo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &momo_)));
          set_has_momo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gift;
        break;
      }

      // optional int64 gift = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gift_)));
          set_has_gift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTranConfirmReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->point(), output);
  }

  // optional int64 momo = 4;
  if (has_momo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->momo(), output);
  }

  // optional int64 gift = 5;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gift(), output);
  }

}

int GetTranConfirmReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->point());
    }

    // optional int64 momo = 4;
    if (has_momo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->momo());
    }

    // optional int64 gift = 5;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gift());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTranConfirmReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTranConfirmReply*>(&from));
}

void GetTranConfirmReply::MergeFrom(const GetTranConfirmReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_momo()) {
      set_momo(from.momo());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
  }
}

void GetTranConfirmReply::CopyFrom(const GetTranConfirmReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTranConfirmReply::IsInitialized() const {

  return true;
}

void GetTranConfirmReply::Swap(GetTranConfirmReply* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(momo_, other->momo_);
    std::swap(gift_, other->gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTranConfirmReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetTranConfirmReply";
}


// ===================================================================

bool InfoAlertType_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InfoAlertType_Status InfoAlertType::ACTIVE;
const InfoAlertType_Status InfoAlertType::INACTIVE;
const InfoAlertType_Status InfoAlertType::DELETED;
const InfoAlertType_Status InfoAlertType::Status_MIN;
const InfoAlertType_Status InfoAlertType::Status_MAX;
const int InfoAlertType::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InfoAlertType::kIdFieldNumber;
const int InfoAlertType::kDescFieldNumber;
const int InfoAlertType::kStatusFieldNumber;
const int InfoAlertType::kLastTimeFieldNumber;
#endif  // !_MSC_VER

InfoAlertType::InfoAlertType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InfoAlertType::InitAsDefaultInstance() {
}

InfoAlertType::InfoAlertType(const InfoAlertType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InfoAlertType::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  last_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoAlertType::~InfoAlertType() {
  SharedDtor();
}

void InfoAlertType::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InfoAlertType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InfoAlertType& InfoAlertType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

InfoAlertType* InfoAlertType::default_instance_ = NULL;

InfoAlertType* InfoAlertType::New() const {
  return new InfoAlertType;
}

void InfoAlertType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    status_ = 0u;
    last_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InfoAlertType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoAlertType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

}

int InfoAlertType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoAlertType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InfoAlertType*>(&from));
}

void InfoAlertType::MergeFrom(const InfoAlertType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
}

void InfoAlertType::CopyFrom(const InfoAlertType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoAlertType::IsInitialized() const {

  return true;
}

void InfoAlertType::Swap(InfoAlertType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(status_, other->status_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InfoAlertType::GetTypeName() const {
  return "com.mservice.momo.msg.InfoAlertType";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAlertType::kLastTimeFieldNumber;
#endif  // !_MSC_VER

GetAlertType::GetAlertType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetAlertType::InitAsDefaultInstance() {
}

GetAlertType::GetAlertType(const GetAlertType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetAlertType::SharedCtor() {
  _cached_size_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAlertType::~GetAlertType() {
  SharedDtor();
}

void GetAlertType::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAlertType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAlertType& GetAlertType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetAlertType* GetAlertType::default_instance_ = NULL;

GetAlertType* GetAlertType::New() const {
  return new GetAlertType;
}

void GetAlertType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetAlertType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAlertType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_time = 1;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_time(), output);
  }

}

int GetAlertType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_time = 1;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAlertType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAlertType*>(&from));
}

void GetAlertType::MergeFrom(const GetAlertType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
}

void GetAlertType::CopyFrom(const GetAlertType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAlertType::IsInitialized() const {

  return true;
}

void GetAlertType::Swap(GetAlertType* other) {
  if (other != this) {
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAlertType::GetTypeName() const {
  return "com.mservice.momo.msg.GetAlertType";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAlertTypeReply::kAlertTypesFieldNumber;
#endif  // !_MSC_VER

GetAlertTypeReply::GetAlertTypeReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetAlertTypeReply::InitAsDefaultInstance() {
}

GetAlertTypeReply::GetAlertTypeReply(const GetAlertTypeReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetAlertTypeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAlertTypeReply::~GetAlertTypeReply() {
  SharedDtor();
}

void GetAlertTypeReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAlertTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAlertTypeReply& GetAlertTypeReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

GetAlertTypeReply* GetAlertTypeReply::default_instance_ = NULL;

GetAlertTypeReply* GetAlertTypeReply::New() const {
  return new GetAlertTypeReply;
}

void GetAlertTypeReply::Clear() {
  alert_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetAlertTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.mservice.momo.msg.InfoAlertType alert_types = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alert_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_alert_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAlertTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.mservice.momo.msg.InfoAlertType alert_types = 1;
  for (int i = 0; i < this->alert_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->alert_types(i), output);
  }

}

int GetAlertTypeReply::ByteSize() const {
  int total_size = 0;

  // repeated .com.mservice.momo.msg.InfoAlertType alert_types = 1;
  total_size += 1 * this->alert_types_size();
  for (int i = 0; i < this->alert_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alert_types(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAlertTypeReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAlertTypeReply*>(&from));
}

void GetAlertTypeReply::MergeFrom(const GetAlertTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  alert_types_.MergeFrom(from.alert_types_);
}

void GetAlertTypeReply::CopyFrom(const GetAlertTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAlertTypeReply::IsInitialized() const {

  return true;
}

void GetAlertTypeReply::Swap(GetAlertTypeReply* other) {
  if (other != this) {
    alert_types_.Swap(&other->alert_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAlertTypeReply::GetTypeName() const {
  return "com.mservice.momo.msg.GetAlertTypeReply";
}


// ===================================================================

#ifndef _MSC_VER
const int InfoAlert::kAlertIdFieldNumber;
const int InfoAlert::kTypeFieldNumber;
const int InfoAlert::kDescFieldNumber;
const int InfoAlert::kImagesFieldNumber;
const int InfoAlert::kOsFieldNumber;
#endif  // !_MSC_VER

InfoAlert::InfoAlert()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InfoAlert::InitAsDefaultInstance() {
}

InfoAlert::InfoAlert(const InfoAlert& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InfoAlert::SharedCtor() {
  _cached_size_ = 0;
  alert_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoAlert::~InfoAlert() {
  SharedDtor();
}

void InfoAlert::SharedDtor() {
  if (alert_id_ != &::google::protobuf::internal::kEmptyString) {
    delete alert_id_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InfoAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InfoAlert& InfoAlert::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MomoProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MomoProto_2eproto();
#endif
  return *default_instance_;
}

InfoAlert* InfoAlert::default_instance_ = NULL;

InfoAlert* InfoAlert::New() const {
  return new InfoAlert;
}

void InfoAlert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert_id()) {
      if (alert_id_ != &::google::protobuf::internal::kEmptyString) {
        alert_id_->clear();
      }
    }
    type_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
  }
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InfoAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string alert_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alert_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_images;
        break;
      }

      // repeated string images = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_images;
        if (input->ExpectTag(42)) goto parse_os;
        break;
      }

      // optional string os = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string alert_id = 1;
  if (has_alert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alert_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // repeated string images = 4;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->images(i), output);
  }

  // optional string os = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->os(), output);
  }

}

int InfoAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string alert_id = 1;
    if (has_alert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alert_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string os = 5;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  // repeated string images = 4;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoAlert::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InfoAlert*>(&from));
}

void InfoAlert::MergeFrom(const InfoAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_id()) {
      set_alert_id(from.alert_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
}

void InfoAlert::CopyFrom(const InfoAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoAlert::IsInitialized() const {

  return true;
}

void InfoAlert::Swap(InfoAlert* other) {
  if (other != this) {
    std::swap(alert_id_, other->alert_id_);
    std::swap(type_, other->type_);
    std::swap(desc_, other->desc_);
    images_.Swap(&other->images_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InfoAlert::GetTypeName() const {
  return "com.mservice.momo.msg.InfoAlert";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace momo
}  // namespace mservice
}  // namespace com

// @@protoc_insertion_point(global_scope)
